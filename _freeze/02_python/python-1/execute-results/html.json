{
  "hash": "681531262e078cceb6d7dbba79e08ad0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '1. Input, output, variables, types, conditionals'\njupyter: python3\n---\n\n\n\n## Input => Process => Output\n\n1. Identify the problem inputs (requirements)\n2. Identify the problem outputs (results)\n3. Write an algorithm to transform inputs to outputs.\n4. If you don't know how to do a step... research it!\n\n![](fig/python-1-1.png)\n\n## Python input and output\n\n`print()` does output  \n`input()` does input, returns input so you must assign it to a variable  \n\n::: {#09a1cd2b .cell tags='[]' execution_count=1}\n``` {.python .cell-code}\nx = input(\"Enter something: \")\n```\n:::\n\n\n::: {#430ecd99 .cell execution_count=2}\n``` {.python .cell-code}\nprint(x)\n```\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 1.1\n\nWrite a program to input your first name and last name then output your last name, first name.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#3755bcd2 .cell execution_count=3}\n``` {.python .cell-code}\nfirst = input(\"Enter your first name: \")\nlast = input(\"Enter your last name: \")\nprint(last, \",\", first)\n# could also do (see next section):\nprint(f\"{last}, {first}\")\n```\n:::\n\n\n:::\n::::\n\n\n## F-Strings\n\n- F-Strings are Python's answer to **string interpolation**.\n- This replaces the variable name with its value within a string.\n- Called an F-string because the `f` tells Python to interpolate the string.\n\n::: {#1e25277b .cell execution_count=4}\n``` {.python .cell-code}\nname = 'George'\nprint(\"{name} was curious.\")\nprint(f\"{name} was curious.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{name} was curious.\nGeorge was curious.\n```\n:::\n:::\n\n\n:::: {.callout-note appearance=\"simple\" icon=\"false\"}\n### Check Yourself 1\n\nWhich is an example of a properly used string literal?\n\nA. `print(welcome)`\n\nB. `print(\"welcome\")`\n\nC. `print \"welcome\"`\n\nD. `print welcome`\n\n**Vote now at** [https://PollEv.com/ist356m3](https://PollEv.com/ist356m3)\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n**B**\n\n*Note*: In Python 2.7 and earlier the correct answer would be C. The syntax for the `print` function was changed in Python 3. Python 2 is no longer supported. \n:::\n::::\n\n\n## Variables\n\n- **Variables** are named areas of computer memory for storing data. \n- The **name** can be anything but should make symbolic sense to the programmer.\n- We **write** to the variableâ€™s memory location with the assignment statement (=)\n- We **read** from the variable by calling its name. \n- Variable names must begin with a letter or _ and must only contain letters, numbers or _.\n\n### Variables are of a Specific Type\n\n<table style=\"font-size:1.2em;\">\n    <thead><tr>\n        <th>Type</th>\n        <th>Purpose</th>\n        <th>Examples</th>\n    </tr></thead>\n    <tbody>\n    <tr>\n        <td><code>int</code></td>\n        <td>Numeric type for integers only</td>\n        <td>45, -10</td>\n    </tr>\n    <tr>\n        <td><code>float</code></td>\n        <td>Numeric type floating point numbers</td>\n        <td>45, -10</td>\n    </tr>\n    <tr>\n        <td><code>bool</code></td>\n        <td>True or False values</td>\n        <td>True, False</td>\n    </tr>\n    <tr>\n        <td><code>str</code></td>\n        <td>Characters and text</td>\n        <td>\"A\", 'Mike'</td>\n    </tr>\n  </tbody>\n</table>\n\n### Type Detection and Conversion \n\n<table style=\"font-size:1.2em;\">\n    <thead><tr>\n        <th>Python Function</th>\n        <th>What It Does</th>\n        <th>Example of Use</th>\n    </tr></thead>\n    <tbody>\n    <tr>\n        <td><code>type(<em>n</em>)</code></td>\n        <td>Returns the current type of <em>n</em></td>\n        <td><code>type(13) == int</code></td>\n    </tr>\n    <tr>\n        <td><code>int(<em>n</em>)</code></td>\n        <td>Converts <em>n</em> to type <b>int</b></td>\n        <td><code>int(\"45\") == 45</code></td>\n    </tr>\n    <tr>\n        <td><code>float(<em>n</em>)</code></td>\n        <td>Converts <em>n</em> to type <b>float</b></td>\n        <td><code>float(45) == 45.0</code></td>\n    </tr>\n    <tr>\n        <td><code>str(<em>n</em>)</code></td>\n        <td>Converts <em>n</em> to type <b>str</b></td>\n        <td><code>str(4.0) == '4.0'</code></td>\n    </tr>\n  </tbody>\n</table>\n\n## Programmatic Expressions\n\nProgrammatic Expressions contain **operators** and **operands**. They evaluate to a value, preserving type: \n\n::: {#aa627370 .cell execution_count=5}\n``` {.python .cell-code}\nprint(2 + 2)\nprint(2.0 + 2)\nprint(\"sh\" + 'ip')\nprint('hi' + 2) # error\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n4.0\nship\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[2]</span><span class=\"ansi-green-fg\">, line 4</span>\n<span class=\"ansi-green-fg\">      2</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-green-fg\">2.0</span> + <span class=\"ansi-green-fg\">2</span>)\n<span class=\"ansi-green-fg\">      3</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">sh</span><span class=\"ansi-yellow-fg\">\"</span> + <span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">ip</span><span class=\"ansi-yellow-fg\">'</span>)\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">4</span> <span style=\"color:rgb(0,135,0)\">print</span>(<span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">hi</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">+</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-green-fg ansi-yellow-bg\">2</span>) <span style=\"font-style:italic;color:rgb(95,135,135)\"># error</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: can only concatenate str (not \"int\") to str</pre>\n```\n:::\n\n:::\n:::\n\n\n## Arithmetic Operators\n\n<table style=\"font-size:1.2em;\">\n    <thead><tr>\n        <th>Operator</th>\n        <th>What it Does</th>\n        <th>Example of Use</th>\n    </tr></thead>\n    <tbody>\n    <tr>\n        <td><code>+</code></td>\n        <td>Addition or string concenation</td>\n        <td><code>3 + 4 == 7</code></td>\n    </tr>\n    <tr>\n        <td><code>-</code></td>\n        <td>Subtraction</td>\n        <td><code>4 - 3 == 1</code></td>\n    </tr>\n    <tr>\n        <td><code>*</code></td>\n        <td>Multiplication</td>\n        <td><code>3 * 4 == 12</code></td>\n    </tr>\n    <tr>\n        <td><code>/</code></td>\n        <td>Division</td>\n        <td><code>4 / 3 == 1.33333</code></td>\n    </tr>\n    <tr>\n        <td><code>//</code></td>\n        <td>Intger division (quotent)</td>\n        <td><code>13 // 3 == 4</code></td>\n    </tr>\n    <tr>\n        <td><code>%</code></td>\n        <td>Modulo (remainder)</td>\n        <td><code>13 % 3 == 1</code></td>\n    </tr>\n    <tr>\n        <td><code>( )</code></td>\n        <td>Force an order of operations</td>\n        <td><code>2 * (3 + 4) == 14</code></td>\n    </tr>\n  </tbody>\n</table>\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 1.2: Program to divide up the check among diners in a party\n\nWrite a program that takes as input the amount of a restaurant check, tip %, and number of diners.\n\nThe program should output the total amount with tip, and the amount each diner owes.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#cc865ad7 .cell execution_count=6}\n``` {.python .cell-code}\nbill = float(input(\"Enter the total amount of the bill $\"))\ntip = int(input(\"What % would you like to tip, eg. 20 == 20%? \"))\ntip_pct = tip/100\ndiners = int(input(\"How many diners? \"))\ntotal = bill + bill*tip_pct\nshare = total / diners\nprint(\"Total Bill, with Tip: \", total)\nprint(f\"Even share among {diners} diners is {share:.2f}\")\n```\n:::\n\n\n:::\n::::\n\n:::: {.callout-note appearance=\"simple\" icon=\"false\"}\n### Check Yourself 2\n\nWhat is the value of `str(314)` ?\n\nA. `314`  \n\nB. `\"314\"`  \n\nC. `int`  \n\nD. `'34.0'`\n\n**Vote now at** [https://PollEv.com/ist356m3](https://PollEv.com/ist356m3)\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n**B**\n\n:::\n::::\n\n:::: {.callout-note appearance=\"simple\" icon=\"false\"}\n### Check Yourself 3\n\nWhat is the value of `type(314.0)` ?\n\nA. `314`  \n\nB. `float`  \n\nC. `int`  \n\nD. `'314.0'`\n\n**Vote now at** [https://PollEv.com/ist356m3](https://PollEv.com/ist356m3)\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n**B**\n\n:::\n::::\n\n\n:::: {.callout-note appearance=\"simple\" icon=\"false\"}\n### Check Yourself 4\n\nWhat is the output of the following python code?\n\n::: {#833305b1 .cell execution_count=7}\n``` {.python .cell-code}\na = 10\nb = 2\nc = 1 + (a/b)\nprint(c)\n```\n:::\n\n\nA. `6`\n\nB. `5.5`  \n\nC. `6.0`  \n\nD. `5` \n\n**Vote now at** [https://PollEv.com/ist356m3](https://PollEv.com/ist356m3)\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n**C**\n\n:::\n::::\n\n## Program Flow Control with IF\n\n- The **IF** statement is used to branch your code based on a Boolean expression.  \n\n::: {#d3b82176 .cell execution_count=8}\n``` {.python .cell-code}\nif boolean-expression:\n    statements-when-true\nelse:\n    statemrnts-when-false\n```\n:::\n\n\n![](fig/python-1-2.png)\n\n\n## Pythonâ€™s Relational Operators \n\n<table style=\"font-size:1.2em;\">\n    <thead><tr>\n        <th>Operator</th>\n        <th>What it does</th>\n        <th>Examples</th>\n    </tr></thead>\n    <tbody>\n    <tr>\n        <td><code> > </code></td>\n        <td> Greater than </td>\n        <td> 4>2 (True)</td>\n    </tr>\n    <tr>\n        <td><code> < </code></td>\n        <td> Less than </td>\n        <td> 4<2 (False)</td>\n    </tr>\n    <tr>\n        <td><code> == </code></td>\n        <td> Equal To </td>\n        <td> 4==2 (False)</td>\n    </tr>\n    <tr>\n        <td><code> != </code></td>\n        <td> Not Equal To </td>\n        <td> 4!=2 (True)</td>\n    </tr>\n    <tr>\n        <td><code> >= </code></td>\n        <td> Greater Than or Equal To </td>\n        <td> 4>=2 (True)</td>\n    <tr>\n        <td><code> <= </code></td>\n        <td> Less Than or Equal To </td>\n        <td> 4<=2 (True)</td>\n    </tr>\n  </tbody>\n</table>\n\nExpressions consisting of relational operators evaluate to a **Boolean** value\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 1.3: Presssure sensor that determines whether to open a door\n\nWrite code that simulates a pressure sensor that opens a door when the pressure is larger than 10; otherwise, it closes the door.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#b09d0aed .cell execution_count=9}\n``` {.python .cell-code}\nreading = float(input(\"Sensor Reading: \"))\n\nif reading > 10:\n    status = \"Opening\"\nelse:\n    status = \"Closing\"\n\nprint(f\"{status} the door\")\n```\n:::\n\n\n:::\n::::\n\n:::: {.callout-note appearance=\"simple\" icon=\"false\"}\n### Check Yourself 5: Relational operators\n\nOn Which line number is the Boolean expression True?  \n\n::: {#4b0d640f .cell execution_count=10}\n``` {.python .cell-code}\nx = 15      # 1\ny = 20      # 2\nz = 2       # 3\nx > y       # 4\nz*x <= y    # 5\ny >= x-z    # 6\nz*10 == x   # 7\n```\n:::\n\n\nA. `4`\n\nB. `5`\n\nC. `6`\n\nD. `7`\n\n**Vote now at** [https://PollEv.com/ist356m3](https://PollEv.com/ist356m3)\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n**C**\n\n:::\n::::\n\n\n## Pythonâ€™s Logical Operators\n\n<table style=\"font-size:1.2em;\">\n    <thead><tr>\n        <th>Operator</th>\n        <th>What it does</th>\n        <th>Examples</th>\n    </tr></thead>\n    <tbody>\n    <tr>\n        <td><code> and </code></td>\n        <td> True only when both are True </td>\n        <td> 4>2 and 4<5 (True)</td>\n    </tr>\n    <tr>\n        <td><code> or </code></td>\n        <td> False only when both are False </td>\n        <td> 4<2 or 4==4 (True)</td>\n    </tr>\n    <tr>\n        <td><code> not </code></td>\n        <td> Negation(Opposite) </td>\n        <td> not 4==2 (True)</td>\n    </tr>\n    <tr>\n        <td><code> in </code></td>\n        <td> Set operator </td>\n        <td> 4 in [2,4,7] (True)</td>\n    </tr>\n  </tbody>\n</table>\n\n:::: {.callout-note appearance=\"simple\" icon=\"false\"}\n### Check Yourself 6: Logical Operators\n\nIn the following code, which line evaluates to `True`?  \n\n::: {#40d59203 .cell execution_count=11}\n``` {.python .cell-code}\nraining = False              # 1\nsnowing = True               # 2\nage = 45                     # 3\nage < 18 and raining         # 4\nage >= 18 and not snowing    # 5\nnot snowing or not raining   # 6\nage == 45 and not snowing    # 7\n```\n:::\n\n\nA. `4`\n\nB. `5`\n\nC. `6`\n\nD. `7`\n\n\n**Vote now at** [https://PollEv.com/ist356m3](https://PollEv.com/ist356m3)\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n**C**\n\n:::\n::::\n\n\n## Multiple Decisions: IF ladder\n\nUse elif to make more than one decision in your if statement. Only one code block within the ladder is executed.\n\n::: {#00f6f204 .cell execution_count=12}\n``` {.python .cell-code}\nif boolean-expression1:\n    statements-when-exp1-true\nelif boolean-expression2:\n    statements-when-exp2-true\nelif boolean-expression3:\n    statements-when-exp3-true\nelse:\n    statements-none-are-true\n```\n:::\n\n\n![](fig/python-1-3.png)\n\n::: {#1e94de58 .cell tags='[]' execution_count=13}\n``` {.python .cell-code}\n#Elif versus multiple ifs...\n# One decision or multiple decisions. \n\nx = int(input(\"enter an integer\"))\n\n# one decision\nif x>10:\n    print(\"A:bigger than 10\")\nelif x>20:\n    print(\"A:bigger than 20\")    \n\n    # Multiple decisions\nif x>10:\n    print(\"B:bigger than 10\")\nif x>20:\n    print(\"B:bigger than 20\")\n```\n:::\n\n\n:::: {.callout-note appearance=\"simple\" icon=\"false\"}\n### Check Yourself 7: IF statement\n\nAssuming values `x = 25` and `y = 6`, what will be printed when the following code is run?\n\n::: {#c3c048c9 .cell execution_count=14}\n``` {.python .cell-code}\nif x > 20:\n    if y == 4:\n        print(\"One\")\n    elif y > 4:\n        print(\"Two\")\n    else:\n        print(\"Three\")\nelse:\n    print(\"Four\")\n```\n:::\n\n\nA. `One`  \n\nB. `Two`  \n\nC. `Three`  \n\nD. `Four`  \n\n**Vote now at** [https://PollEv.com/ist356m3](https://PollEv.com/ist356m3)\n\n::: {.callout-note collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n**B**\n\n:::\n::::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 1.4: Number to letter grade\n\n- Letter grades in a college class are computed as follows: \n    \n   - 95 and above is an A\n   - 75 and above, but below 95 is a B\n   - 50 and above, but below 75 is a C\n   - below 50 is F\n   \n- Write a program to input the number grade and calculate the letter grade\n\n- The program should also print an error message if the provided number grade is out of range (i.e., > 120 or < 0).\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#bedb56bb .cell execution_count=15}\n``` {.python .cell-code}\nnumber_grade = int(input(\"Enter your numerical grade: 0 - 120\"))\nletter_grade = \"unknown\"\n\nif number_grade >= 0 and number_grade <= 120:\n\n    if number_grade >= 95:\n        letter_grade = \"A\"\n    elif number_grade >= 75:\n        letter_grade = \"B\"\n    elif number_grade >= 50:\n        letter_grade = \"C\"\n    else:\n        letter_grade = \"F\"\n\n    print(f\"For {number_grade} points the letter grade is {letter_grade}\")\n\nelse:\n    print(f\"Number grade of {number_grade} is out of range!\")\n```\n:::\n\n\n:::\n::::\n\n",
    "supporting": [
      "python-1_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}