{
  "hash": "2a48e9a2c21701fd16fc9f8405aa0ad0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '2. Iterations, lists, dictionaries, comprehensions'\njupyter: python3\n---\n\n\n# Iterations\n\n- Iterations are code strucures which allow us to repeat sections of code while a condition is true, or a fixed number of time.\n- They allow us to do more with less code!\n\n# Definite loops (For Loop)\n\n- A **Definite loop** iterates over a a fixed set of values.\n- Real life iterations: Knocking on every door in your dorm. Calling each person in the contact list on your phone.\n- In Python, the `for` statement is used for definite loops \n- The `for` loop uses an **iterator** to select each item from the list or range and take action in the loop body. \n- The `range()` function is useful for getting an iterator of numbers.\n- The `for` loop can iterate over any value that is **iterable**. \n\n::: {#ea79a7c4 .cell tags='[]' execution_count=1}\n``` {.python .cell-code}\n# Example: Using the range() function to iterarate over a sequence\n\nfor i in range(5):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n4\n```\n:::\n:::\n\n\nIn the example above:\n\n- the `print()` statement repeats as part of the loop body.\n- the variable `i` is the **iterator**. It stores the current value of the `range(5)` for each iteration of the loop\n- `range(5)` is an example of the **iterable** - the thing we are looping over.\n- `range(5)` by definition creates an **iterable** of sequential numbers from 0 to 4: `0,1,2,3,4`\n- Therefore the code repeats `5` times...\n\n::: {#6f75c1dd .cell tags='[]' execution_count=2}\n``` {.python .cell-code}\n# Example: strings are iterable by their individual characters\nfor ch in \"testing\":\n    if ch == \"t\":\n        print(ch)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt\nt\n```\n:::\n:::\n\n\nQuestions about the example above:\n\n- What is the iterator variable?\n- What is the iterable?\n- How many times does this loop \"iterate\"?\n- Why does it only print two `t`'s?\n\n## The break command\n\n- `break` keyword exits the loop immediately.\n- Commonly used when there is no longer a reason to loop (you achieved your goal).\n- You can add an `else` to the `for` loop to execute when break does not happen.\n\n::: {#60d0abb4 .cell tags='[]' execution_count=3}\n``` {.python .cell-code}\n# Example: find a letter in a text string\n\ntext = input(\"Enter Some Text:\")\nfind = input(\"Enter character to find:\")\nfor ch in text:\n    if ch == find:\n        print(f\"Found {find} in {text}!\")\n        break\nelse:\n    print(f\"Unable to find {find} in {text}!\")\n```\n:::\n\n\n```\nEnter Some Text: testing\nEnter character to find: n\nFound n in testing!\n\nEnter Some Text: testing\nEnter character to find: x\nUnable to find x in testing!\n\n```\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.1\n\nWrite a program to accept a password as input. If the password input is \"secret\" display \"access granted\". Otherwise say \"invalid password\".\n\nRepeat the above up to 5 times. When the correct password is entered, stop looping. When 5 loops have exhausted, print \"you are locked out\".\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#c90ceafe .cell execution_count=4}\n``` {.python .cell-code}\nvalid_password = \"secret\"\nfor i in range(5):\n    pw = input(\"Enter Password:\")\n    if pw == valid_password:\n        print(\"Access Granted!\")\n        break\n    else:\n        print(\"Invalid Password.\")\nelse:\n    print(\"You are locked out\")\n```\n:::\n\n\n:::\n::::\n\n# Indefinite loops\n\n- Indefinite loops are based on external input and are **non-deterministic**.\n- Unlike definite loops we do not know when the loop will stop.\n- Examples: get tutoring when you fail an exam (you may never fail an exam). When the temperature drops below 0 turn on the de-icer.\n- In Python, we use `while` statement for indefinite loops.\n- The classic indefinite loop is a sentinel-controlled loop that repeats until a specific event occurs.\n\n::: {#63e1e3fd .cell tags='[]' execution_count=5}\n``` {.python .cell-code}\n# Example: Will I ever say the magic word?\nwhile True:\n    word = input(\"Say the magic word!\")\n    if word == 'please':\n        break\n    print(\"You didn't say the magic word!\")\n```\n:::\n\n\nIn the above example the word \"please\" is the **sentinel value**\n\n::: {#e9893672 .cell tags='[]' execution_count=6}\n``` {.python .cell-code}\n# Example: Sentinel loop\ncount = 0\nwhile True:\n    raw = input(\"Enter a number or type 'stop':\")\n    if raw == 'stop':\n        break\n    count = count + 1\n\nprint(f\"You entered {count} items.\")\n```\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.2\n\nWrite a program to accept numbers until the user enters: 0\n\nThe program should count the number of positive and negative numbers entered, \nand print those values after the 0 is entered.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#7da50c05 .cell execution_count=7}\n``` {.python .cell-code}\npos = 0\nneg = 0\n\nwhile True:\n    num = int(input(\"Enter an integer:\"))\n    if num > 0:\n        pos = pos + 1\n    elif num < 0:\n        neg = neg + 1\n    else:\n        break\n\nprint(f\"Number of + numbers entered: {pos}\")\nprint(f\"Number of - numbers entered: {neg}\")\n```\n:::\n\n\n:::\n::::\n\n# Lists\n\n- lists are **iterable**, sequences of values\n- The values in the list are **mutable** - you can change them.\n- items in the list can be accessed by a **zero-based** index.\n\n::: {#6fd78db6 .cell tags='[]' execution_count=8}\n``` {.python .cell-code}\n# Example: Items in the list\nitems = [ 'milk', 'bread' ,'cheese', 'apples' ]\n\nprint(\"The first item is:\", items[0])\nprint(\"The second item is:\", items[1])\nprint(\"The last item is:\", items[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe first item is: milk\nThe second item is: bread\nThe last item is: apples\n```\n:::\n:::\n\n\n::: {#b2d2a27f .cell tags='[]' execution_count=9}\n``` {.python .cell-code}\n# Lists are iterable\nitems = [ 'milk', 'bread' ,'cheese', 'apples' ]\nfor item in items:\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmilk\nbread\ncheese\napples\n```\n:::\n:::\n\n\nQuestions about the example above:\n\n- What is the iterator variable?\n- What is the iterable?\n- How many times does this loop \"iterate\"?\n\n## The in operator\n\nThe `in` operator checks for existence of an item in a list.\n\n::: {#42127e1a .cell tags='[]' execution_count=10}\n``` {.python .cell-code}\n# Example: whats in the list?\nnumbers = [10, 15, 20]\nprint(f\"5 in {numbers}?\", 5 in numbers)\nprint(f\"20 in {numbers}?\", 20 in numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 in [10, 15, 20]? False\n20 in [10, 15, 20]? True\n```\n:::\n:::\n\n\n## List Methods\n\nThere are numerous list methods which allow you to add, remove, and find values in the list, etc...\n\n<https://docs.python.org/3/library/stdtypes.html?highlight=list#mutable-sequence-types>\n\n::: {#921a4515 .cell tags='[]' execution_count=11}\n``` {.python .cell-code}\n# Example: manipulating a list\n\n# An empty list\ncolors = []\n\n# Add \"blue\" to the end\ncolors.append(\"blue\")\n\n# add \"red\" to the beginning\ncolors.insert(0, \"red\")\n\n# add \"white\" in the 2nd position\ncolors.insert(1, \"white\")\n\n# print ['red', 'white', 'blue']\nprint(colors)\n\n# remove the last color\nblue = colors.pop(-1)\n\n# remove \"white\"\nwhite = colors.remove(\"white\")\n\n# print ['red']\nprint(colors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['red', 'white', 'blue']\n['red']\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.3\n\nWrite a sentinel controlled loop to input a color until \"quit\" is entered. Add each color to a list only when the color is not already in the list. Print the list each time in the loop.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#4ac73fd9 .cell execution_count=12}\n``` {.python .cell-code}\ncolors = []\n\nwhile True:\n    color = input(\"Enter a color:\")\n    if color == 'quit':\n        break\n    if color not in colors:\n        colors.append(color)\n        op = \"added to\"\n    else:\n        op = \"already in\"\n\n    print(f\"{color} {op} {colors}\")\n```\n:::\n\n\n:::\n::::\n\n# list comprehensions\n\nList comprehensions allow us to create lists from operations on existing lists.\n\nConsider the following:\n\n::: {#c4967027 .cell tags='[]' execution_count=13}\n``` {.python .cell-code}\nnumbers = [1, 2, 4, 5, 7]\nevens = []\nfor num in numbers:\n    if num % 2 == 0: #even\n        evens.append(num)\nprint(evens)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 4]\n```\n:::\n:::\n\n\n::: {#1968f35c .cell tags='[]' execution_count=14}\n``` {.python .cell-code}\n# Same thing as a list comprehension\nnumbers = [1, 2, 4, 5, 7]\nevens = [ num for num in numbers if num % 2 == 0]\nprint(evens)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2, 4]\n```\n:::\n:::\n\n\n::: {#0f58380d .cell tags='[]' execution_count=15}\n``` {.python .cell-code}\n# This comprehension makes a list out of the first letter in each work\nwords = [\"welcome\", \"other\", \"rent\", \"math\" ]\nfirsts = [ word[0] for word in words ]\nprint(firsts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['w', 'o', 'r', 'm']\n```\n:::\n:::\n\n\n# Dictionaries\n\n- The **dict** type is designed to store **key**-**value** pairs. In Python this is known as a **mapping type**.  \n`font = {'name': 'Arial','size': 8}`\n- Python dictionaries are **mutable** which means you can change the values of the keys after they have been set.\n- Dictionary values are accessed and set by **key** not by **index**.  \n`font['name'] = 'Courier'`\n- the keys are unique in the dictionary\n\n## Dictionary Methods\n\nLike **str** and **list**, the **dict** type has its own set of built-in functions.\n<https://docs.python.org/3/library/stdtypes.html#mapping-types-dict>\n\n::: {#52f3da9a .cell tags='[]' execution_count=16}\n``` {.python .cell-code}\nfont = {'name': 'Arial','size': 8}\n\nprint(font.keys()) # this is an iterable\n\nprint(font.values()) # this is an iterable\n\nprint(font['name'])\n\nfont['name'] = 'Courier'\n\nprint(font['name'])\n\nprint('size' in font)\n\nprint(font.get('style', 'normal')) # get with default value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndict_keys(['name', 'size'])\ndict_values(['Arial', 8])\nArial\nCourier\nTrue\nnormal\n```\n:::\n:::\n\n\n## Complex Data Stuctures\n\nWe can combine lists and dictionaries to create complex data structures in python.\n\nThese allow us to represent real-world data in code\n\n::: {#b74be04e .cell tags='[]' execution_count=17}\n``` {.python .cell-code}\nstudents = [\n    { 'name' : 'abby', 'grades' : [100,80,90] },\n    { 'name' : 'bob', 'grades' : [100,90,90] },\n    { 'name' : 'chris', 'grades' : [90,100,100] }\n]\n```\n:::\n\n\n::: {#ecb5f88a .cell tags='[]' execution_count=18}\n``` {.python .cell-code}\n# just print each student name\nfor student in students:\n    print(student['name'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabby\nbob\nchris\n```\n:::\n:::\n\n\n::: {#89b229d1 .cell tags='[]' execution_count=19}\n``` {.python .cell-code}\n# print each student name and average grade\nfor student in students:\n    avg_grade = sum(student['grades'])/len(student['grades'])\n    print(f\"{student['name']}  {avg_grade:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabby  90.00\nbob  93.33\nchris  96.67\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.4\n\nWrite a program to create a shopping list:\n\n- loop until \"quit\" is entered\n- input a grocery item\n- input a quantity\n- save the item as the key in the dictionary and quantity as the value\n- if the item is in the dictionary already, add the quantity to the existing value\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#ae93c62c .cell execution_count=20}\n``` {.python .cell-code}\nitems = {}\n\nwhile True:\n    item = input(\"Enter shopping item, or 'quit': \")\n    if item == 'quit':\n        break\n    qty = int(input(\"Enter quantity: \"))\n    if item in items.keys():\n        items[item] = items[item] + qty\n    else:\n        items[item] = qty\n\n    print(\"ITEMS:\", items)\n```\n:::\n\n\n:::\n::::\n\n",
    "supporting": [
      "python-2_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}