{
  "hash": "3c65af4717e9aaea99dfd2f02c398708",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"1. REST APIs\"\njupyter: python3\n---\n\n## What is a Web API / REST API?\n\nA [REST API](https://en.wikipedia.org/wiki/REST) (REpresentational State Transfer API) is a set of functions that can be accessed over the internet. The functions are organized in a way that they can be accessed using the common protocol of the Web, HTTP (Hypertext-Transport Protocol). \n\nBy design, REST APIs are **stateless**, meaning:\n\n- calls can be made independently of one another, \n- each call contains all of the data needed to complete itself successfully, and\n- no one call depends on the next.\n\nREST APIs are designed around resources, which consists of a [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier) (usually a [URL](https://en.wikipedia.org/wiki/URL)), and an HTTP request method.\n\nThe methods are:\n\n- GET: retrieve a resource\n- POST: create a new resource\n- PUT: update a resource\n- DELETE: remove a resource\n- PATCH: update a resource with partial data\n\n## HTTP without a rest API Example\n\nLet's start with an example of invoking a simple HTTP request without using a REST API.\n\nLet's retrieve the content of the [course website](https://su-ist356-m003-fall-2025.github.io/course-home/) programmatically.\n\nNotice the response is HTML content. This is a markup language used to create web pages and is intended for humans.\n\n::: {#0a75910e .cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nuri = \"https://su-ist356-m003-fall-2025.github.io/course-home/\"\nresponse = requests.get(uri)\n# Note: we're just printing the first 1000 characters here to avoid\n# overwhelming output\nprint(response.text[:1000])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"><head>\n\n<meta charset=\"utf-8\">\n<meta name=\"generator\" content=\"quarto-1.8.25\">\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n\n\n<title>IST 356: Programming Techniques for Data Analytics â€“ IST 356 Fall 2025</title>\n<style>\ncode{white-space: pre-wrap;}\nspan.smallcaps{font-variant: small-caps;}\ndiv.columns{display: flex; gap: min(4vw, 1.5em);}\ndiv.column{flex: auto; overflow-x: auto;}\ndiv.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\nul.task-list{list-style: none;}\nul.task-list li input[type=\"checkbox\"] {\n  width: 0.8em;\n  margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ \n  vertical-align: middle;\n}\n</style>\n\n\n<script src=\"site_libs/quarto-nav/quarto-nav.js\"></script>\n<script src=\"site_libs/clipboard/clipboard.min.js\"></script>\n<script src=\"site_libs/quarto-search/autocomplete.umd.js\"></script>\n\n```\n:::\n:::\n\n\n## HTTP REST API Example\n\nThis example will use the funny names API to demonstrate how to retrieve data from a REST API. Note that the code is exactly the same as the previous example, but the URL is different.\n\n::: {#c505c6f5 .cell execution_count=2}\n``` {.python .cell-code}\nuri = \"https://cent.ischool-iot.net/api/funnyname/random\"\nresponse = requests.get(uri)\nprint(response.text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{\"first\": \"Ivana\", \"last\": \"Sandwich\"}]\n\n```\n:::\n:::\n\n\n## Parsing the JSON response\n\nYou can see from the example above, the response is in JSON format. Recall that JSON is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate.\n\nSince REST API's are for machines, it makes sense to use the JSON format. We can deserialize the JSON response into a Python dictionary or list using the `json()` method on requests. \n\n::: {#e886a4c6 .cell execution_count=3}\n``` {.python .cell-code}\nuri = \"https://cent.ischool-iot.net/api/funnyname/random\"\nresponse = requests.get(uri)\nfunny_person = response.json()\nprint(funny_person) # list of dict\nprint(funny_person[0]['first'], funny_person[0]['last'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[{'first': 'Rip', 'last': 'Yerpanz'}]\nRip Yerpanz\n```\n:::\n:::\n\n\n## Response Codes for Handling Errors\n\nWhen the server returns a response to a request, included in the response is the HTTP status code, which tells the client whether or not the request worked. Unlike a regular API / function call such as `print()` this is necessary because there is a lot that can go wrong when you call a function over the open internet. Status codes are 3 digit numbers and the first number indicates the type of response:\n\n- 1xx - codes are informational. These are seldom used in web APIs.\n- 2xx - codes which begin with a 2 indicate success. The most common code is 200 - OK.\n- 3xx - codes which begin with a 3 indicate redirection - the response is not comming from the request URL you requested. For -example a 304 - Not modified means your response is coming from the browser's cache (content already downloaded).\n- 4xx - codes which begin with a 4 indicate a client error. The most common code here is 404 - Not Found. Any 4xx errors mean the requestor did something wrong. (In this case, that's you!)\n- 5xx - codes which begin with a 5 indicate a server error. The most common code here is 500 - Internal server error, which indicates the server could not process the request. When this happens it could be the web API's problem or the way you made the request.\n\n\nWe handle errors using the `raise_for_status()` method on the response object. This method will raise an exception if the response is any status code other than 2xx. It's good to raise an exception here because it will stop the program from continuing and potentially causing more problems.\n\n::: {#2f34b119 .cell execution_count=4}\n``` {.python .cell-code}\n# This intentionally fails with 404 - not found\nuri = \"https://cent.ischool-iot.net/api/funnynamez/random\"\nresponse = requests.get(uri)\nresponse.raise_for_status()\n# none of this code is relevant if the status is not 2xx\nfunny_person = response.json()\nprint(funny_person) # list of dict\nprint(funny_person[0]['first'], funny_person[0]['last'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">HTTPError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[4]</span><span class=\"ansi-green-fg\">, line 4</span>\n<span class=\"ansi-green-fg\">      2</span> uri = <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">https://cent.ischool-iot.net/api/funnynamez/random</span><span class=\"ansi-yellow-fg\">\"</span>\n<span class=\"ansi-green-fg\">      3</span> response = requests.get(uri)\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">4</span> <span class=\"ansi-yellow-bg\">response</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">raise_for_status</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">      5</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># none of this code is relevant if the status is not 2xx</span>\n<span class=\"ansi-green-fg\">      6</span> funny_person = response.json()\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/requests/models.py:1026</span>, in <span class=\"ansi-cyan-fg\">Response.raise_for_status</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg\">   1021</span>     http_error_msg = (\n<span class=\"ansi-green-fg\">   1022</span>         <span class=\"ansi-yellow-fg\">f</span><span class=\"ansi-yellow-fg\">\"</span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span style=\"color:rgb(0,135,0)\">self</span>.status_code<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span class=\"ansi-yellow-fg\"> Server Error: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>reason<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span class=\"ansi-yellow-fg\"> for url: </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span><span style=\"color:rgb(0,135,0)\">self</span>.url<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span class=\"ansi-yellow-fg\">\"</span>\n<span class=\"ansi-green-fg\">   1023</span>     )\n<span class=\"ansi-green-fg\">   1025</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> http_error_msg:\n<span class=\"ansi-green-fg\">-&gt; </span><span class=\"ansi-green-fg\">1026</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> HTTPError(http_error_msg, response=<span style=\"color:rgb(0,135,0)\">self</span>)\n\n<span class=\"ansi-red-fg\">HTTPError</span>: 404 Client Error: NOT FOUND for url: https://cent.ischool-iot.net/api/funnynamez/random</pre>\n```\n:::\n\n:::\n:::\n\n\n## Algorithm for calling any REST API in Python\n\n1. Prepare the request URI\n    1. headers\n    2. query parameters\n    3. body\n2. Make the request with URI and appropriate method\n3. Check the response status code with rise_for_status()\n4. Deserialize the response into a Python object \n\nThe process is always the same, only the way the requrest is prepares and your handling of the response content will change.\n\n## Examples\n\nFirst example gets the user streetm and the second example gets the post title.\n\nUses the JSONPlaceholder API, which is a mock API (Fake data)\n\nExample 1:\n- get user: https://jsonplaceholder.typicode.com/users/1\n- street: `user['address']['street']`  \n\n::: {#0a157a98 .cell execution_count=5}\n``` {.python .cell-code}\nex1_uri = \"https://jsonplaceholder.typicode.com/users/1\"\nresponse = requests.get(ex1_uri)\nresponse.raise_for_status()\nuser = response.json()\nprint(\"STREET:\", user['address']['street'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSTREET: Kulas Light\n```\n:::\n:::\n\n\nExample 2:\n- get post: https://jsonplaceholder.typicode.com/posts/1  \n- title: `post['title']`  \n\n::: {#658220d4 .cell execution_count=6}\n``` {.python .cell-code}\nex2_uri = \"https://jsonplaceholder.typicode.com/posts/1\"\nresponse = requests.get(ex2_uri)\nresponse.raise_for_status()\npost = response.json()\nprint(\"TITLE:\", post['title'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTITLE: sunt aut facere repellat provident occaecati excepturi optio reprehenderit\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 1.1\n\nWrite some Python that will:\n\n1. Read from the URL https://jsonplaceholder.typicode.com/users/\n\n1. Display the returned data in a Pandas DataFrame.\n\n*Hints*:\n\n- Use the `requests` library to get the data.\n- Use Panda's `json_normalize()` to convert the nested json data into a dataframe. Refer back to the [second Pandas tutorial](../04_data_wrangling/pandas-2.qmd) if you forget how to use that.\n\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#ff6566e6 .cell execution_count=7}\n``` {.python .cell-code}\nimport requests\nimport pandas as pd\n\nuri = \"https://jsonplaceholder.typicode.com/users/\"\nresponse = requests.get(uri)\nresponse.raise_for_status()\ndata = response.json()\ndf = pd.json_normalize(data)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>name</th>\n      <th>username</th>\n      <th>email</th>\n      <th>phone</th>\n      <th>website</th>\n      <th>address.street</th>\n      <th>address.suite</th>\n      <th>address.city</th>\n      <th>address.zipcode</th>\n      <th>address.geo.lat</th>\n      <th>address.geo.lng</th>\n      <th>company.name</th>\n      <th>company.catchPhrase</th>\n      <th>company.bs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Leanne Graham</td>\n      <td>Bret</td>\n      <td>Sincere@april.biz</td>\n      <td>1-770-736-8031 x56442</td>\n      <td>hildegard.org</td>\n      <td>Kulas Light</td>\n      <td>Apt. 556</td>\n      <td>Gwenborough</td>\n      <td>92998-3874</td>\n      <td>-37.3159</td>\n      <td>81.1496</td>\n      <td>Romaguera-Crona</td>\n      <td>Multi-layered client-server neural-net</td>\n      <td>harness real-time e-markets</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Ervin Howell</td>\n      <td>Antonette</td>\n      <td>Shanna@melissa.tv</td>\n      <td>010-692-6593 x09125</td>\n      <td>anastasia.net</td>\n      <td>Victor Plains</td>\n      <td>Suite 879</td>\n      <td>Wisokyburgh</td>\n      <td>90566-7771</td>\n      <td>-43.9509</td>\n      <td>-34.4618</td>\n      <td>Deckow-Crist</td>\n      <td>Proactive didactic contingency</td>\n      <td>synergize scalable supply-chains</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Clementine Bauch</td>\n      <td>Samantha</td>\n      <td>Nathan@yesenia.net</td>\n      <td>1-463-123-4447</td>\n      <td>ramiro.info</td>\n      <td>Douglas Extension</td>\n      <td>Suite 847</td>\n      <td>McKenziehaven</td>\n      <td>59590-4157</td>\n      <td>-68.6102</td>\n      <td>-47.0653</td>\n      <td>Romaguera-Jacobson</td>\n      <td>Face to face bifurcated interface</td>\n      <td>e-enable strategic applications</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Patricia Lebsack</td>\n      <td>Karianne</td>\n      <td>Julianne.OConner@kory.org</td>\n      <td>493-170-9623 x156</td>\n      <td>kale.biz</td>\n      <td>Hoeger Mall</td>\n      <td>Apt. 692</td>\n      <td>South Elvis</td>\n      <td>53919-4257</td>\n      <td>29.4572</td>\n      <td>-164.2990</td>\n      <td>Robel-Corkery</td>\n      <td>Multi-tiered zero tolerance productivity</td>\n      <td>transition cutting-edge web services</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Chelsey Dietrich</td>\n      <td>Kamren</td>\n      <td>Lucio_Hettinger@annie.ca</td>\n      <td>(254)954-1289</td>\n      <td>demarco.info</td>\n      <td>Skiles Walks</td>\n      <td>Suite 351</td>\n      <td>Roscoeview</td>\n      <td>33263</td>\n      <td>-31.8129</td>\n      <td>62.5342</td>\n      <td>Keebler LLC</td>\n      <td>User-centric fault-tolerant solution</td>\n      <td>revolutionize end-to-end systems</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>Mrs. Dennis Schulist</td>\n      <td>Leopoldo_Corkery</td>\n      <td>Karley_Dach@jasper.info</td>\n      <td>1-477-935-8478 x6430</td>\n      <td>ola.org</td>\n      <td>Norberto Crossing</td>\n      <td>Apt. 950</td>\n      <td>South Christy</td>\n      <td>23505-1337</td>\n      <td>-71.4197</td>\n      <td>71.7478</td>\n      <td>Considine-Lockman</td>\n      <td>Synchronised bottom-line interface</td>\n      <td>e-enable innovative applications</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>Kurtis Weissnat</td>\n      <td>Elwyn.Skiles</td>\n      <td>Telly.Hoeger@billy.biz</td>\n      <td>210.067.6132</td>\n      <td>elvis.io</td>\n      <td>Rex Trail</td>\n      <td>Suite 280</td>\n      <td>Howemouth</td>\n      <td>58804-1099</td>\n      <td>24.8918</td>\n      <td>21.8984</td>\n      <td>Johns Group</td>\n      <td>Configurable multimedia task-force</td>\n      <td>generate enterprise e-tailers</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>Nicholas Runolfsdottir V</td>\n      <td>Maxime_Nienow</td>\n      <td>Sherwood@rosamond.me</td>\n      <td>586.493.6943 x140</td>\n      <td>jacynthe.com</td>\n      <td>Ellsworth Summit</td>\n      <td>Suite 729</td>\n      <td>Aliyaview</td>\n      <td>45169</td>\n      <td>-14.3990</td>\n      <td>-120.7677</td>\n      <td>Abernathy Group</td>\n      <td>Implemented secondary concept</td>\n      <td>e-enable extensible e-tailers</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>Glenna Reichert</td>\n      <td>Delphine</td>\n      <td>Chaim_McDermott@dana.io</td>\n      <td>(775)976-6794 x41206</td>\n      <td>conrad.com</td>\n      <td>Dayna Park</td>\n      <td>Suite 449</td>\n      <td>Bartholomebury</td>\n      <td>76495-3109</td>\n      <td>24.6463</td>\n      <td>-168.8889</td>\n      <td>Yost and Sons</td>\n      <td>Switchable contextually-based project</td>\n      <td>aggregate real-time technologies</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>Clementina DuBuque</td>\n      <td>Moriah.Stanton</td>\n      <td>Rey.Padberg@karina.biz</td>\n      <td>024-648-3804</td>\n      <td>ambrose.net</td>\n      <td>Kattie Turnpike</td>\n      <td>Suite 198</td>\n      <td>Lebsackbury</td>\n      <td>31428-2261</td>\n      <td>-38.2386</td>\n      <td>57.2232</td>\n      <td>Hoeger LLC</td>\n      <td>Centralized empowering task-force</td>\n      <td>target end-to-end models</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n::::\n\n\n## Query String\n\nThe Query String is a part of the URL that is used to pass data to the server **on the URL**. It is appended to the end of the URL and begins with a question mark \"?\". The query string is made up of a series of key-value pairs separated by an ampersand (&).\n\nExamples:\n\n`/sample?x=bar` => `{'x': 'bar'}`\n`/sample?name=John&age=30` => `{'name': 'John', 'age': 'go'}`\n`/sample?name=John&age=30&count=4` => `{'name': 'John', 'age': '30', count: '4'}`\n\nIn Python `requests` library, you can pass the query string as a dictionary under the `params` named argument. \n\nTo illustrate, here's an example where we use the [arXiv](https://arxiv.org)'s REST API to retrieve information about the paper [Attention Is All You Need](https://arxiv.org/abs/1706.03762). In the first example, we put the query information directly into the URL:\n\n::: {#3ab8ac9b .cell execution_count=8}\n``` {.python .cell-code}\nurl = \"http://export.arxiv.org/api/query?id_list=1706.03762\"\nresponse = requests.get(url)\nresponse.raise_for_status()\nprint(response.text[:1000])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <link href=\"http://arxiv.org/api/query?search_query%3D%26id_list%3D1706.03762%26start%3D0%26max_results%3D10\" rel=\"self\" type=\"application/atom+xml\"/>\n  <title type=\"html\">ArXiv Query: search_query=&amp;id_list=1706.03762&amp;start=0&amp;max_results=10</title>\n  <id>http://arxiv.org/api/zUwBFJ+vAUSpXAR7QFveSY/bZos</id>\n  <updated>2025-10-22T00:00:00-04:00</updated>\n  <opensearch:totalResults xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">1</opensearch:totalResults>\n  <opensearch:startIndex xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">0</opensearch:startIndex>\n  <opensearch:itemsPerPage xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">10</opensearch:itemsPerPage>\n  <entry>\n    <id>http://arxiv.org/abs/1706.03762v7</id>\n    <updated>2023-08-02T00:41:18Z</updated>\n    <published>2017-06-12T17:57:34Z</published>\n    <title>Attention Is All You Need</title>\n    <summary>  The domin\n```\n:::\n:::\n\n\n*Note:* The arXiv API returns [XML](https://en.wikipedia.org/wiki/XML) rather than JSON. XML is just another format for transmitting data.\n\nHere's the same query, but this time passing the query string as a dictionary to the params argument:\n\n::: {#e455e3ee .cell execution_count=9}\n``` {.python .cell-code}\nurl = \"http://export.arxiv.org/api/query\"\nresponse = requests.get(url, params={'id_list': '1706.03762'})\nresponse.raise_for_status()\nprint(response.text[:1000])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n  <link href=\"http://arxiv.org/api/query?search_query%3D%26id_list%3D1706.03762%26start%3D0%26max_results%3D10\" rel=\"self\" type=\"application/atom+xml\"/>\n  <title type=\"html\">ArXiv Query: search_query=&amp;id_list=1706.03762&amp;start=0&amp;max_results=10</title>\n  <id>http://arxiv.org/api/zUwBFJ+vAUSpXAR7QFveSY/bZos</id>\n  <updated>2025-10-22T00:00:00-04:00</updated>\n  <opensearch:totalResults xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">1</opensearch:totalResults>\n  <opensearch:startIndex xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">0</opensearch:startIndex>\n  <opensearch:itemsPerPage xmlns:opensearch=\"http://a9.com/-/spec/opensearch/1.1/\">10</opensearch:itemsPerPage>\n  <entry>\n    <id>http://arxiv.org/abs/1706.03762v7</id>\n    <updated>2023-08-02T00:41:18Z</updated>\n    <published>2017-06-12T17:57:34Z</published>\n    <title>Attention Is All You Need</title>\n    <summary>  The domin\n```\n:::\n:::\n\n\n## The Syracuse University Iot Portal\n\nThe Syracuse University [Center for Emerging Network Technologies](https://www.syracuse.edu/research/distinctive-research-excellence/emerging-technologies/) (CENT) created an Internet of Things (IoT) portal. The portal makes REST APIs available to IoT devices which commonly do not have the computing powert to perform these tasks, and to students so they don't have to pay for a cloud service to use REST APIs in their projects.\n\n[https://cent.ischool-iot.net/](https://cent.ischool-iot.net/) \n\nTo view it, sign in with your SU NetID and password.\n\n\n### Swagger and Curl\n\nThe portal has a Swagger interface which allows you to test the API's in the browser. Swagger is a tool that helps you design, build, document, and consume REST APIs.\n\nThe swagger interface shows how the API is called with a `curl` command, which allows you to make the same request from the command line.\n\nCopilot should be able to translate the curl command into Python requests code for you.\n\n### Example \n\nLet's use swagger to call the funny names API for 10 random names, then translate the curl command into Python code.\n\n::: {#ec8e6cc5 .cell execution_count=10}\n``` {.python .cell-code}\n# Translate the following code to use requests\n# curl -X 'GET' \\\n#   'https://cent.ischool-iot.net/api/funnyname/random?n=10' \\\n#   -H 'accept: application/json'\n\nuri = \"https://cent.ischool-iot.net/api/funnyname/random\"\nparams = {'n': 10}\nresponse = requests.get(uri, params=params)\nresponse.raise_for_status()\nfunny_people = response.json()\nfor person in funny_people:\n    print(person['first'], person['last'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDom Inator\nAllan Wrench\nMattie Fur\nCraven Chocolate\nVictor Rhee\nTerry Cloth\nVictor Edance\nHeath Barr\nRoland Totowne\nRay Tracing\n```\n:::\n:::\n\n\n## HTTP Headers\n\nHTTP headers are the key / value pairs that are sent in the request or response. They are used to pass additional information about the request or response. Unlike the query string, they are not part of the URL and are not visible to the user.\n\nIn the IoT portal, the headers are used to pass the API Key which verifies who you are.\n\nExample:\n\nUse the random API to get 10 intergers between 1 and 100.\n\n::: {#ba34b6e3 .cell execution_count=11}\n``` {.python .cell-code}\nimport requests \napikey = \"GETYOUROWNKEYFROMIOTPORTAL\"\nuri = \"https://cent.ischool-iot.net/api/random/int?\"\nparams = { 'count': 10, 'm\"in': 1, 'max': 100 }\nheaders = { \"X-API-KEY\": apikey} # goes in the header\nresponse.raise_for_status()\nprint(response.url)     # see the full URL no API key there\nnumbers = response.json()\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://cent.ischool-iot.net/api/funnyname/random?n=10\n[{'first': 'Dom', 'last': 'Inator'}, {'first': 'Allan', 'last': 'Wrench'}, {'first': 'Mattie', 'last': 'Fur'}, {'first': 'Craven', 'last': 'Chocolate'}, {'first': 'Victor', 'last': 'Rhee'}, {'first': 'Terry', 'last': 'Cloth'}, {'first': 'Victor', 'last': 'Edance'}, {'first': 'Heath', 'last': 'Barr'}, {'first': 'Roland', 'last': 'Totowne'}, {'first': 'Ray', 'last': 'Tracing'}]\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 1.2\n\nFigure out how to call these in the IoT portal:\n- Google geocode API to take a location and get a latitute and longitude\n- Weather API to get the weather for a latitude and longitude\n\nWrite a Streamlit app to input a location (e.g., \"Syracuse University\") and return the current weather conditions. Use the `st.metric` to display the temperature and humidity with units. e.g. 56Â°F and 80% humidity.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#87e76438 .cell execution_count=12}\n``` {.python .cell-code}\nimport requests\nimport streamlit as st\n\nst.title(\"Streamlit Weather\")\nlocation = st.text_input(\"Enter a location\")\nif location:\n    apikey = \"\" # replace with your API key copied from the CENT IoT portal\n    headers = { \"X-Api-Key\": apikey }\n    geourl = \"https://cent.ischool-iot.net/api/google/geocode\"\n    params = { \"location\": location }\n    response = requests.get(geourl, params=params, headers=headers)\n    response.raise_for_status()\n    geodata = response.json()\n    \n    lat, lon = geodata['results'][0]['geometry']['location'][\"lat\"], geodata['results'][0]['geometry']['location'][\"lng\"]\n    weatherurl = \"https://cent.ischool-iot.net/api/weather/current\"\n    params = { \"lat\": lat, \"lon\": lon, \"units\": \"imperial\" }\n    response = requests.get(weatherurl, params=params, headers=headers)\n    response.raise_for_status()\n    weatherdata = response.json()\n    coltemp, colhumid = st.columns(2)\n    coltemp.metric(\"Temperature\", f\"{weatherdata['current']['temperature_2m']}{weatherdata['current_units']['temperature_2m']}\")\n    colhumid.metric(\"Humidity\", f\"{weatherdata['current']['relative_humidity_2m']}{weatherdata['current_units']['relative_humidity_2m']}\")\n```\n:::\n\n\n:::\n::::\n\n",
    "supporting": [
      "webapi-1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}