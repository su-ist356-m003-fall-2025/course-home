{
  "hash": "9550a873ae99b075efaeebe3630e78a4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"5. Basic data cleaning with Pandas\"\njupyter: python3\nresources:\n    - assets/scratch-pandas-4.ipynb\n---\n\n\nIn this lesson we will start learning how to clean a dataframe data and loop over it. To follow along with the commands below, download the following scratch notebook to your `ist356` directory, then open it with VS Code:\n\n<a href=\"../assets/scratch-pandas-4.ipynb\">Download scratch-pandas-4.ipynb</a>\n\nFor this tutorial, we will be using some data representing a pretend restaurant's transactions. The file is:\n\n::: {#a1fe3caf .cell execution_count=1}\n``` {.python .cell-code}\nchecks_data = 'https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/dining/check-data.csv'\n```\n:::\n\n\n(This link is provided in the scratch notebook.)\n\nLet's load the file with Pandas and sample a few of its rows to see what it contains:\n\n::: {#f2276789 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\nchecks = pd.read_csv(checks_data)\nchecks.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>check</th>\n      <th>date</th>\n      <th>party size</th>\n      <th>total items on check</th>\n      <th>total amount of check</th>\n      <th>gratuity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>30</th>\n      <td>2705</td>\n      <td>2024-07-08</td>\n      <td>10</td>\n      <td>19</td>\n      <td>$838.85</td>\n      <td>$671.08</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>4031</td>\n      <td>2024-08-12</td>\n      <td>6</td>\n      <td>14</td>\n      <td>$655.48</td>\n      <td>$65.55</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1066</td>\n      <td>2024-08-20</td>\n      <td>10</td>\n      <td>22</td>\n      <td>$485.76</td>\n      <td>$77.72</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>4590</td>\n      <td>2024-05-08</td>\n      <td>3</td>\n      <td>5</td>\n      <td>$220.40</td>\n      <td>$22.04</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>2341</td>\n      <td>2024-06-03</td>\n      <td>7</td>\n      <td>16</td>\n      <td>$1,118.88</td>\n      <td>$313.29</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>3676</td>\n      <td>2024-02-25</td>\n      <td>1</td>\n      <td>1</td>\n      <td>$19.89</td>\n      <td>$1.99</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>1368</td>\n      <td>2024-12-21</td>\n      <td>10</td>\n      <td>25</td>\n      <td>$2,193.00</td>\n      <td>$372.81</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>3404</td>\n      <td>2024-07-19</td>\n      <td>9</td>\n      <td>26</td>\n      <td>$2,382.90</td>\n      <td>$71.49</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>3867</td>\n      <td>2024-05-02</td>\n      <td>4</td>\n      <td>14</td>\n      <td>$499.10</td>\n      <td>$119.78</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2527</td>\n      <td>2024-03-27</td>\n      <td>6</td>\n      <td>21</td>\n      <td>$921.48</td>\n      <td>$55.29</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's use the `info` method to get some more information about the columns:\n\n::: {#73bc0c53 .cell execution_count=3}\n``` {.python .cell-code}\nchecks.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 50 entries, 0 to 49\nData columns (total 6 columns):\n #   Column                 Non-Null Count  Dtype \n---  ------                 --------------  ----- \n 0   check                  50 non-null     int64 \n 1   date                   50 non-null     object\n 2   party size             50 non-null     int64 \n 3   total items on check   50 non-null     int64 \n 4   total amount of check  50 non-null     object\n 5   gratuity               50 non-null     object\ndtypes: int64(3), object(3)\nmemory usage: 2.5+ KB\n```\n:::\n:::\n\n\nThere's something odd here! Note that the data type of some of the columns (e.g., `total amount of check`) are `object` instead of `floats`, as you might expect. As we'll see below, this is because of the `$` in the values; that will cause issues when we try to work with these columns. We'll learn how to \"clean\" these columns so that we can do useful things with them.\n\n## Apply\n\nThe `apply` method allows us to execute a function over a [Series](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html) or the entire [DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.apply.html).\n\n\nThe general syntax:\n\n- `Series.apply(func)` <== call function `func` for every item in the Series.\n\n- `DataFrame.apply(func, axis=1)` <== call function `func` for every *row* in the DataFrame (`axis=1` => row).\n\n- `DataFrame.apply(func, axis=0)` <== call function `func` for every *column* in the DataFrame (`axis=0` => col).\n\nNote that the first argument `apply` is the function itself, not the function applied to some data. For example, suppose we define a function called `sq` that squares the input values:\n\n::: {#781a3380 .cell execution_count=4}\n``` {.python .cell-code}\ndef sq(x):\n    return x**2\n```\n:::\n\n\nTo apply this to one of the columns in our DataFrame (say, the `party size` column):\n\n::: {#607ab52d .cell execution_count=5}\n``` {.python .cell-code}\nchecks['party size'].apply(sq)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0      64\n1       9\n2      25\n3       4\n4      36\n5       1\n6      36\n7      64\n8     100\n9       1\n10     36\n11    100\n12     16\n13     16\n14      1\n15     25\n16     25\n17      9\n18     64\n19      4\n20     25\n21      1\n22     64\n23      4\n24    100\n25     36\n26     36\n27      1\n28     16\n29      9\n30    100\n31      9\n32      9\n33     36\n34    100\n35     16\n36      4\n37     81\n38     49\n39     49\n40      9\n41     49\n42     49\n43     25\n44     49\n45     81\n46      1\n47      1\n48     81\n49     81\nName: party size, dtype: int64\n```\n:::\n:::\n\n\n### Why `apply`?\n\nIn the above example, you might wonder why we don't just apply the function directly to the Series, rather than use `apply`. Afterall, in the [first pandas tutorial](pandas-1.qmd) we learned that `Series` are vectorized just like numpy arrays. In other words, why not just do:\n\n::: {#d361a059 .cell execution_count=6}\n``` {.python .cell-code}\nsq(checks['party size'])\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0      64\n1       9\n2      25\n3       4\n4      36\n5       1\n6      36\n7      64\n8     100\n9       1\n10     36\n11    100\n12     16\n13     16\n14      1\n15     25\n16     25\n17      9\n18     64\n19      4\n20     25\n21      1\n22     64\n23      4\n24    100\n25     36\n26     36\n27      1\n28     16\n29      9\n30    100\n31      9\n32      9\n33     36\n34    100\n35     16\n36      4\n37     81\n38     49\n39     49\n40      9\n41     49\n42     49\n43     25\n44     49\n45     81\n46      1\n47      1\n48     81\n49     81\nName: party size, dtype: int64\n```\n:::\n:::\n\n\nIn this case, you could just run the function on the series. Where `apply` is useful is when you have more complicated functions, in particular, ones that need to do different things depending on what the input data is. For example, suppose we define the following function to group parties into `small`, `medium`, and `large` depending on how many people are in the party:\n\n::: {#eadf6f55 .cell execution_count=7}\n``` {.python .cell-code}\ndef classify_size(x):\n    if x < 4:\n        return 'small'\n    elif x < 8:\n        return 'medium'\n    else:\n        return 'large'\n```\n:::\n\n\nIf we try to run this on the `party size` Series, we get an error:\n\n::: {#9b488f7a .cell execution_count=8}\n``` {.python .cell-code}\nclassify_size(checks['party size'])\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-green-fg\">/tmp/ipykernel_11312/1113461677.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">()</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">1</span> classify_size(checks[<span class=\"ansi-yellow-fg\">'party size'</span>])\n\n<span class=\"ansi-green-fg\">/tmp/ipykernel_11312/2519828553.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(x)</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> classify_size(x):\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> x &lt; <span class=\"ansi-green-fg\">4</span>:\n<span class=\"ansi-green-fg\">      3</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-fg\">'small'</span>\n<span class=\"ansi-green-fg\">      4</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">elif</span> x &lt; <span class=\"ansi-green-fg\">8</span>:\n<span class=\"ansi-green-fg\">      5</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-fg\">'medium'</span>\n\n<span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/generic.py</span> in <span class=\"ansi-cyan-fg\">?</span><span class=\"ansi-blue-fg\">(self)</span>\n<span class=\"ansi-green-fg\">   1578</span>     @final\n<span class=\"ansi-green-fg\">   1579</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span> __nonzero__(self) -&gt; NoReturn:\n<span class=\"ansi-green-fg\">-&gt; </span><span class=\"ansi-green-fg\">1580</span>         raise ValueError(\n<span class=\"ansi-green-fg\">   1581</span>             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n<span class=\"ansi-green-fg\">   1582</span>             <span class=\"ansi-yellow-fg\">\"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"</span>\n<span class=\"ansi-green-fg\">   1583</span>         )\n\n<span class=\"ansi-red-fg\">ValueError</span>: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().</pre>\n```\n:::\n\n:::\n:::\n\n\nThis is because `if` statements cannot be vectorized like this. In contrast, the `apply` method *does* allow us to apply the function to the series:\n\n::: {#869827fd .cell execution_count=9}\n``` {.python .cell-code}\nchecks['party size'].apply(classify_size)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0      large\n1      small\n2     medium\n3      small\n4     medium\n5      small\n6     medium\n7      large\n8      large\n9      small\n10    medium\n11     large\n12    medium\n13    medium\n14     small\n15    medium\n16    medium\n17     small\n18     large\n19     small\n20    medium\n21     small\n22     large\n23     small\n24     large\n25    medium\n26    medium\n27     small\n28    medium\n29     small\n30     large\n31     small\n32     small\n33    medium\n34     large\n35    medium\n36     small\n37     large\n38    medium\n39    medium\n40     small\n41    medium\n42    medium\n43    medium\n44    medium\n45     large\n46     small\n47     small\n48     large\n49     large\nName: party size, dtype: object\n```\n:::\n:::\n\n\nThis is because the `apply` method takes care to cycle over every element in the series and apply the function.\n\n### Cleaning data with `apply`\n\nThe ability of `apply` to apply more complicated functions involving `if` statements makes it extremely useful for cleaning datasets. By \"cleaning\" we mean reformatting data and/or removing spurios values, so that we can use it without issue.\n\nFor example, say we want to add `price per item` to our DataFrame, defined as:\n\n```{text}\nprice per item = total amount of check / total items on check\n```\n\nThe problem is `total amount of check` is an `object`, not a `float`. This means we cannot do math on it:\n\n::: {#3a16076f .cell execution_count=10}\n``` {.python .cell-code}\n# This will raise a TypeError because of the dollar sign and commas!!!\nchecks['price_per_item'] = checks['total amount of check'] / checks['total items on check']\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/ops/array_ops.py:218</span>, in <span class=\"ansi-cyan-fg\">_na_arithmetic_op</span><span class=\"ansi-blue-fg\">(left, right, op, is_cmp)</span>\n<span class=\"ansi-green-fg\">    217</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">try</span>:\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">218</span>     result = <span class=\"ansi-yellow-bg\">func</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">left</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">right</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    219</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">TypeError</span>:\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/computation/expressions.py:242</span>, in <span class=\"ansi-cyan-fg\">evaluate</span><span class=\"ansi-blue-fg\">(op, a, b, use_numexpr)</span>\n<span class=\"ansi-green-fg\">    240</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> use_numexpr:\n<span class=\"ansi-green-fg\">    241</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># error: \"None\" not callable</span>\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">242</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">_evaluate</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">op</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">op_str</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">a</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">b</span><span class=\"ansi-yellow-bg\">)</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># type: ignore[misc]</span>\n<span class=\"ansi-green-fg\">    243</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> _evaluate_standard(op, op_str, a, b)\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/computation/expressions.py:73</span>, in <span class=\"ansi-cyan-fg\">_evaluate_standard</span><span class=\"ansi-blue-fg\">(op, op_str, a, b)</span>\n<span class=\"ansi-green-fg\">     72</span>     _store_test_result(<span style=\"font-weight:bold;color:rgb(0,135,0)\">False</span>)\n<span class=\"ansi-green-fg\">---&gt; </span><span class=\"ansi-green-fg\">73</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">op</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">a</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">b</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: unsupported operand type(s) for /: 'str' and 'int'\n\nDuring handling of the above exception, another exception occurred:\n\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[10]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># This will raise a TypeError because of the dollar sign and commas!!!</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> checks[<span class=\"ansi-yellow-fg\">'</span><span class=\"ansi-yellow-fg\">price_per_item</span><span class=\"ansi-yellow-fg\">'</span>] = <span class=\"ansi-yellow-bg\">checks</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">total amount of check</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">/</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">checks</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">total items on check</span><span class=\"ansi-yellow-fg ansi-yellow-bg\">'</span><span class=\"ansi-yellow-bg\">]</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/ops/common.py:76</span>, in <span class=\"ansi-cyan-fg\">_unpack_zerodim_and_defer.&lt;locals&gt;.new_method</span><span class=\"ansi-blue-fg\">(self, other)</span>\n<span class=\"ansi-green-fg\">     72</span>             <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">NotImplemented</span>\n<span class=\"ansi-green-fg\">     74</span> other = item_from_zerodim(other)\n<span class=\"ansi-green-fg\">---&gt; </span><span class=\"ansi-green-fg\">76</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">method</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">other</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/arraylike.py:210</span>, in <span class=\"ansi-cyan-fg\">OpsMixin.__truediv__</span><span class=\"ansi-blue-fg\">(self, other)</span>\n<span class=\"ansi-green-fg\">    208</span> <span style=\"color:rgb(175,0,255)\">@unpack_zerodim_and_defer</span>(<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">__truediv__</span><span class=\"ansi-yellow-fg\">\"</span>)\n<span class=\"ansi-green-fg\">    209</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span class=\"ansi-blue-fg\">__truediv__</span>(<span style=\"color:rgb(0,135,0)\">self</span>, other):\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">210</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_arith_method</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">other</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">operator</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">truediv</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/series.py:6154</span>, in <span class=\"ansi-cyan-fg\">Series._arith_method</span><span class=\"ansi-blue-fg\">(self, other, op)</span>\n<span class=\"ansi-green-fg\">   6152</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">def</span><span style=\"color:rgb(188,188,188)\"> </span><span class=\"ansi-blue-fg\">_arith_method</span>(<span style=\"color:rgb(0,135,0)\">self</span>, other, op):\n<span class=\"ansi-green-fg\">   6153</span>     <span style=\"color:rgb(0,135,0)\">self</span>, other = <span style=\"color:rgb(0,135,0)\">self</span>._align_for_op(other)\n<span class=\"ansi-green-fg\">-&gt; </span><span class=\"ansi-green-fg\">6154</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span class=\"ansi-yellow-bg\">base</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">IndexOpsMixin</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">_arith_method</span><span class=\"ansi-yellow-bg\">(</span><span style=\"color:rgb(0,135,0)\" class=\"ansi-yellow-bg\">self</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">other</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">op</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/base.py:1391</span>, in <span class=\"ansi-cyan-fg\">IndexOpsMixin._arith_method</span><span class=\"ansi-blue-fg\">(self, other, op)</span>\n<span class=\"ansi-green-fg\">   1388</span>     rvalues = np.arange(rvalues.start, rvalues.stop, rvalues.step)\n<span class=\"ansi-green-fg\">   1390</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">with</span> np.errstate(<span style=\"color:rgb(0,135,0)\">all</span>=<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">ignore</span><span class=\"ansi-yellow-fg\">\"</span>):\n<span class=\"ansi-green-fg\">-&gt; </span><span class=\"ansi-green-fg\">1391</span>     result = <span class=\"ansi-yellow-bg\">ops</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">arithmetic_op</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">lvalues</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">rvalues</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">op</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">   1393</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> <span style=\"color:rgb(0,135,0)\">self</span>._construct_result(result, name=res_name)\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/ops/array_ops.py:283</span>, in <span class=\"ansi-cyan-fg\">arithmetic_op</span><span class=\"ansi-blue-fg\">(left, right, op)</span>\n<span class=\"ansi-green-fg\">    279</span>     _bool_arith_check(op, left, right)  <span style=\"font-style:italic;color:rgb(95,135,135)\"># type: ignore[arg-type]</span>\n<span class=\"ansi-green-fg\">    281</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># error: Argument 1 to \"_na_arithmetic_op\" has incompatible type</span>\n<span class=\"ansi-green-fg\">    282</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># \"Union[ExtensionArray, ndarray[Any, Any]]\"; expected \"ndarray[Any, Any]\"</span>\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">283</span>     res_values = <span class=\"ansi-yellow-bg\">_na_arithmetic_op</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">left</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">right</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">op</span><span class=\"ansi-yellow-bg\">)</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># type: ignore[arg-type]</span>\n<span class=\"ansi-green-fg\">    285</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> res_values\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/ops/array_ops.py:227</span>, in <span class=\"ansi-cyan-fg\">_na_arithmetic_op</span><span class=\"ansi-blue-fg\">(left, right, op, is_cmp)</span>\n<span class=\"ansi-green-fg\">    219</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">except</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">TypeError</span>:\n<span class=\"ansi-green-fg\">    220</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> is_cmp <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> (\n<span class=\"ansi-green-fg\">    221</span>         left.dtype == <span style=\"color:rgb(0,135,0)\">object</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">or</span> <span style=\"color:rgb(0,135,0)\">getattr</span>(right, <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">dtype</span><span class=\"ansi-yellow-fg\">\"</span>, <span style=\"font-weight:bold;color:rgb(0,135,0)\">None</span>) == <span style=\"color:rgb(0,135,0)\">object</span>\n<span class=\"ansi-green-fg\">    222</span>     ):\n<span class=\"ansi-green-fg\">   (...)</span><span class=\"ansi-green-fg\">    225</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\"># Don't do this for comparisons, as that will handle complex numbers</span>\n<span class=\"ansi-green-fg\">    226</span>         <span style=\"font-style:italic;color:rgb(95,135,135)\">#  incorrectly, see GH#32047</span>\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">227</span>         result = <span class=\"ansi-yellow-bg\">_masked_arith_op</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">left</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">right</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">op</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    228</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">    229</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/ops/array_ops.py:163</span>, in <span class=\"ansi-cyan-fg\">_masked_arith_op</span><span class=\"ansi-blue-fg\">(x, y, op)</span>\n<span class=\"ansi-green-fg\">    161</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># See GH#5284, GH#5035, GH#19448 for historical reference</span>\n<span class=\"ansi-green-fg\">    162</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> mask.any():\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">163</span>         result[mask] = <span class=\"ansi-yellow-bg\">op</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">xrav</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">yrav</span><span class=\"ansi-yellow-bg\">[</span><span class=\"ansi-yellow-bg\">mask</span><span class=\"ansi-yellow-bg\">]</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    165</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">    166</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"font-weight:bold;color:rgb(175,0,255)\">not</span> is_scalar(y):\n\n<span class=\"ansi-red-fg\">TypeError</span>: unsupported operand type(s) for /: 'str' and 'int'</pre>\n```\n:::\n\n:::\n:::\n\n\nHow do we fix this? Let's write a function to convert string values like this: `$4,590.45` into floats like this: `4590.45`\n\n::: {#5c144cb3 .cell execution_count=11}\n``` {.python .cell-code}\ndef clean_currency(value:str) -> float:\n    '''\n    This function will take a string value and remove the dollar sign and commas\n    and return a float value.\n    '''\n    return float(value.replace(',', '').replace('$', ''))\n\n\n# tests\nassert clean_currency('$1,000.00') == 1000.00\nassert clean_currency('$1,000') == 1000.00\nassert clean_currency('1,000') == 1000.00\nassert clean_currency('$1000') == 1000.00\n```\n:::\n\n\nWith our function written we can use `apply()` to transform the series:\n\n::: {#ae2d5e06 .cell execution_count=12}\n``` {.python .cell-code}\nchecks['total_amount_of_check_cleaned'] = checks['total amount of check'].apply(clean_currency)\nchecks['price_per_item'] = checks['total_amount_of_check_cleaned'] / checks['total items on check']\nchecks.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>check</th>\n      <th>date</th>\n      <th>party size</th>\n      <th>total items on check</th>\n      <th>total amount of check</th>\n      <th>gratuity</th>\n      <th>total_amount_of_check_cleaned</th>\n      <th>price_per_item</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>22</th>\n      <td>1336</td>\n      <td>2024-08-30</td>\n      <td>8</td>\n      <td>28</td>\n      <td>$1,199.80</td>\n      <td>$275.95</td>\n      <td>1199.80</td>\n      <td>42.85</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2968</td>\n      <td>2024-12-28</td>\n      <td>1</td>\n      <td>3</td>\n      <td>$122.97</td>\n      <td>$23.36</td>\n      <td>122.97</td>\n      <td>40.99</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>3404</td>\n      <td>2024-07-19</td>\n      <td>9</td>\n      <td>26</td>\n      <td>$2,382.90</td>\n      <td>$71.49</td>\n      <td>2382.90</td>\n      <td>91.65</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1564</td>\n      <td>2024-09-23</td>\n      <td>8</td>\n      <td>11</td>\n      <td>$928.40</td>\n      <td>$204.25</td>\n      <td>928.40</td>\n      <td>84.40</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>4440</td>\n      <td>2024-06-11</td>\n      <td>1</td>\n      <td>3</td>\n      <td>$168.96</td>\n      <td>$10.14</td>\n      <td>168.96</td>\n      <td>56.32</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>2827</td>\n      <td>2024-05-06</td>\n      <td>8</td>\n      <td>12</td>\n      <td>$415.08</td>\n      <td>$107.92</td>\n      <td>415.08</td>\n      <td>34.59</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>2053</td>\n      <td>2024-12-14</td>\n      <td>7</td>\n      <td>23</td>\n      <td>$588.11</td>\n      <td>$164.67</td>\n      <td>588.11</td>\n      <td>25.57</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>3795</td>\n      <td>2024-02-21</td>\n      <td>3</td>\n      <td>7</td>\n      <td>$212.38</td>\n      <td>$46.72</td>\n      <td>212.38</td>\n      <td>30.34</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3685</td>\n      <td>2024-12-07</td>\n      <td>5</td>\n      <td>5</td>\n      <td>$252.95</td>\n      <td>$50.59</td>\n      <td>252.95</td>\n      <td>50.59</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>1194</td>\n      <td>2024-07-06</td>\n      <td>2</td>\n      <td>6</td>\n      <td>$453.06</td>\n      <td>$72.49</td>\n      <td>453.06</td>\n      <td>75.51</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note}\nRemember its a really good idea to **track lineage** when you are building a data pipeline. \n\n**NEVER** replace columns, always create new ones.\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 5.1\n\nLet's take what we did so far, and create a dataset that would be better prepared for analysis / machine learning. We'll display it in a Streamlit app.\n\n1.  Create a script called `st-cleaned_checks.py`.\n1.  Add your `clean_currency` function to the script.\n1.  Load the checks dataset into a Pandas `DataFrame` and: \n    -   Clean the `total amount of check` and `gratuity` columns.\n    -   Calculate the `price_per_item`  as total amount of check / total items on check.\n    -   Calcualte the `price_per_person` as total amont of check / party size.\n    -   Calcualte the `items_per_person` as total items on check / party size.\n    -   Calcualte the `tip_percentage` as the total amount of check / gratuity.\n1.  Display the cleaned DataFrame along with a description of its data (i.e., display the output of `describe`) in a Streamlit app.\n\n1.  Test that your app works by running it.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n1.  The `st-cleaned_checks.py` script:\n\n::: {#aa3693f5 .cell execution_count=13}\n``` {.python .cell-code}\nimport streamlit as st\nimport pandas as pd\n\ndef clean_currency(value:str) -> float:\n    '''\n    This function will take a string value and remove the dollar sign and commas\n    and return a float value.\n    '''\n    return float(value.replace(',', '').replace('$', ''))\n\nst.title(\"Dining Check Data\")\n\n# load\nchecks = pd.read_csv('https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/dining/check-data.csv')\n\n# transformations\nchecks['total_amount_of_check_cleaned'] = checks['total amount of check'].apply(clean_currency)\nchecks['gratuity_cleaned'] = checks['gratuity'].apply(clean_currency)\nchecks['price_per_item'] = checks['total_amount_of_check_cleaned'] / checks['total items on check']\nchecks['price_per_person'] = checks['total_amount_of_check_cleaned'] / checks['party size']\nchecks['items_per_person'] = checks['total items on check'] / checks['party size']\nchecks['tip_percentage'] = checks['gratuity_cleaned'] / checks['total_amount_of_check_cleaned']\n\nst.dataframe(checks, width=1000)\n\nst.header(\"Summary:\")\nst.dataframe(checks.describe())\n```\n:::\n\n\n2.  Test it by running the following in the terminal (make sure to activate your conda environment first):\n```{bash}\npython -m streamlit run st-cleaned_checks.py\n```\n:::\n::::\n\n\n## Using `lambdas` to apply functions to multiple columns \n\nSo far we've used `apply` with functions that take in a single Series. What do we do if we need a function to operate on multiple columns in a `DataFrame`? For that, we can use Python [lambda](https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions) functions.\n\nAn example using our checks data:\n\nMarketing wants you to build some *key performance indicators* (KPIs) using the checks data. A KPI is a statistic that summarizes some larger data set, so the data can be more easily tracked over time. For example a letter grade such as an A- is a KPI summary of all your graded efforts to date.\n\nIn this example, marketing wants you to build two KPIs:\n\n**KPI 1: Whales**\n\nMarketing has decided to group customers into the following categories:\n    - `big eaters`: Customers who are in the top 25% (i.e., above the 0.75 *quantile*) for items per person.\n    - `big spenders`: Customers who are in the top 25% for price per person. \n    - `whale`:  Customers who are in the top 25% for both items per person *and* price per person. \n\n**KPI 2: Tippers**\n\nMarketing has decided to further group customers into the following categories based on their tipping:\n    - `light`: Customers who are in the botton 25% (i.e., below the 0.25 quantile) by tip percentage.\n    - `heavy`: Customers who are in the top 25% (i.e., above the 0.75 quantile) by tip percentage.\n\nTo calculate percentiles we will use the [quantile](https://pandas.pydata.org/docs/reference/api/pandas.Series.quantile.html) Series method in Pandas. This returns the value at which X% of the data is below the given percentile. \n\nBefore we can apply our KPI's we must write the functions!\n\n::: {#ba68181e .cell execution_count=14}\n``` {.python .cell-code}\nchecks['gratuity_cleaned'] = checks['gratuity'].apply(clean_currency)\nchecks['price_per_item'] = checks['total_amount_of_check_cleaned'] / checks['total items on check']\nchecks['price_per_person'] = checks['total_amount_of_check_cleaned'] / checks['party size']\nchecks['items_per_person'] = checks['total items on check'] / checks['party size']\nchecks['tip_percentage'] = checks['gratuity_cleaned'] / checks['total_amount_of_check_cleaned']\n```\n:::\n\n\nTo categorize whales:\n\n::: {#cd0ed02f .cell execution_count=15}\n``` {.python .cell-code}\ndef detect_whale(\n        items_per_person:float, \n        price_per_person:float, \n        items_per_person_75th_pctile:float, \n        price_per_person_75_pctile:float) -> str:\n    if items_per_person > items_per_person_75th_pctile and price_per_person > price_per_person_75_pctile:\n        return 'whale'\n    if items_per_person > items_per_person_75th_pctile:\n        return 'big eater'\n    if price_per_person > price_per_person_75_pctile:\n        return 'big spender'\n    return ''\n```\n:::\n\n\nLet's test our function using the `quantile` method:\n\n::: {#678f2372 .cell execution_count=16}\n``` {.python .cell-code}\n# tests\nppp_75 = checks['price_per_person'].quantile(0.75)\nipp_75 = checks['items_per_person'].quantile(0.75)\nprint(ppp_75, ipp_75)\nassert detect_whale(5, 250, 3, 175) == 'whale'\nassert detect_whale(5, 100, 3, 175) == 'big eater'\nassert detect_whale(1, 250, 3, 175) == 'big spender'\nassert detect_whale(1, 100, 3, 175) == ''\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n158.35666666666668 3.0\n```\n:::\n:::\n\n\nNow we want to apply the `detect_whale` function to the `checks` DataFrame. But `detect_whale` requires two columns as input, the `items_per_person` and `price_per_person`. How do we do that?\n\nWe can use a `lambda` function to quickly define a small function that will return the required columns when provided a row. In general, the syntax for a `lambda` function is `lambda ARGS: FUNC`. For example, `lambda a, b: a+b` will return the sum of the two arguments its given.\n\nIn our case, we can use a `lambda` function to pull out the needed columns and give them to `apply`, like so:\n\n::: {#f1c3f99c .cell execution_count=17}\n``` {.python .cell-code}\nchecks['whale'] = checks.apply(lambda row: detect_whale(row['items_per_person'], row['price_per_person'], ipp_75, ppp_75), axis=1)\nchecks.sample(25)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>check</th>\n      <th>date</th>\n      <th>party size</th>\n      <th>total items on check</th>\n      <th>total amount of check</th>\n      <th>gratuity</th>\n      <th>total_amount_of_check_cleaned</th>\n      <th>price_per_item</th>\n      <th>gratuity_cleaned</th>\n      <th>price_per_person</th>\n      <th>items_per_person</th>\n      <th>tip_percentage</th>\n      <th>whale</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>31</th>\n      <td>1945</td>\n      <td>2024-02-05</td>\n      <td>3</td>\n      <td>7</td>\n      <td>$132.86</td>\n      <td>$21.26</td>\n      <td>132.86</td>\n      <td>18.98</td>\n      <td>21.26</td>\n      <td>44.286667</td>\n      <td>2.333333</td>\n      <td>0.160018</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>2446</td>\n      <td>2024-12-15</td>\n      <td>4</td>\n      <td>12</td>\n      <td>$575.64</td>\n      <td>$28.78</td>\n      <td>575.64</td>\n      <td>47.97</td>\n      <td>28.78</td>\n      <td>143.910000</td>\n      <td>3.000000</td>\n      <td>0.049997</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>4031</td>\n      <td>2024-08-12</td>\n      <td>6</td>\n      <td>14</td>\n      <td>$655.48</td>\n      <td>$65.55</td>\n      <td>655.48</td>\n      <td>46.82</td>\n      <td>65.55</td>\n      <td>109.246667</td>\n      <td>2.333333</td>\n      <td>0.100003</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>3867</td>\n      <td>2024-05-02</td>\n      <td>4</td>\n      <td>14</td>\n      <td>$499.10</td>\n      <td>$119.78</td>\n      <td>499.10</td>\n      <td>35.65</td>\n      <td>119.78</td>\n      <td>124.775000</td>\n      <td>3.500000</td>\n      <td>0.239992</td>\n      <td>big eater</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2968</td>\n      <td>2024-12-28</td>\n      <td>1</td>\n      <td>3</td>\n      <td>$122.97</td>\n      <td>$23.36</td>\n      <td>122.97</td>\n      <td>40.99</td>\n      <td>23.36</td>\n      <td>122.970000</td>\n      <td>3.000000</td>\n      <td>0.189965</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>1361</td>\n      <td>2024-11-21</td>\n      <td>7</td>\n      <td>14</td>\n      <td>$65.80</td>\n      <td>$16.45</td>\n      <td>65.80</td>\n      <td>4.70</td>\n      <td>16.45</td>\n      <td>9.400000</td>\n      <td>2.000000</td>\n      <td>0.250000</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1957</td>\n      <td>2024-02-15</td>\n      <td>2</td>\n      <td>2</td>\n      <td>$42.44</td>\n      <td>$8.91</td>\n      <td>42.44</td>\n      <td>21.22</td>\n      <td>8.91</td>\n      <td>21.220000</td>\n      <td>1.000000</td>\n      <td>0.209943</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>2341</td>\n      <td>2024-06-03</td>\n      <td>7</td>\n      <td>16</td>\n      <td>$1,118.88</td>\n      <td>$313.29</td>\n      <td>1118.88</td>\n      <td>69.93</td>\n      <td>313.29</td>\n      <td>159.840000</td>\n      <td>2.285714</td>\n      <td>0.280003</td>\n      <td>big spender</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>3842</td>\n      <td>2024-03-31</td>\n      <td>6</td>\n      <td>6</td>\n      <td>$147.12</td>\n      <td>$5.88</td>\n      <td>147.12</td>\n      <td>24.52</td>\n      <td>5.88</td>\n      <td>24.520000</td>\n      <td>1.000000</td>\n      <td>0.039967</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>3694</td>\n      <td>2024-11-03</td>\n      <td>5</td>\n      <td>17</td>\n      <td>$1,574.37</td>\n      <td>$173.18</td>\n      <td>1574.37</td>\n      <td>92.61</td>\n      <td>173.18</td>\n      <td>314.874000</td>\n      <td>3.400000</td>\n      <td>0.110000</td>\n      <td>whale</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>3718</td>\n      <td>2024-10-30</td>\n      <td>2</td>\n      <td>5</td>\n      <td>$464.70</td>\n      <td>$120.82</td>\n      <td>464.70</td>\n      <td>92.94</td>\n      <td>120.82</td>\n      <td>232.350000</td>\n      <td>2.500000</td>\n      <td>0.259996</td>\n      <td>big spender</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>3621</td>\n      <td>2024-06-23</td>\n      <td>1</td>\n      <td>2</td>\n      <td>$138.76</td>\n      <td>$19.43</td>\n      <td>138.76</td>\n      <td>69.38</td>\n      <td>19.43</td>\n      <td>138.760000</td>\n      <td>2.000000</td>\n      <td>0.140026</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2191</td>\n      <td>2024-01-06</td>\n      <td>1</td>\n      <td>3</td>\n      <td>$17.85</td>\n      <td>$1.96</td>\n      <td>17.85</td>\n      <td>5.95</td>\n      <td>1.96</td>\n      <td>17.850000</td>\n      <td>3.000000</td>\n      <td>0.109804</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>1186</td>\n      <td>2024-09-21</td>\n      <td>5</td>\n      <td>16</td>\n      <td>$298.72</td>\n      <td>$74.68</td>\n      <td>298.72</td>\n      <td>18.67</td>\n      <td>74.68</td>\n      <td>59.744000</td>\n      <td>3.200000</td>\n      <td>0.250000</td>\n      <td>big eater</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>2486</td>\n      <td>2024-01-27</td>\n      <td>4</td>\n      <td>13</td>\n      <td>$569.01</td>\n      <td>$108.11</td>\n      <td>569.01</td>\n      <td>43.77</td>\n      <td>108.11</td>\n      <td>142.252500</td>\n      <td>3.250000</td>\n      <td>0.189997</td>\n      <td>big eater</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>2386</td>\n      <td>2024-03-31</td>\n      <td>5</td>\n      <td>12</td>\n      <td>$1,147.80</td>\n      <td>$137.74</td>\n      <td>1147.80</td>\n      <td>95.65</td>\n      <td>137.74</td>\n      <td>229.560000</td>\n      <td>2.400000</td>\n      <td>0.120003</td>\n      <td>big spender</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2443</td>\n      <td>2024-06-09</td>\n      <td>3</td>\n      <td>10</td>\n      <td>$286.40</td>\n      <td>$31.50</td>\n      <td>286.40</td>\n      <td>28.64</td>\n      <td>31.50</td>\n      <td>95.466667</td>\n      <td>3.333333</td>\n      <td>0.109986</td>\n      <td>big eater</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>1368</td>\n      <td>2024-12-21</td>\n      <td>10</td>\n      <td>25</td>\n      <td>$2,193.00</td>\n      <td>$372.81</td>\n      <td>2193.00</td>\n      <td>87.72</td>\n      <td>372.81</td>\n      <td>219.300000</td>\n      <td>2.500000</td>\n      <td>0.170000</td>\n      <td>big spender</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2809</td>\n      <td>2024-12-30</td>\n      <td>6</td>\n      <td>6</td>\n      <td>$104.46</td>\n      <td>$1.04</td>\n      <td>104.46</td>\n      <td>17.41</td>\n      <td>1.04</td>\n      <td>17.410000</td>\n      <td>1.000000</td>\n      <td>0.009956</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>1440</td>\n      <td>2024-11-30</td>\n      <td>3</td>\n      <td>8</td>\n      <td>$589.04</td>\n      <td>$141.37</td>\n      <td>589.04</td>\n      <td>73.63</td>\n      <td>141.37</td>\n      <td>196.346667</td>\n      <td>2.666667</td>\n      <td>0.240001</td>\n      <td>big spender</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>4590</td>\n      <td>2024-05-08</td>\n      <td>3</td>\n      <td>5</td>\n      <td>$220.40</td>\n      <td>$22.04</td>\n      <td>220.40</td>\n      <td>44.08</td>\n      <td>22.04</td>\n      <td>73.466667</td>\n      <td>1.666667</td>\n      <td>0.100000</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>1336</td>\n      <td>2024-08-30</td>\n      <td>8</td>\n      <td>28</td>\n      <td>$1,199.80</td>\n      <td>$275.95</td>\n      <td>1199.80</td>\n      <td>42.85</td>\n      <td>275.95</td>\n      <td>149.975000</td>\n      <td>3.500000</td>\n      <td>0.229997</td>\n      <td>big eater</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>4161</td>\n      <td>2024-06-22</td>\n      <td>9</td>\n      <td>28</td>\n      <td>$1,385.16</td>\n      <td>$235.48</td>\n      <td>1385.16</td>\n      <td>49.47</td>\n      <td>235.48</td>\n      <td>153.906667</td>\n      <td>3.111111</td>\n      <td>0.170002</td>\n      <td>big eater</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>3393</td>\n      <td>2024-08-26</td>\n      <td>5</td>\n      <td>6</td>\n      <td>$302.64</td>\n      <td>$24.21</td>\n      <td>302.64</td>\n      <td>50.44</td>\n      <td>24.21</td>\n      <td>60.528000</td>\n      <td>1.200000</td>\n      <td>0.079996</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>3676</td>\n      <td>2024-02-25</td>\n      <td>1</td>\n      <td>1</td>\n      <td>$19.89</td>\n      <td>$1.99</td>\n      <td>19.89</td>\n      <td>19.89</td>\n      <td>1.99</td>\n      <td>19.890000</td>\n      <td>1.000000</td>\n      <td>0.100050</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 5.2\n\nLet's build on the Streamlit app you made in Challenge 5.1, and add our KPIs to it.\n\n1.  Copy `st-cleaned_checks.py` to a new file called `st-checks_kpi.py`.\n\n1.  Add the `detect_whale` function defined above to `st-checks_kpi.py`.\n\n1.  Write a new function `detect_tipper(tip_pct, tip_pcy_75th_pctile, tip_pct_25_pctile)` that should return either \"light\" or \"heavy\" depending on whether the tip is below the 0.25 quantile or above the 0.75 quantile, respectively. If neither, the function should just return an empty string.\n\n1.  Apply the `detect_whale` and `detect_tipper` functions to the DataFrame, storing the results in new columns called `whale` and `tipper`, respectively.\n\n1.  As with before, diplay the modified DataFrame and the output of `describe` in a Streamlit app.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n1.  It's easiest to do the copy using the command line. In the terminal, run:\n\n```{bash}\ncp st-cleaned_checks.py st-checks_kpi.py\n```\n\n1.  Now modify `st-checks_kpi.py`. It should look like:\n\n::: {#79e72122 .cell execution_count=18}\n``` {.python .cell-code}\nimport streamlit as st\nimport pandas as pd\n\ndef clean_currency(value:str) -> float:\n    '''\n    This function will take a string value and remove the dollar sign and commas\n    and return a float value.\n    '''\n    return float(value.replace(',', '').replace('$', ''))\n\ndef detect_whale(\n        items_per_person:float, \n        price_per_person:float, \n        items_per_person_75th_pctile:float, \n        price_per_person_75_pctile:float) -> str:\n    if items_per_person > items_per_person_75th_pctile and price_per_person > price_per_person_75_pctile:\n        return 'whale'\n    if items_per_person > items_per_person_75th_pctile:\n        return 'big eater'\n    if price_per_person > price_per_person_75_pctile:\n        return 'big spender'\n    \n    return ''\n\n\ndef detect_tipper(tip_pct:float, tip_pct_75th_pctile:float, tip_pct_25th_pctile:float) -> str:\n    if tip_pct > tip_pct_75th_pctile:\n        return 'heavy tipper'\n    if tip_pct < tip_pct_25th_pctile:\n        return 'light tipper'\n    return ''\n\nst.title(\"Dining Check Data\")\n\n# load\nchecks = pd.read_csv('https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/dining/check-data.csv')\n\n# transformations\nchecks['total_amount_of_check_cleaned'] = checks['total amount of check'].apply(clean_currency)\nchecks['gratuity_cleaned'] = checks['gratuity'].apply(clean_currency)\nchecks['price_per_item'] = checks['total_amount_of_check_cleaned'] / checks['total items on check']\nchecks['price_per_person'] = checks['total_amount_of_check_cleaned'] / checks['party size']\nchecks['items_per_person'] = checks['total items on check'] / checks['party size']\nchecks['tip_percentage'] = checks['gratuity_cleaned'] / checks['total_amount_of_check_cleaned']\n\n## The new stuff adding KPIs:\n# get KPI boundaries\nppp_75 = checks['price_per_person'].quantile(0.75)\nipp_75 = checks['items_per_person'].quantile(0.75)\ntp_75 = checks['tip_percentage'].quantile(0.75)\ntp_25 = checks['tip_percentage'].quantile(0.25)\n\n# Calcualte KPI's\nchecks['whale'] = checks.apply(lambda row: detect_whale(row['items_per_person'], row['price_per_person'], ipp_75, ppp_75), axis=1)\nchecks['tipper'] = checks.apply(lambda row: detect_tipper(row['tip_percentage'], tp_75, tp_25), axis=1)\n\n# Now display\nst.dataframe(checks, width=1000)\n\nst.header(\"Summary:\")\nst.dataframe(checks.describe())\n```\n:::\n\n\n:::\n::::\n \n\n## Looping over Dataframes\n\nIf you must run a `for` loop over your DataFrames, there are two choices:\n\n- `df.iterrows()` dict-like iteration\n- `df.itertuples()` named-tuple like iteration (faster)\n\n\nLet's do an example where we display the check number, whale and tipper for \"heavy tipper\" checks.\n\n::: {#9f1e6f5e .cell execution_count=19}\n``` {.python .cell-code}\n## Using the iterrows() method\nprint(\"Total Amount of Whale Checks\")\nfor i,row in checks.iterrows():\n    if row['whale'] == 'whale':\n        print(i, row['check'], row['total_amount_of_check_cleaned'])\n```\n:::\n\n\n::: {#c4f70d34 .cell execution_count=20}\n``` {.python .cell-code}\n# Same example with the itertuples() method\nprint(\"Total Amount of Whale Checks\")\nfor row in checks.itertuples():\n    if row.whale == 'whale':\n        print(row.check, row.total_amount_of_check_cleaned)\n```\n:::\n\n\n::: {#239bb416 .cell execution_count=21}\n``` {.python .cell-code}\n# Of course you don't need a loop to do this:\nchecks[checks['whale'] == 'whale'][['check', 'total_amount_of_check_cleaned']]\n```\n:::\n\n\n",
    "supporting": [
      "pandas-4_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}