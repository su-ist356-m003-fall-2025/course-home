{
  "hash": "a5d3473f31c129b1c0de4b8ba9a1b360",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"4. Joining Multiple Pandas Dataframes\"\njupyter: python3\n---\n\n\nIn this unit we will discuss strategies for dealing with multiple dataframes and combing them into a single dataframe.\n\n\n## Concatenation\n\nConcatenation appends the rows of one or more dataframes together. This is a row-oriented operation so the resulting datafram will be longer. For example, if a 50-row dataframe is concatenated with a 40-row dataframe, you will have a 90-row dataframe.\n\nThe [pd.concat()](https://pandas.pydata.org/docs/reference/api/pandas.concat.html) function is used to concatenate frames. It takes several arguments, but the most often-used ones are: `pd.concat(items: list[pd.DataFrame], ignore_index=False)`. The first argument is a list of Dataframes to concat. The `ignore_index` keyword argument governs what happens to the indices in the combined frame: we can choose to keep the current index in each dataframe `ignore_index=False` or create a new index `ignore_index=True`.\n\nAn example:\n\n::: {#439e63a6 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\ncampus_students = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/master/delimited/campus-students.csv\")\ncampus_students\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Grade</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Helen</td>\n      <td>NaN</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Iris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Jimmy</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Karen</td>\n      <td>NaN</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lynne</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mike</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Nico</td>\n      <td>NaN</td>\n      <td>Junior</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Pete</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#d95daa7b .cell execution_count=2}\n``` {.python .cell-code}\nonline_students = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/master/delimited/online-students.csv\")\nonline_students\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Grade</th>\n      <th>Year</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abby</td>\n      <td>7.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>9.0</td>\n      <td>Sophomore</td>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dave</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ellen</td>\n      <td>7.0</td>\n      <td>Sophomore</td>\n      <td>TX</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Fran</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>FL</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Greg</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#af806a78 .cell execution_count=3}\n``` {.python .cell-code}\ncombined_students = pd.concat([campus_students, online_students])\ncombined_students\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Grade</th>\n      <th>Year</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Helen</td>\n      <td>NaN</td>\n      <td>Sophomore</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Iris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Jimmy</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Karen</td>\n      <td>NaN</td>\n      <td>Freshman</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lynne</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mike</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Nico</td>\n      <td>NaN</td>\n      <td>Junior</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Pete</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Abby</td>\n      <td>7.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>9.0</td>\n      <td>Sophomore</td>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dave</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ellen</td>\n      <td>7.0</td>\n      <td>Sophomore</td>\n      <td>TX</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Fran</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>FL</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Greg</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### concat() - Ignoring the index\n\nAs you can see from the code above the index from the original DataFrames was used. For example `Helen` and `Abby` both share the index `0`. This means that if you provide index 0, you'll get both of them, e.g.: \n\n::: {#2b5c972c .cell execution_count=4}\n``` {.python .cell-code}\ncombined_students['Name'][0]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n0    Helen\n0     Abby\nName: Name, dtype: object\n```\n:::\n:::\n\n\nWhile this is acceptable, there are situations where a new index based on combined values is desirable. We will encounter this later when grouping or pivioting data.\n\nTo make this happen include the `ignore_index=True` named argument. This will create a new index from the output DataFrame.\n\n::: {#7a0bd8dc .cell execution_count=5}\n``` {.python .cell-code}\nstudents = pd.concat([campus_students, online_students], ignore_index=True)\nstudents\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Grade</th>\n      <th>Year</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Helen</td>\n      <td>NaN</td>\n      <td>Sophomore</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Iris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Jimmy</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Karen</td>\n      <td>NaN</td>\n      <td>Freshman</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lynne</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mike</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Nico</td>\n      <td>NaN</td>\n      <td>Junior</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Pete</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Abby</td>\n      <td>7.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Bob</td>\n      <td>9.0</td>\n      <td>Sophomore</td>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Chris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Dave</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Ellen</td>\n      <td>7.0</td>\n      <td>Sophomore</td>\n      <td>TX</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Fran</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>FL</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Greg</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>NY</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Best practice - data lineage\n\nWhen combining datasets, its a really good idea to retain **data lineage**, or a record of where the data came from. This can be done by added a column to each dataframe before concatenating.\n\nIn this example we create a student `\"type\"` column to track lineage.\n\n::: {#89b6a35d .cell execution_count=6}\n``` {.python .cell-code}\ncampus_students = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/master/delimited/campus-students.csv\")\ncampus_students['type'] = 'campus'\nonline_students = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/master/delimited/online-students.csv\")\nonline_students['type'] = 'online'\nstudents = pd.concat([campus_students, online_students], ignore_index=True)\nstudents\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Grade</th>\n      <th>Year</th>\n      <th>type</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Helen</td>\n      <td>NaN</td>\n      <td>Sophomore</td>\n      <td>campus</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Iris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>campus</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Jimmy</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>campus</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Karen</td>\n      <td>NaN</td>\n      <td>Freshman</td>\n      <td>campus</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lynne</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n      <td>campus</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mike</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n      <td>campus</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Nico</td>\n      <td>NaN</td>\n      <td>Junior</td>\n      <td>campus</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Pete</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>campus</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Abby</td>\n      <td>7.0</td>\n      <td>Freshman</td>\n      <td>online</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Bob</td>\n      <td>9.0</td>\n      <td>Sophomore</td>\n      <td>online</td>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Chris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>online</td>\n      <td>CA</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Dave</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>online</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Ellen</td>\n      <td>7.0</td>\n      <td>Sophomore</td>\n      <td>online</td>\n      <td>TX</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Fran</td>\n      <td>10.0</td>\n      <td>Senior</td>\n      <td>online</td>\n      <td>FL</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Greg</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n      <td>online</td>\n      <td>NY</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 4.1: classic use case for concatenation\n\n\nConsider the JSON file here: [https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/json-samples/employees-dict.json](\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/json-samples/employees-dict.json\")\n\nLet's take a look at the structure of this file in a dictionary format:\n\n::: {#8f6491e8 .cell execution_count=7}\n``` {.python .cell-code}\nimport requests\nresponse = requests.get(\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/json-samples/employees-dict.json\")\nemployees = response.json()\nemployees\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n{'accounting': [{'firstName': 'John', 'lastName': 'Doe', 'age': 23},\n  {'firstName': 'Mary', 'lastName': 'Smith', 'age': 32}],\n 'sales': [{'firstName': 'Sally', 'lastName': 'Green', 'age': 27},\n  {'firstName': 'Jim', 'lastName': 'Galley', 'age': 41}],\n 'marketing': [{'firstName': 'Tom', 'lastName': 'Brown', 'age': 28}]}\n```\n:::\n:::\n\n\nThe issue with the JSON data is that there are employees under keys by department `\"accounting\", \"sales\", \"marketing\"`:\n\n::: {#140cf8dc .cell execution_count=8}\n``` {.python .cell-code}\nprint(\"departments\", employees.keys())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndepartments dict_keys(['accounting', 'sales', 'marketing'])\n```\n:::\n:::\n\n\nThis is the classic use-case for `pd.concat()` as there is no practical way to use `pd.json_normalize()` to get all the employees under each department.\n\nChallenge: for each department:\n\n1. Create a dataframe for that department.\n\n2. Add lineage to the dataframe (i.e., add the department name).\n\n3. Add the dataframe to a list of departments.\n\n4. Use `pd.concat` on the list of departments to create one dataframe. Print the dataframe. The output should look like:\n\n```{text}\n    firstName lastName  age        dept\n    0      John      Doe   23  accounting\n    1      Mary    Smith   32  accounting\n    2     Sally    Green   27       sales\n    3       Jim   Galley   41       sales\n    4       Tom    Brown   28   marketing\n```\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#0c93d594 .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\nimport requests\n\nimport requests\nresponse = requests.get(\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/json-samples/employees-dict.json\")\nemployees = response.json()\n\ndepartments = []\nfor dept_name in employees.keys():\n    # convert the department dictionary into a DataFrame\n    dept_employees = pd.DataFrame(employees[dept_name])\n    # Note: this also would work:\n    # dept_employees = pd.json_normalize(employees,  record_path=dept_name)\n    # Add the department name to the columns (data lineage):\n    dept_employees['dept'] = dept_name\n    departments.append(dept_employees)\n\ncombined = pd.concat(departments, ignore_index=True)\ncombined\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>firstName</th>\n      <th>lastName</th>\n      <th>age</th>\n      <th>dept</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>John</td>\n      <td>Doe</td>\n      <td>23</td>\n      <td>accounting</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mary</td>\n      <td>Smith</td>\n      <td>32</td>\n      <td>accounting</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sally</td>\n      <td>Green</td>\n      <td>27</td>\n      <td>sales</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Jim</td>\n      <td>Galley</td>\n      <td>41</td>\n      <td>sales</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Tom</td>\n      <td>Brown</td>\n      <td>28</td>\n      <td>marketing</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n::::\n\n\n\n## De-duplication\n\nSometimes after a `pd.concat()` you will have duplicate rows. \n\nYou can use `df.drop_duplicates()` to remove repeated rows of data.\n\nWithout an argument, this will scan the entire row of data to determine if the row is the same.\n\nIf your data has a natural key, you can specify that with the `subset=` named argument. This will improve performance. An example:\n\n::: {#139dcfeb .cell execution_count=10}\n``` {.python .cell-code}\no1 = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/dedupe/orders1.csv\")\no2 = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/dedupe/orders2.csv\")\norders = pd.concat([o1, o2], ignore_index=True)\norders.sort_values('orderid')\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>orderid</th>\n      <th>orderdate</th>\n      <th>custname</th>\n      <th>custemail</th>\n      <th>custcountry</th>\n      <th>orderstatus</th>\n      <th>ordertotal</th>\n      <th>ordercreditcard</th>\n      <th>ordershipvia</th>\n      <th>shippingtotal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>2023-03-24</td>\n      <td>Frayda Pepperd</td>\n      <td>fpepperd0@sciencedaily.com</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>228.39</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>12.05</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2</td>\n      <td>2023-03-24</td>\n      <td>Frayda Pepperd</td>\n      <td>fpepperd0@sciencedaily.com</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>228.39</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>12.05</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>3</td>\n      <td>2020-02-23</td>\n      <td>Loy Siberry</td>\n      <td>lsiberry1@so-net.ne.jp</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>76.87</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>6.27</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>2022-04-28</td>\n      <td>Carree Henworth</td>\n      <td>NaN</td>\n      <td>Canada</td>\n      <td>pending</td>\n      <td>152.30</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>12.74</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>4</td>\n      <td>2022-04-28</td>\n      <td>Carree Henworth</td>\n      <td>NaN</td>\n      <td>Canada</td>\n      <td>pending</td>\n      <td>152.30</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>12.74</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>2019-11-22</td>\n      <td>Goldina Godsafe</td>\n      <td>ggodsafe3@dailymail.co.uk</td>\n      <td>United States</td>\n      <td>shipped</td>\n      <td>182.17</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>5.44</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>6</td>\n      <td>2022-05-03</td>\n      <td>Marris Chatten</td>\n      <td>mchatten4@csmonitor.com</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>208.28</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>2.16</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>2022-05-03</td>\n      <td>Marris Chatten</td>\n      <td>mchatten4@csmonitor.com</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>208.28</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>2.16</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>7</td>\n      <td>2022-12-19</td>\n      <td>Logan Jacobsson</td>\n      <td>ljacobsson5@wufoo.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>112.15</td>\n      <td>Amex</td>\n      <td>USPS</td>\n      <td>11.52</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>2022-12-19</td>\n      <td>Logan Jacobsson</td>\n      <td>ljacobsson5@wufoo.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>112.15</td>\n      <td>Amex</td>\n      <td>USPS</td>\n      <td>11.52</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>8</td>\n      <td>2019-06-05</td>\n      <td>Lilli Feares</td>\n      <td>lfeares6@shop-pro.jp</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>237.90</td>\n      <td>Discover</td>\n      <td>FedEX</td>\n      <td>4.48</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>9</td>\n      <td>2019-02-17</td>\n      <td>Lowrance Sigsworth</td>\n      <td>lsigsworth7@youtube.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>141.94</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>7.31</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>10</td>\n      <td>2023-04-19</td>\n      <td>Libbi Spadari</td>\n      <td>lspadari8@dot.gov</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>160.79</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>16.52</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10</td>\n      <td>2023-04-19</td>\n      <td>Libbi Spadari</td>\n      <td>lspadari8@dot.gov</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>160.79</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>16.52</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>11</td>\n      <td>2020-01-20</td>\n      <td>Renato Hue</td>\n      <td>rhue9@un.org</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>120.52</td>\n      <td>Visa</td>\n      <td>USPS</td>\n      <td>5.57</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>12</td>\n      <td>2022-03-03</td>\n      <td>Lucky Helstrip</td>\n      <td>lhelstripa@tmall.com</td>\n      <td>Mexico</td>\n      <td>delivered</td>\n      <td>202.07</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>18.57</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>12</td>\n      <td>2022-03-03</td>\n      <td>Lucky Helstrip</td>\n      <td>lhelstripa@tmall.com</td>\n      <td>Mexico</td>\n      <td>delivered</td>\n      <td>202.07</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>18.57</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>13</td>\n      <td>2021-09-04</td>\n      <td>Debi Myrie</td>\n      <td>dmyrieb@unc.edu</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>131.62</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>2.37</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>13</td>\n      <td>2021-09-04</td>\n      <td>Debi Myrie</td>\n      <td>dmyrieb@unc.edu</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>131.62</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>2.37</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>14</td>\n      <td>2022-02-27</td>\n      <td>Hyacinth Aveyard</td>\n      <td>haveyardc@ucoz.com</td>\n      <td>United States</td>\n      <td>pending</td>\n      <td>209.86</td>\n      <td>Amex</td>\n      <td>USPS</td>\n      <td>8.69</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>15</td>\n      <td>2019-01-11</td>\n      <td>Crin Blanket</td>\n      <td>cblanketd@newsvine.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>85.46</td>\n      <td>Visa</td>\n      <td>UPS</td>\n      <td>14.22</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere, we use the entire row to check for duplicates:\n\n::: {#4e3a97e4 .cell execution_count=11}\n``` {.python .cell-code}\norders.drop_duplicates().sort_values(\"orderid\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>orderid</th>\n      <th>orderdate</th>\n      <th>custname</th>\n      <th>custemail</th>\n      <th>custcountry</th>\n      <th>orderstatus</th>\n      <th>ordertotal</th>\n      <th>ordercreditcard</th>\n      <th>ordershipvia</th>\n      <th>shippingtotal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>2023-03-24</td>\n      <td>Frayda Pepperd</td>\n      <td>fpepperd0@sciencedaily.com</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>228.39</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>12.05</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>3</td>\n      <td>2020-02-23</td>\n      <td>Loy Siberry</td>\n      <td>lsiberry1@so-net.ne.jp</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>76.87</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>6.27</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>2022-04-28</td>\n      <td>Carree Henworth</td>\n      <td>NaN</td>\n      <td>Canada</td>\n      <td>pending</td>\n      <td>152.30</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>12.74</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>2019-11-22</td>\n      <td>Goldina Godsafe</td>\n      <td>ggodsafe3@dailymail.co.uk</td>\n      <td>United States</td>\n      <td>shipped</td>\n      <td>182.17</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>5.44</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>2022-05-03</td>\n      <td>Marris Chatten</td>\n      <td>mchatten4@csmonitor.com</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>208.28</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>2.16</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>2022-12-19</td>\n      <td>Logan Jacobsson</td>\n      <td>ljacobsson5@wufoo.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>112.15</td>\n      <td>Amex</td>\n      <td>USPS</td>\n      <td>11.52</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>8</td>\n      <td>2019-06-05</td>\n      <td>Lilli Feares</td>\n      <td>lfeares6@shop-pro.jp</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>237.90</td>\n      <td>Discover</td>\n      <td>FedEX</td>\n      <td>4.48</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>9</td>\n      <td>2019-02-17</td>\n      <td>Lowrance Sigsworth</td>\n      <td>lsigsworth7@youtube.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>141.94</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>7.31</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10</td>\n      <td>2023-04-19</td>\n      <td>Libbi Spadari</td>\n      <td>lspadari8@dot.gov</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>160.79</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>16.52</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>11</td>\n      <td>2020-01-20</td>\n      <td>Renato Hue</td>\n      <td>rhue9@un.org</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>120.52</td>\n      <td>Visa</td>\n      <td>USPS</td>\n      <td>5.57</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>12</td>\n      <td>2022-03-03</td>\n      <td>Lucky Helstrip</td>\n      <td>lhelstripa@tmall.com</td>\n      <td>Mexico</td>\n      <td>delivered</td>\n      <td>202.07</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>18.57</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>13</td>\n      <td>2021-09-04</td>\n      <td>Debi Myrie</td>\n      <td>dmyrieb@unc.edu</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>131.62</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>2.37</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>14</td>\n      <td>2022-02-27</td>\n      <td>Hyacinth Aveyard</td>\n      <td>haveyardc@ucoz.com</td>\n      <td>United States</td>\n      <td>pending</td>\n      <td>209.86</td>\n      <td>Amex</td>\n      <td>USPS</td>\n      <td>8.69</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>15</td>\n      <td>2019-01-11</td>\n      <td>Crin Blanket</td>\n      <td>cblanketd@newsvine.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>85.46</td>\n      <td>Visa</td>\n      <td>UPS</td>\n      <td>14.22</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere, we just use the `orderid` to check for duplicates:\n\n::: {#a7b6f6f5 .cell execution_count=12}\n``` {.python .cell-code}\norders.drop_duplicates(subset=\"orderid\").sort_values(\"orderid\")\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>orderid</th>\n      <th>orderdate</th>\n      <th>custname</th>\n      <th>custemail</th>\n      <th>custcountry</th>\n      <th>orderstatus</th>\n      <th>ordertotal</th>\n      <th>ordercreditcard</th>\n      <th>ordershipvia</th>\n      <th>shippingtotal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>2023-03-24</td>\n      <td>Frayda Pepperd</td>\n      <td>fpepperd0@sciencedaily.com</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>228.39</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>12.05</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>3</td>\n      <td>2020-02-23</td>\n      <td>Loy Siberry</td>\n      <td>lsiberry1@so-net.ne.jp</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>76.87</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>6.27</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>2022-04-28</td>\n      <td>Carree Henworth</td>\n      <td>NaN</td>\n      <td>Canada</td>\n      <td>pending</td>\n      <td>152.30</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>12.74</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>2019-11-22</td>\n      <td>Goldina Godsafe</td>\n      <td>ggodsafe3@dailymail.co.uk</td>\n      <td>United States</td>\n      <td>shipped</td>\n      <td>182.17</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>5.44</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>2022-05-03</td>\n      <td>Marris Chatten</td>\n      <td>mchatten4@csmonitor.com</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>208.28</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>2.16</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>2022-12-19</td>\n      <td>Logan Jacobsson</td>\n      <td>ljacobsson5@wufoo.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>112.15</td>\n      <td>Amex</td>\n      <td>USPS</td>\n      <td>11.52</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>8</td>\n      <td>2019-06-05</td>\n      <td>Lilli Feares</td>\n      <td>lfeares6@shop-pro.jp</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>237.90</td>\n      <td>Discover</td>\n      <td>FedEX</td>\n      <td>4.48</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>9</td>\n      <td>2019-02-17</td>\n      <td>Lowrance Sigsworth</td>\n      <td>lsigsworth7@youtube.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>141.94</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>7.31</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>10</td>\n      <td>2023-04-19</td>\n      <td>Libbi Spadari</td>\n      <td>lspadari8@dot.gov</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>160.79</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>16.52</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>11</td>\n      <td>2020-01-20</td>\n      <td>Renato Hue</td>\n      <td>rhue9@un.org</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>120.52</td>\n      <td>Visa</td>\n      <td>USPS</td>\n      <td>5.57</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>12</td>\n      <td>2022-03-03</td>\n      <td>Lucky Helstrip</td>\n      <td>lhelstripa@tmall.com</td>\n      <td>Mexico</td>\n      <td>delivered</td>\n      <td>202.07</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>18.57</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>13</td>\n      <td>2021-09-04</td>\n      <td>Debi Myrie</td>\n      <td>dmyrieb@unc.edu</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>131.62</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>2.37</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>14</td>\n      <td>2022-02-27</td>\n      <td>Hyacinth Aveyard</td>\n      <td>haveyardc@ucoz.com</td>\n      <td>United States</td>\n      <td>pending</td>\n      <td>209.86</td>\n      <td>Amex</td>\n      <td>USPS</td>\n      <td>8.69</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>15</td>\n      <td>2019-01-11</td>\n      <td>Crin Blanket</td>\n      <td>cblanketd@newsvine.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>85.46</td>\n      <td>Visa</td>\n      <td>UPS</td>\n      <td>14.22</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThat gives the same result as using the whole row because the `orderid` is one-to-one with the uniqueness of the row. It's faster doing this though, even on this small dataset (use `%timeit` to compare)!\n\nNotice if we had used a different subset which is not representative of the row, we lose data. For example:\n\n::: {#ff40c33f .cell execution_count=13}\n``` {.python .cell-code}\norders.drop_duplicates(subset=\"ordercreditcard\").sort_values(\"orderid\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>orderid</th>\n      <th>orderdate</th>\n      <th>custname</th>\n      <th>custemail</th>\n      <th>custcountry</th>\n      <th>orderstatus</th>\n      <th>ordertotal</th>\n      <th>ordercreditcard</th>\n      <th>ordershipvia</th>\n      <th>shippingtotal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>2023-03-24</td>\n      <td>Frayda Pepperd</td>\n      <td>fpepperd0@sciencedaily.com</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>228.39</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>12.05</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>2019-11-22</td>\n      <td>Goldina Godsafe</td>\n      <td>ggodsafe3@dailymail.co.uk</td>\n      <td>United States</td>\n      <td>shipped</td>\n      <td>182.17</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>5.44</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>11</td>\n      <td>2020-01-20</td>\n      <td>Renato Hue</td>\n      <td>rhue9@un.org</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>120.52</td>\n      <td>Visa</td>\n      <td>USPS</td>\n      <td>5.57</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Returning a dataframe of duplicates\n\nTo get a dataframe of just the duplicated values you can use `df.duplicated()`. This returns a boolean series that you can use to extract the duplicated rows from the concatenated dataframe. Example:\n\n::: {#14a1f375 .cell execution_count=14}\n``` {.python .cell-code}\ndupes = orders.duplicated(subset=['orderid'])\norders[dupes]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>orderid</th>\n      <th>orderdate</th>\n      <th>custname</th>\n      <th>custemail</th>\n      <th>custcountry</th>\n      <th>orderstatus</th>\n      <th>ordertotal</th>\n      <th>ordercreditcard</th>\n      <th>ordershipvia</th>\n      <th>shippingtotal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10</th>\n      <td>2</td>\n      <td>2023-03-24</td>\n      <td>Frayda Pepperd</td>\n      <td>fpepperd0@sciencedaily.com</td>\n      <td>Canada</td>\n      <td>delivered</td>\n      <td>228.39</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>12.05</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>4</td>\n      <td>2022-04-28</td>\n      <td>Carree Henworth</td>\n      <td>NaN</td>\n      <td>Canada</td>\n      <td>pending</td>\n      <td>152.30</td>\n      <td>Discover</td>\n      <td>USPS</td>\n      <td>12.74</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>6</td>\n      <td>2022-05-03</td>\n      <td>Marris Chatten</td>\n      <td>mchatten4@csmonitor.com</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>208.28</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>2.16</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>7</td>\n      <td>2022-12-19</td>\n      <td>Logan Jacobsson</td>\n      <td>ljacobsson5@wufoo.com</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>112.15</td>\n      <td>Amex</td>\n      <td>USPS</td>\n      <td>11.52</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>10</td>\n      <td>2023-04-19</td>\n      <td>Libbi Spadari</td>\n      <td>lspadari8@dot.gov</td>\n      <td>Mexico</td>\n      <td>pending</td>\n      <td>160.79</td>\n      <td>Discover</td>\n      <td>RPS</td>\n      <td>16.52</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>12</td>\n      <td>2022-03-03</td>\n      <td>Lucky Helstrip</td>\n      <td>lhelstripa@tmall.com</td>\n      <td>Mexico</td>\n      <td>delivered</td>\n      <td>202.07</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>18.57</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>13</td>\n      <td>2021-09-04</td>\n      <td>Debi Myrie</td>\n      <td>dmyrieb@unc.edu</td>\n      <td>United States</td>\n      <td>delivered</td>\n      <td>131.62</td>\n      <td>Amex</td>\n      <td>UPS</td>\n      <td>2.37</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Merges \n\nA *merge* combines two dataframes based on a common column.  The resulting dataframe is wider (has more columns) than the original dataframe. The function to do this is [pd.merge()](https://pandas.pydata.org/docs/reference/api/pandas.merge.html). It's most common arguments:\n\n`pd.merge(left: pd.DataFrame, right:pd.Dataframe, how:str, left_on:str, right_on:str)`\n\n-   `how` specifies the join operation:\n    - `\"inner\"` - returns ONLY rows when values of `left_on` match `right_on`\n\n    - `\"left\"` - returns ALL rows from `left` and  ONLY rows from `right` when values of `left_on` match `right_on`\n\n    - `\"right\"` - returns ALL rows  from `right` and ONLY rows from `left` when values of `left_on` match `right_on`\n    \n    - `\"outer\"` - returns ALL rows from `left` and `right` and rows when values of `left_on` match `right_on`\n\n\nTo illustrate the differences between these, consider merging the following two dataframes, one representing a roster of basketball players, and another a list of teams:\n\n::: {#69171a63 .cell execution_count=15}\n``` {.python .cell-code}\nbbplayers = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/delimited/bbplayers.csv\")\nbbplayers\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>player_name</th>\n      <th>career_pts</th>\n      <th>player_team_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>101</td>\n      <td>Jordan</td>\n      <td>32292</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>102</td>\n      <td>Pippen</td>\n      <td>18940</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>103</td>\n      <td>Bryant</td>\n      <td>33643</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>104</td>\n      <td>O'Neal</td>\n      <td>28596</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>105</td>\n      <td>Fudge</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#c2c0584d .cell execution_count=16}\n``` {.python .cell-code}\nbbteams = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/delimited/bbteams.csv\")\nbbteams\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>team_id</th>\n      <th>team_name</th>\n      <th>team_location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Tropics</td>\n      <td>Flint, MI</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Inner join**: Only rows that match the `bbplayer.player_team_id` and `bbteam.team_id` and `bbteam` will be included. Note that in this case we lose Player 105 and team 3 because there are no matches: \n\n::: {#57043ca3 .cell execution_count=17}\n``` {.python .cell-code}\ncombined = pd.merge(bbplayers, bbteams, left_on='player_team_id', right_on='team_id', how='inner')\ncombined\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>player_name</th>\n      <th>career_pts</th>\n      <th>player_team_id</th>\n      <th>team_id</th>\n      <th>team_name</th>\n      <th>team_location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>101</td>\n      <td>Jordan</td>\n      <td>32292</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>102</td>\n      <td>Pippen</td>\n      <td>18940</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>103</td>\n      <td>Bryant</td>\n      <td>33643</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>104</td>\n      <td>O'Neal</td>\n      <td>28596</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Left join**: All rows from the left (every player) and ONLY rows from team that match. Now we see Player 105 despite no team match: \n\n::: {#fb0b28ea .cell execution_count=18}\n``` {.python .cell-code}\ncombined = pd.merge(bbplayers, bbteams, left_on='player_team_id', right_on='team_id', how='left')\ncombined\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>player_name</th>\n      <th>career_pts</th>\n      <th>player_team_id</th>\n      <th>team_id</th>\n      <th>team_name</th>\n      <th>team_location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>101</td>\n      <td>Jordan</td>\n      <td>32292</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>102</td>\n      <td>Pippen</td>\n      <td>18940</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>103</td>\n      <td>Bryant</td>\n      <td>33643</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>104</td>\n      <td>O'Neal</td>\n      <td>28596</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>105</td>\n      <td>Fudge</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Right join**: All rows from the right (every team) and ONLY rows from players that match. We now see Team 3 despite no player match:\n\n::: {#21f20a98 .cell execution_count=19}\n``` {.python .cell-code}\ncombined = pd.merge(bbplayers, bbteams, left_on='player_team_id', right_on='team_id', how='right')\ncombined\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>player_name</th>\n      <th>career_pts</th>\n      <th>player_team_id</th>\n      <th>team_id</th>\n      <th>team_name</th>\n      <th>team_location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>101.0</td>\n      <td>Jordan</td>\n      <td>32292.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>102.0</td>\n      <td>Pippen</td>\n      <td>18940.0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>103.0</td>\n      <td>Bryant</td>\n      <td>33643.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>104.0</td>\n      <td>O'Neal</td>\n      <td>28596.0</td>\n      <td>2.0</td>\n      <td>2</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3</td>\n      <td>Tropics</td>\n      <td>Flint, MI</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Outer join**: All rows from both tables are included. This is equivalent to doing an inner join + all non-matching rows from both tables. In this case, we see Team 3 *and* Player 105:\n\n::: {#548137d1 .cell execution_count=20}\n``` {.python .cell-code}\ncombined = pd.merge(bbplayers, bbteams, left_on='player_team_id', right_on='team_id', how='outer')\ncombined\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>player_name</th>\n      <th>career_pts</th>\n      <th>player_team_id</th>\n      <th>team_id</th>\n      <th>team_name</th>\n      <th>team_location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>101.0</td>\n      <td>Jordan</td>\n      <td>32292.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>102.0</td>\n      <td>Pippen</td>\n      <td>18940.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>Bulls</td>\n      <td>Chicago, IL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>103.0</td>\n      <td>Bryant</td>\n      <td>33643.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>104.0</td>\n      <td>O'Neal</td>\n      <td>28596.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>Lakers</td>\n      <td>Los Angeles, CA</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>Tropics</td>\n      <td>Flint, MI</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>105.0</td>\n      <td>Fudge</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 4.2: who is not buying from MiniMart?\n\nConsider the following data from a grocery store: [https://github.com/mafudge/datasets/tree/master/minimart](https://github.com/mafudge/datasets/tree/master/minimart). In that directory you'll see `customers.csv`, which is a list of customers, and a separate CSV file of purchases made in the first four months of the year. \n\nYou have been hired to build a UI to display names of customers who did not buy from minimart in any given month. Write a Streamlit app that displays a dataframe of customers who did not buy anything in a given month. The app should have a drop down menu that allows the user to select the month to display.\n\nThe URL for the location of raw data that you can use in your app is:\n\n`https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/minimart/`\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#e8c4fa0a .cell execution_count=21}\n``` {.python .cell-code}\nimport streamlit as st\nimport pandas as pd\n\nbase = \"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/minimart/\"\nmonths = ['jan', 'feb', 'mar', 'apr']\n\nst.title(\"Who's not Buying from MiniMart?\")\nmonth = st.selectbox('Select Month:', months)\n\npurchases = pd.read_csv(f\"{base}/purchases-{month}.csv\")\ncustomers = pd.read_csv(f\"{base}/customers.csv\")\ncombined = pd.merge(customers, purchases, left_on='customer_id', right_on='customer_id', how='left')\ncols = [\"customer_id\", \"firstname\", \"lastname\"]\ndid_not_buy = combined[\"order_id\"].isnull()\ncustomers_who_did_not_buy = combined[did_not_buy][cols]\nst.header(f\"These people did not buy anything in {month.capitalize()}.:\")\nst.dataframe(customers_who_did_not_buy, hide_index=True)\n\n# You can add the following to double check the results:\n#st.divider()\n#st.write(\"debug\")\n#st.dataframe(combined)\n# That will display the full combined frame for the selected month. The ones\n# without entries for the order id should be what's displayed in the table above.\n```\n:::\n\n\n:::\n::::\n\n",
    "supporting": [
      "pandas-3_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}