{
  "hash": "34a0df0d7ce17a29c3d1d274c8c5b1e3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"3. Data I/O with Pandas\"\njupyter: python3\n---\n\n\nIn this tutorial we'll learn about how to load and save files using Pandas, including how to handle different file formats (csv, json, Excel, etc.).\n\n\n## Pandas reads data in a variety of formats\n\nExamples:\n\n- Text: CSV / Delimited   \n `pd.read_csv(\"file.csv\", sep=\",\", header=0)`\n- Semi- Structured: JSON, HTML, XML   \n`pd.read_json(\"file.json\", orient=\"records\")`\n- Microsoft Excel   \n`pd.read_excel(\"file.xlsx\", sheet_name=\"Sheet 1\")`\n- Big Data formats (ORC, Parquet, HDF5)   \n`pd.read_parquet(\"file.parquet\")`\n- SQL Databases\n\nFor more details, see the [Pandas IO documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html).\n\n## Pandas can read from almost anywhere\n\n- Local files  \n`pd_read_csv(\"./folder/file.csv\")`\n- Files over  the network using http / https   \n`pd.read_csv(\"https://website/folder/file.csv\")`\n- File-like: binary / text streams  \n\n::: {#e4a531d0 .cell execution_count=1}\n``` {.python .cell-code}\nwith open('file.csv', 'r') as file:\n    data = file.read()\n    df = pd.read_csv(pd.compat.StringIO(data))  # text stream\n```\n:::\n\n\n## Reading CSV / Delimited Text\n\nFor reading CSV files (or text files with other delimiters, such as tab), we use the [read_csv()](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-read-csv-table) function.\n\n- This function is for processing text files one record per line with values separated by a delimiter  (typically a `,`, but can be any string).\n- Common named arguments:\n    - `sep=` the delimiter, default is a comma.\n    - `header=` Which row, amongst those not skipped is the header\n    - `names=` list of column names to use in the DataFrame\n    - `skiprows=` how many lines to skip before the data begins?\n\nSome examples of reading in the same data in different ways are below. In every case, the output is the same `DataFrame`:\n\n::: {#aa9c0db7 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n# To view the following files, see:\n# https://github.com/mafudge/datasets/tree/master/delimited\nlocation = \"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/delimited\"\n\n# Header is first row, Comma-delimited\nstudents = pd.read_csv(f'{location}/students-header.csv') \n\n# No header in first row, Comma-delimited\nstudents = pd.read_csv(f'{location}/students-no-header.csv', header=None, names =['Name','Grade','Year'])\n\n# No header in first row, Pipe-delimited  \"|\"\nstudents = pd.read_csv(f'{location}/students-header.psv', sep=\"|\")\n\n# Header not in first row, header in 6th row, Comma-delimited\"\nstudents = pd.read_csv(f'{location}/students-header-blanks.csv', skiprows=5)\n\n# no header, data starts in 6th row, semicolon-delimited\"\nstudents = pd.read_csv(f'{location}/students-no-header-blanks.ssv', skiprows=5, header=None, sep=\";\", names =['Name','Grade','Year'])\n\nstudents\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Grade</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abby</td>\n      <td>7.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>9.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dave</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ellen</td>\n      <td>7.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Fran</td>\n      <td>10.0</td>\n      <td>Senior</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Greg</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Helen</td>\n      <td>NaN</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Iris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Jimmy</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Karen</td>\n      <td>7.5</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Lynne</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Mike</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Nico</td>\n      <td>NaN</td>\n      <td>Junior</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Pete</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 3.1\n\nRead this file into a Pandas `DataFrame`:\n\n[https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/delimited/webtraffic.log](https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/delimited/webtraffic.log)\n\n- What is the delimiter?\n- Is there a header? Which row?\n- Do you need to skip lines?\n\nDisplay only data where the time taken > 500 (msec) and the sc-status is equal to 200.\n\nBonus: display the data in a Streamlit app.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#5e81a4a1 .cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\n\nwt = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/delimited/webtraffic.log\", skiprows=3, header=0, sep=\"\\s+\")\nwt.info() # colunmn info (to console only)\n\nwt_filter = (wt['sc-status'] == 200) & ( wt['time-taken'] > 500)\nwt_slow_but_successful = wt[wt_filter]\nwt_slow_but_successful\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 489 entries, 0 to 488\nData columns (total 15 columns):\n #   Column           Non-Null Count  Dtype \n---  ------           --------------  ----- \n 0   date             489 non-null    object\n 1   time             489 non-null    object\n 2   s-ip             489 non-null    object\n 3   cs-method        489 non-null    object\n 4   cs-uri-stem      489 non-null    object\n 5   cs-uri-query     489 non-null    object\n 6   s-port           489 non-null    int64 \n 7   cs-username      489 non-null    object\n 8   c-ip             489 non-null    object\n 9   cs(User-Agent)   489 non-null    object\n 10  cs(Referer)      489 non-null    object\n 11  sc-status        489 non-null    int64 \n 12  sc-substatus     489 non-null    int64 \n 13  sc-win32-status  489 non-null    int64 \n 14  time-taken       489 non-null    int64 \ndtypes: int64(5), object(10)\nmemory usage: 57.4+ KB\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n<>:3: SyntaxWarning: invalid escape sequence '\\s'\n<>:3: SyntaxWarning: invalid escape sequence '\\s'\n/tmp/ipykernel_11215/568368627.py:3: SyntaxWarning: invalid escape sequence '\\s'\n  wt = pd.read_csv(\"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/delimited/webtraffic.log\", skiprows=3, header=0, sep=\"\\s+\")\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>time</th>\n      <th>s-ip</th>\n      <th>cs-method</th>\n      <th>cs-uri-stem</th>\n      <th>cs-uri-query</th>\n      <th>s-port</th>\n      <th>cs-username</th>\n      <th>c-ip</th>\n      <th>cs(User-Agent)</th>\n      <th>cs(Referer)</th>\n      <th>sc-status</th>\n      <th>sc-substatus</th>\n      <th>sc-win32-status</th>\n      <th>time-taken</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32</th>\n      <td>2016-02-11</td>\n      <td>17:16:17</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/desktops</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>215.82.23.2</td>\n      <td>Mozilla/5.0+(Windows+NT+10.0;+WOW64;+rv:43.0)+...</td>\n      <td>http://group0.ist722.ischool.syr.edu/</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1144</td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>2016-02-11</td>\n      <td>17:16:59</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/adidas-consortium-campus-80s-running-shoes</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>128.122.140.238</td>\n      <td>Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKi...</td>\n      <td>http://group0.ist722.ischool.syr.edu/shoes</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>701</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>2016-02-11</td>\n      <td>17:17:07</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/htc-one-m8-android-l-50-lollipop</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>128.122.140.238</td>\n      <td>Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKi...</td>\n      <td>http://group0.ist722.ischool.syr.edu/</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>613</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>2016-02-11</td>\n      <td>18:03:08</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/digital-downloads</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>74.111.6.173</td>\n      <td>Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKi...</td>\n      <td>http://group0.ist722.ischool.syr.edu/register</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>572</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>2016-02-11</td>\n      <td>18:03:58</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/jewelry</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>74.111.6.173</td>\n      <td>Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKi...</td>\n      <td>http://group0.ist722.ischool.syr.edu/cart</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>281</th>\n      <td>2016-02-11</td>\n      <td>18:07:48</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/electronics</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>172.189.252.8</td>\n      <td>Mozilla/5.0+(Macintosh;+Intel+Mac+OS+X+10_11_3...</td>\n      <td>http://group0.ist722.ischool.syr.edu/</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>704</td>\n    </tr>\n    <tr>\n      <th>293</th>\n      <td>2016-02-11</td>\n      <td>18:07:50</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/apparel</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>172.189.252.8</td>\n      <td>Mozilla/5.0+(Macintosh;+Intel+Mac+OS+X+10_11_3...</td>\n      <td>http://group0.ist722.ischool.syr.edu/electronics</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>645</td>\n    </tr>\n    <tr>\n      <th>303</th>\n      <td>2016-02-11</td>\n      <td>18:07:53</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/computers</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>172.189.252.8</td>\n      <td>Mozilla/5.0+(Macintosh;+Intel+Mac+OS+X+10_11_3...</td>\n      <td>http://group0.ist722.ischool.syr.edu/apparel</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>703</td>\n    </tr>\n    <tr>\n      <th>399</th>\n      <td>2016-02-11</td>\n      <td>19:55:38</td>\n      <td>128.230.247.37</td>\n      <td>GET</td>\n      <td>/if-you-wait</td>\n      <td>-</td>\n      <td>80</td>\n      <td>-</td>\n      <td>8.37.70.99</td>\n      <td>AddThis.com+(http://support.addthis.com/)</td>\n      <td>-</td>\n      <td>200</td>\n      <td>0</td>\n      <td>0</td>\n      <td>539</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo display in a Streamlit app, put the above in a script file (say, `webtraffic.py`) and add the following:\n\n::: {#aef0ab7d .cell execution_count=4}\n``` {.python .cell-code}\nimport streamlit as st\n\nst.title(\"Webtraffic Data\")\nst.dataframe(wt_slow_but_successful) # first 20 rows\n```\n:::\n\n\nThen in a terminal run:\n```{bash}\npython -m streamlit run webtraffic.py\n```\n:::\n::::\n\n\n## Reading JSON Text\n\nTo load JSON files as a Pandas `DataFrame` we use the [read_json()](https://pandas.pydata.org/docs/reference/api/pandas.read_json.html) function. Examples: \n\n- `pd.read_json(\"file.json\", orient=\"columns\")`\n\n- `pd.read_json(\"file.json\", orient=\"records\", lines=True)` <== Line-oriented json\n\nOrientations:\n- **split**: dict like `{index -> [index]; columns -> [columns]; data -> [values]}`\n\n- **records**:  list like `[{column -> value} …]`\n\n- **index**: dict like `{index -> {column -> value}}`\n\n- **columns**: dict like `{column -> {index -> value}}`\n\n- **values**: just the values array\n\n- **table**: dict adhering to the JSON Table Schema [https://specs.frictionlessdata.io/table-schema/#descriptor](https://specs.frictionlessdata.io/table-schema/#descriptor)\n\nFor more on reading JSON files, see the Pandas [Reading JSON guide](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#io-json-reader).\n\nSome examples of reading in the same JSON data in different ways follows. In every case, the output is the same `DataFrame`:\n\n::: {#c94ef493 .cell execution_count=5}\n``` {.python .cell-code}\n# https://github.com/mafudge/datasets/tree/master/json-formats to view the files\nlocation = \"https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/json-formats\"\n\n# Row-oriented JSON [ { \"Name\": \"Alice\", \"Grade\": 12, \"Year\": 2021 }, { \"Name\": \"Bob\", \"Grade\": 11, \"Year\": 2022 } ]\nstudents = pd.read_json(f'{location}/students-records.json', orient='records')\n\n# line-oriented JSON { \"Name\": \"Alice\", \"Grade\": 12, \"Year\": 2021 }\\n { \"Name\": \"Bob\", \"Grade\": 11, \"Year\": 2022 }\\n\nstudents = pd.read_json(f'{location}/students-lines.json', orient='records', lines=True)\n\n# column-oriented JSON { \"Name\": [\"Alice\", \"Bob\"], \"Grade\": [12, 11], \"Year\": [2021, 2022] }\nstudents = pd.read_json(f'{location}/students-columns.json', orient='columns')\n\nstudents\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Grade</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abby</td>\n      <td>7.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>9.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dave</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ellen</td>\n      <td>7.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Fran</td>\n      <td>10.0</td>\n      <td>Senior</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Greg</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Helen</td>\n      <td>NaN</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Iris</td>\n      <td>10.0</td>\n      <td>Senior</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Jimmy</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Karen</td>\n      <td>7.5</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Lynne</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Mike</td>\n      <td>10.0</td>\n      <td>Sophomore</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Nico</td>\n      <td>NaN</td>\n      <td>Junior</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Pete</td>\n      <td>8.0</td>\n      <td>Freshman</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Handling Nested JSON\n\nThe `read_json()` method does not perform well on nested JSON structures. For example consider the following JSON file of customer orders:\n\nThe file `orders.json`: \n```{json}\n[\n    {\n        \"Customer\" : { \"FirstName\" : \"Abby\", \"LastName\" : \"Kuss\"}, \n        \"Items\" : [\n            { \"Name\" : \"T-Shirt\", \"Price\" : 10.0, \"Quantity\" : 3},\n            { \"Name\" : \"Jacket\", \"Price\" : 20.0, \"Quantity\" : 1}\n        ]\n    },\n    {\n        \"Customer\" : { \"FirstName\" : \"Bette\", \"LastName\" : \"Alott\"}, \n        \"Items\" : [\n            { \"Name\" : \"Shoes\", \"Price\" : 25.0, \"Quantity\" : 1}, \n            { \"Name\" : \"Jacket\", \"Price\" : 20.0, \"Quantity\" : 1}\n        ]\n    },\n    {\n        \"Customer\" : { \"FirstName\" : \"Chris\", \"LastName\" : \"Peanugget\"}, \n        \"Items\" : [\n            { \"Name\" : \"T-Shirt\", \"Price\" : 10.0, \"Quantity\" : 1}\n        ]\n    }\n]\n```\n\nWhen we read this with `read_json()` we get the three orders but only two columns --- one for the `\"Customer\"` key, and the other for the `\"Items\"` key:\n\n::: {#4ca75599 .cell execution_count=6}\n``` {.python .cell-code}\norders = pd.read_json(\"https://raw.githubusercontent.com/mafudge/datasets/master/json-samples/orders.json\")\norders\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Customer</th>\n      <th>Items</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>{'FirstName': 'Abby', 'LastName': 'Kuss'}</td>\n      <td>[{'Name': 'T-Shirt', 'Price': 10.0, 'Quantity'...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>{'FirstName': 'Bette', 'LastName': 'Alott'}</td>\n      <td>[{'Name': 'Shoes', 'Price': 25.0, 'Quantity': ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>{'FirstName': 'Chris', 'LastName': 'Peanugget'}</td>\n      <td>[{'Name': 'T-Shirt', 'Price': 10.0, 'Quantity'...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWhat we want is one row per item on the the order and the customer name to be in separate columns. The [json_normalize()](https://pandas.pydata.org/docs/reference/api/pandas.json_normalize.html) function can help here.\n\n::: {.callout-note}\nIt is important to note that `json_normalize()` does not take a file as input, but rather de-serialized json (i.e., a dict or list of dicts).\n:::\n\nAn example (note that we first need to load the file as JSON dict; for that, we'll use the `requests` module to download the data):\n\n::: {#483f3443 .cell execution_count=7}\n``` {.python .cell-code}\n# first down load the data\nimport requests\nresponse = requests.get(\"https://raw.githubusercontent.com/mafudge/datasets/master/json-samples/orders.json\")\njson_data = response.json()  #de-serialize\nprint('Original JSON data:')\nprint(json_data)\n# now load into a DataFrame\norders = pd.json_normalize(json_data)\nprint(\"\\nLoaded DataFrame:\")\norders\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal JSON data:\n[{'Customer': {'FirstName': 'Abby', 'LastName': 'Kuss'}, 'Items': [{'Name': 'T-Shirt', 'Price': 10.0, 'Quantity': 3}, {'Name': 'Jacket', 'Price': 20.0, 'Quantity': 1}]}, {'Customer': {'FirstName': 'Bette', 'LastName': 'Alott'}, 'Items': [{'Name': 'Shoes', 'Price': 25.0, 'Quantity': 1}, {'Name': 'Jacket', 'Price': 20.0, 'Quantity': 1}]}, {'Customer': {'FirstName': 'Chris', 'LastName': 'Peanugget'}, 'Items': [{'Name': 'T-Shirt', 'Price': 10.0, 'Quantity': 1}]}]\n\nLoaded DataFrame:\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Items</th>\n      <th>Customer.FirstName</th>\n      <th>Customer.LastName</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>[{'Name': 'T-Shirt', 'Price': 10.0, 'Quantity'...</td>\n      <td>Abby</td>\n      <td>Kuss</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>[{'Name': 'Shoes', 'Price': 25.0, 'Quantity': ...</td>\n      <td>Bette</td>\n      <td>Alott</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>[{'Name': 'T-Shirt', 'Price': 10.0, 'Quantity'...</td>\n      <td>Chris</td>\n      <td>Peanugget</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nBetter but this only processed nested `dict` and not nested `list`. We still need to handle the list of `Items`. To accomplish this we :\n\n1. Set the `record_path` to be the nested list `'Items'`. This tells `json_normalize()` to use that JSON key as the row level. So now we will have 5 rows (one for each item) instead of 3. \n2. Then we set the `meta` named argument to a `list` of each of the other values we wish to include, in this instance  last name and first name.\n\n*Note:* The `meta` syntax is a bit weird. It's a `list` of JSON paths (also represented as lists) to each item in the JSON. For example:\n\n    The meta Argument        ==> Matches This in the JSON           ==> And Displays As This Pandas Column\n    [\"Customer\",\"FirstName\"] ==> { \"Customer\" : { \"FirstName\": ...} ==> Customer.Firstname\n\n::: {#13d27091 .cell execution_count=8}\n``` {.python .cell-code}\norders = pd.json_normalize(json_data, record_path=\"Items\", meta=[[\"Customer\",\"FirstName\"],[\"Customer\",\"LastName\"]])\norders\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Price</th>\n      <th>Quantity</th>\n      <th>Customer.FirstName</th>\n      <th>Customer.LastName</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>T-Shirt</td>\n      <td>10.0</td>\n      <td>3</td>\n      <td>Abby</td>\n      <td>Kuss</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Jacket</td>\n      <td>20.0</td>\n      <td>1</td>\n      <td>Abby</td>\n      <td>Kuss</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Shoes</td>\n      <td>25.0</td>\n      <td>1</td>\n      <td>Bette</td>\n      <td>Alott</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Jacket</td>\n      <td>20.0</td>\n      <td>1</td>\n      <td>Bette</td>\n      <td>Alott</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>T-Shirt</td>\n      <td>10.0</td>\n      <td>1</td>\n      <td>Chris</td>\n      <td>Peanugget</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYes it seems complicated, because conceptually it is a bit complicated. Let's try another example, with some abstract values.\n\nIn the following example we want to generate a normalized table with 3 rows and 4 columns.\n\n- The rows are based on the `\"A\"` record_path, which has two sub-sets, `A1` and `A2`. There are three sets of `A` data: (101, 102); (111, 112); and (201, 202).\n- The meta data are based on columns `\"B\"`, and `\"C1\"`\n\n::: {#a933f903 .cell execution_count=9}\n``` {.python .cell-code}\njson_data = [\n    {\n        \"A\": [\n            {\"A1\": 101, \"A2\": 102},\n            {\"A1\": 111, \"A2\": 112}\n        ],\n        \"B\": 103,\n        \"C\": {\"C1\": 104}\n    },\n    {\n        \"A\": [\n            {\"A1\": 201, \"A2\": 202}\n        ],\n        \"B\": 203,\n        \"C\": {\"C1\": 204}\n    }\n]\n\ndf = pd.json_normalize(json_data, record_path=\"A\", meta=[\"B\", [\"C\", \"C1\"]])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A1</th>\n      <th>A2</th>\n      <th>B</th>\n      <th>C.C1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>101</td>\n      <td>102</td>\n      <td>103</td>\n      <td>104</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>111</td>\n      <td>112</td>\n      <td>103</td>\n      <td>104</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>201</td>\n      <td>202</td>\n      <td>203</td>\n      <td>204</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 3.2\n\nUse the `json_normalize` function to tabularize this JSON data:\n\n[https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/json-samples/employees.json](https://raw.githubusercontent.com/mafudge/datasets/refs/heads/master/json-samples/employees.json)\n\nThe final table should have these columns: `dept, age, firstname, lastname`.\n\n*Hint*: read the file using the `requests` module, like in the above example.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#290af3ab .cell execution_count=10}\n``` {.python .cell-code}\nimport requests\nimport pandas as pd\n\nresponse = requests.get(\"https://raw.githubusercontent.com/mafudge/datasets/master/json-samples/employees.json\")\nemployees = response.json()\nemployees_df = pd.json_normalize(employees, record_path=[\"employees\"], meta=[\"dept\"])\nemployees_df\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>firstName</th>\n      <th>lastName</th>\n      <th>age</th>\n      <th>dept</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>John</td>\n      <td>Doe</td>\n      <td>23</td>\n      <td>accounting</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mary</td>\n      <td>Smith</td>\n      <td>32</td>\n      <td>accounting</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sally</td>\n      <td>Green</td>\n      <td>27</td>\n      <td>sales</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Jim</td>\n      <td>Galley</td>\n      <td>41</td>\n      <td>sales</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n::::\n\n\n## Reading Excel files\n\nExcel files can be read using the [read_excel()](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html) function. For example:\n`pd.read_excel('file.xlsx', sheet_name=None)`\n\n::: {.callout-note}\nIn order to use the `read_excel` method, you need to additional install the optional Pandas dependency `openpyxl`. To do that using `pip`, run:\n```{bash}\npip install openpyxl\n```\n:::\n\nThis will read in all sheets as a `dict`, with the sheet names as the keys and the values as Pandas DataFrames representing the contents. An example using this with Streamlit:\n\n::: {#eea62b88 .cell execution_count=11}\n``` {.python .cell-code}\nimport streamlit as st\nimport pandas as pd\n\nst.title(\"Excel Example - multiple sheets\")\n\ncontents = pd.read_excel(\"https://github.com/mafudge/datasets/raw/refs/heads/master/excel-examples/books_of_interest.xlsx\", sheet_name=None)\n\n# names of sheets in the excel file its a dictionary\nsheets = list(contents.keys()) \n\n# make tabs for each sheet\ntabs = st.tabs(sheets)\n\n#loop through each tab and write the contents of the sheet to the tab\nfor i in range(len(tabs)):\n    df = contents[sheets[i]]\n    tabs[i].dataframe(df)\n```\n:::\n\n\n## Reading HTML Tables\n\nYou can scrape an HTML table off a webpage using the [read_html()](https://pandas.pydata.org/docs/reference/api/pandas.read_html.html) function. This will return a list of all HTML tables on the page, with each table as a `DataFrame`.\n\n\n::: {.callout-note}\nIn order to use the `read_html` method, you need to additional install the optional Pandas dependency `lxml`. To do that using `pip`, run:\n```{bash}\npip install lxml \n```\n:::\n\nFor example:\n\n::: {#7c7ba864 .cell execution_count=12}\n``` {.python .cell-code}\ncontents = pd.read_html(\"https://su-ist356-m003-fall-2025.github.io/course-home\")\nfor df in contents:\n    print(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Week         Dates                   Topic\n0      1    8/25, 8/29    Intro; CLI and Conda\n1      2           9/3       Python review - 1\n2      3     9/8, 9/10       Python review - 2\n3      4    9/15, 9/17                      UI\n4      5    9/22, 9/24      Data wrangling - 1\n5      6    9/29, 10/1      Data wrangling - 2\n6      7    10/6, 10/8      Data wrangling - 3\n7      8         10/15                  Exam 1\n8      9  10/20, 10/22            Web APIs - 1\n9     10  10/27, 10/29            Web APIs - 2\n10    11    11/3, 11/5        Web scraping - 1\n11    12  11/10, 11/12        Web scraping - 2\n12    13  11/17, 11/19  Data visualization - 1\n13    14    12/1, 12/3  Data visualization - 2\n14    15          12/8                  Exam 2\n15    16         12/15             Project due\n          Date                                         Unnamed: 1\n0    Mon. 8/25                                 First day of class\n1     Mon. 9/1                               Labor day - No class\n2    Mon. 9/15  Academic/Financial drop deadline; Religious ob...\n3   Mon. 10/13                              Fall break - No class\n4   Fri. 11/21                                Withdrawal deadline\n5  11/23-11/30                      Thanksgiving Break - No class\n6    Mon. 12/8                                  Last day of class\n```\n:::\n:::\n\n\nAn example of turning this into a Streamlit app:\n\n::: {#d5ae1ae6 .cell execution_count=13}\n``` {.python .cell-code}\nimport streamlit as st\nimport pandas as pd\n\nst.title(\"HTML Example - multiple tables\")\n\nurl = \"https://su-ist356-m003-fall-2025.github.io/course-home\"\ncontents = pd.read_html(url)\n\n# There are 2 tables on this page, but we don't know this\ntables_count = len(contents)\n\nst.write(f\"Found {tables_count} tables on the page\")\n\n# make tabs for each HTML Table\ntab_names = [ f\"HTML Table {i}\" for i in range(tables_count)]\ntabs = st.tabs(tab_names)\n\n# for each tab, show its table\nfor i in range(len(tabs)):\n    df = contents[i]\n    tabs[i].dataframe(df)\n```\n:::\n\n\n## Writing Dataframes\n\n- Once the data is in a `pd.DataFrame` is can be written out with one of the `to()` methods such as `to_csv()`, `to_json()`, `to_parquet()` etc.\n- This makes pandas a superior data conversion tool.\n- If you include a file, the `to()` method writes to the file, otherwise the binary contents are returned.\n- https://pandas.pydata.org/pandas-docs/stable/reference/io.html \n\nAn example of converting the above Excel spreadsheet to CSV:\n\n::: {#28c05f03 .cell execution_count=14}\n``` {.python .cell-code}\ncontents = pd.read_excel(\"https://github.com/mafudge/datasets/raw/refs/heads/master/excel-examples/books_of_interest.xlsx\", sheet_name=None)\nfor sheetname, df in contents.items():\n    # convert spaces to underscores for filenames\n    sheetname = sheetname.replace(' ', '_')\n    filename = f'books_of_interest-{sheetname}.csv'\n    df.to_csv(filename, header=True, index=False)\n```\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 3.3\n\nWrite a Streamlit app that will accept an Excel file via file uploader and then write out a record-oriented JSON file from the first tab in the excel file.\n\nThe program should display the contents of the dataframe and provide a download button for the converted the csv file. \n*Hints*:\n - To provide the ability to upload a file, see: [st.file_uploader](https://docs.streamlit.io/develop/api-reference/widgets/st.file_uploader)\n - To provide the ability to download a file, see: [st.download_button](https://docs.streamlit.io/develop/api-reference/widgets/st.download_button)\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#e35a4e5c .cell execution_count=15}\n``` {.python .cell-code}\nimport requests\nimport pandas as pd\nimport streamlit as st\n\nst.title(\"Excel to JSON\")\n\nuploaded_file = st.file_uploader(\"Upload an EXCEL file\", type=[\"xlsx\"])\n\nif uploaded_file:\n    df = pd.read_excel(uploaded_file.getvalue())\n    st.dataframe(df)\n    json_file = df.to_json(orient=\"records\", index=False)\n    json_filename = uploaded_file.name.replace('.xlsx', '.json')\n    download = st.download_button(f\"Download {json_filename}\", data=json_file, file_name=json_filename)\n```\n:::\n\n\n:::\n::::\n\n\n## Challenge 3-2-3\n\n### Excel to JSON \n\n",
    "supporting": [
      "pandas-2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}