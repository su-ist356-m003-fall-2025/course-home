{
  "hash": "df05072e3ef57e198bc9710d3c3dbd44",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"2. Introduction to Pandas: Series and DataFrames\"\njupyter: python3\n---\n\n## What is Pandas?\n\n[Pandas](https://pandas.pydata.org) is a Python library for working with tabular data. Pandas is short for PANeled DAta.\n\nPandas is like a programmable spreadheet. It is used by programmers to wrangle data (sort, filter, clean, enhance, etc).\n\n## Pandas Series and DataFrame\n\nThe two fundamental compoents of Pandas are the `Series` and `DataFrame`\n\n- a `Series` is a list of values with labels. This creates a **column** of data\n- a `DataFrame` is a collection of series. This creates a **table** of data\n\n### Null / No Value\n\nThe constant `np.nan` is used to represent \"no value\"\n\n::: {#7b275e16 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n\n## Series\n\nA `Series` is a named list of values.  \n\nThe series has an index, too to reference each value. The default index is a zero based, similar to a python list.\n\n::: {#79db1bec .cell execution_count=2}\n``` {.python .cell-code}\ngrades = pd.Series(data=[100,80,90,np.nan,100], name=\"Midterm Grades\")\ngrades\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n0    100.0\n1     80.0\n2     90.0\n3      NaN\n4    100.0\nName: Midterm Grades, dtype: float64\n```\n:::\n:::\n\n\n::: {#2a10b8c0 .cell execution_count=3}\n``` {.python .cell-code}\n# The the value at index 2\ngrades[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nnp.float64(90.0)\n```\n:::\n:::\n\n\nThe index can be anyting . Here's the same grades with student names as the index.\n\n::: {#a582e3a6 .cell execution_count=4}\n``` {.python .cell-code}\ngrades2 = pd.Series( data=[100,80,90,np.nan,100], \n                    name=\"Midterm Grades\",\n                    index=[\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"])\ngrades2\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nAlice      100.0\nBob         80.0\nCharlie     90.0\nDavid        NaN\nEve        100.0\nName: Midterm Grades, dtype: float64\n```\n:::\n:::\n\n\n::: {#0da8be69 .cell execution_count=5}\n``` {.python .cell-code}\n# Get Charlie's grade\ngrades2[\"Charlie\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nnp.float64(90.0)\n```\n:::\n:::\n\n\n#### Series Vectorized Functions\n\nLike NumPy arrays, you can perform element-wise mathematical operations on Pandas series without needing for loops (i.e., [vectorization](https://en.wikipedia.org/wiki/Array_programming)). For example:\n\n::: {#f20247c4 .cell execution_count=6}\n``` {.python .cell-code}\n# add 5 points to all the grades\ngrades3 = grades2 + 5\nprint(grades3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice      105.0\nBob         85.0\nCharlie     95.0\nDavid        NaN\nEve        105.0\nName: Midterm Grades, dtype: float64\n```\n:::\n:::\n\n\n::: {#7e3cae3e .cell execution_count=7}\n``` {.python .cell-code}\n# square the grades\ngradesq = grades2**2\nprint(gradesq)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice      10000.0\nBob         6400.0\nCharlie     8100.0\nDavid          NaN\nEve        10000.0\nName: Midterm Grades, dtype: float64\n```\n:::\n:::\n\n\n::: {#22c735d9 .cell execution_count=8}\n``` {.python .cell-code}\n# add two series together\ngrades4 = grades2 + grades3\nprint(grades4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlice      205.0\nBob        165.0\nCharlie    185.0\nDavid        NaN\nEve        205.0\nName: Midterm Grades, dtype: float64\n```\n:::\n:::\n\n\nPandas series also have a number of vectorized methods that you can call on the series themselves, again like NumPy arrays. Some examples:\n\n::: {#51fb6164 .cell execution_count=9}\n``` {.python .cell-code}\nprint(\"Highest grade:\", grades.max())\nprint(\"Average grade:\", grades.mean())\nprint(\"lowest grade:\", grades.min())\nprint(\"Sum of grades:\", grades.sum())\nprint(\"Count of grades\", grades.count())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHighest grade: 100.0\nAverage grade: 92.5\nlowest grade: 80.0\nSum of grades: 370.0\nCount of grades 4\n```\n:::\n:::\n\n\n#### Other Series Functions\n\nWe can use the `unique()` method function to return only the non-duplicate values from the series. \n\nThe `value_counts()` method function adds up values, creating a new series where the index is the value and the value is the count.\n\n For example consider the following series:\n\n::: {#12981898 .cell execution_count=10}\n``` {.python .cell-code}\nvotes = pd.Series(data=[ 'y','y','y','n','y',np.nan,'n','n','y'], name=\"Vote\")\nprint(\"deduplicate the votes:\", votes.unique())\nprint(\"counts by value:\", votes.value_counts())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndeduplicate the votes: ['y' 'n' nan]\ncounts by value: Vote\ny    5\nn    3\nName: count, dtype: int64\n```\n:::\n:::\n\n\n### Comparison to NumPy\n\nIn many ways, you can think of a Pandas series as being like a NumPy array (in fact, series are built on top of NumPy arrays). It even has similar performance. For example:\n\n::: {#20f29893 .cell execution_count=11}\n``` {.python .cell-code}\na = np.arange(1000000)\naseries = pd.Series(a)\n```\n:::\n\n\n::: {#8918793a .cell execution_count=12}\n``` {.python .cell-code}\n%timeit a.mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n531 μs ± 761 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n```\n:::\n:::\n\n\n::: {#d7719ab7 .cell execution_count=13}\n``` {.python .cell-code}\n%timeit aseries.mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n544 μs ± 908 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n```\n:::\n:::\n\n\nHowever, unlike NumPy arrays, **Pandas series can only be one dimensional**. Example:\n\n::: {#94ca6828 .cell execution_count=14}\n``` {.python .cell-code}\n# 2D NumPy array? No problem!\na = np.ones((1000, 1000))\nprint(a.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1000, 1000)\n```\n:::\n:::\n\n\n::: {#f2472406 .cell execution_count=15}\n``` {.python .cell-code}\n# 2D Pandas series? Nope!\naseries = pd.Series(a)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">ValueError</span>                                Traceback (most recent call last)\n<span class=\"ansi-cyan-fg\">Cell</span><span class=\"ansi-cyan-fg\"> </span><span class=\"ansi-green-fg\">In[15]</span><span class=\"ansi-green-fg\">, line 2</span>\n<span class=\"ansi-green-fg\">      1</span> <span style=\"font-style:italic;color:rgb(95,135,135)\"># 2D Pandas series? Nope!</span>\n<span class=\"ansi-green-fg\">----&gt; </span><span class=\"ansi-green-fg\">2</span> aseries = <span class=\"ansi-yellow-bg\">pd</span><span class=\"ansi-yellow-bg\">.</span><span class=\"ansi-yellow-bg\">Series</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">a</span><span class=\"ansi-yellow-bg\">)</span>\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/series.py:584</span>, in <span class=\"ansi-cyan-fg\">Series.__init__</span><span class=\"ansi-blue-fg\">(self, data, index, dtype, name, copy, fastpath)</span>\n<span class=\"ansi-green-fg\">    582</span>         data = data.copy()\n<span class=\"ansi-green-fg\">    583</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">else</span>:\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">584</span>     data = <span class=\"ansi-yellow-bg\">sanitize_array</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">data</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">index</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">dtype</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">copy</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    586</span>     manager = _get_option(<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">mode.data_manager</span><span class=\"ansi-yellow-fg\">\"</span>, silent=<span style=\"font-weight:bold;color:rgb(0,135,0)\">True</span>)\n<span class=\"ansi-green-fg\">    587</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> manager == <span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">block</span><span class=\"ansi-yellow-fg\">\"</span>:\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/construction.py:656</span>, in <span class=\"ansi-cyan-fg\">sanitize_array</span><span class=\"ansi-blue-fg\">(data, index, dtype, copy, allow_2d)</span>\n<span class=\"ansi-green-fg\">    653</span>             subarr = cast(np.ndarray, subarr)\n<span class=\"ansi-green-fg\">    654</span>             subarr = maybe_infer_to_datetimelike(subarr)\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">656</span> subarr = <span class=\"ansi-yellow-bg\">_sanitize_ndim</span><span class=\"ansi-yellow-bg\">(</span><span class=\"ansi-yellow-bg\">subarr</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">data</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">dtype</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">index</span><span class=\"ansi-yellow-bg\">,</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">allow_2d</span><span class=\"ansi-yellow-bg\">=</span><span class=\"ansi-yellow-bg\">allow_2d</span><span class=\"ansi-yellow-bg\">)</span>\n<span class=\"ansi-green-fg\">    658</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(subarr, np.ndarray):\n<span class=\"ansi-green-fg\">    659</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># at this point we should have dtype be None or subarr.dtype == dtype</span>\n<span class=\"ansi-green-fg\">    660</span>     dtype = cast(np.dtype, dtype)\n\n<span class=\"ansi-cyan-fg\">File </span><span class=\"ansi-green-fg\">/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pandas/core/construction.py:715</span>, in <span class=\"ansi-cyan-fg\">_sanitize_ndim</span><span class=\"ansi-blue-fg\">(result, data, dtype, index, allow_2d)</span>\n<span class=\"ansi-green-fg\">    713</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> allow_2d:\n<span class=\"ansi-green-fg\">    714</span>         <span style=\"font-weight:bold;color:rgb(0,135,0)\">return</span> result\n<span class=\"ansi-green-fg\">--&gt; </span><span class=\"ansi-green-fg\">715</span>     <span style=\"font-weight:bold;color:rgb(0,135,0)\">raise</span> <span style=\"font-weight:bold;color:rgb(215,95,95)\">ValueError</span>(\n<span class=\"ansi-green-fg\">    716</span>         <span class=\"ansi-yellow-fg\">f</span><span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">Data must be 1-dimensional, got ndarray of shape </span><span style=\"font-weight:bold;color:rgb(175,95,135)\">{</span>data.shape<span style=\"font-weight:bold;color:rgb(175,95,135)\">}</span><span class=\"ansi-yellow-fg\"> instead</span><span class=\"ansi-yellow-fg\">\"</span>\n<span class=\"ansi-green-fg\">    717</span>     )\n<span class=\"ansi-green-fg\">    718</span> <span style=\"font-weight:bold;color:rgb(0,135,0)\">if</span> is_object_dtype(dtype) <span style=\"font-weight:bold;color:rgb(175,0,255)\">and</span> <span style=\"color:rgb(0,135,0)\">isinstance</span>(dtype, ExtensionDtype):\n<span class=\"ansi-green-fg\">    719</span>     <span style=\"font-style:italic;color:rgb(95,135,135)\"># i.e. NumpyEADtype(\"O\")</span>\n<span class=\"ansi-green-fg\">    721</span>     result = com.asarray_tuplesafe(data, dtype=np.dtype(<span class=\"ansi-yellow-fg\">\"</span><span class=\"ansi-yellow-fg\">object</span><span class=\"ansi-yellow-fg\">\"</span>))\n\n<span class=\"ansi-red-fg\">ValueError</span>: Data must be 1-dimensional, got ndarray of shape (1000, 1000) instead</pre>\n```\n:::\n\n:::\n:::\n\n\n## DataFrame\n\nFor 2D data, you use a Pandas **DataFrame**. A `DataFrame` is a table representation of data. It is the primary use case for pandas itself. A `DataFrame` is simply a collection of `Series` that share a common index. It's like a programmable spreadsheet: it has rows and columns which can be accessed and manipulated with Python.\n\nAn example:\n\n::: {#66fdcd0d .cell execution_count=16}\n``` {.python .cell-code}\nnames = pd.Series( data = ['Allen','Bob','Chris','Dave','Ed','Frank','Gus'])\ngpas = pd.Series( data = [4.0, np.nan, 3.4, 2.8, 2.5, 3.8, 3.0])\nyears = pd.Series( data = ['So', 'Fr', 'Fr', 'Jr', 'Sr', 'Sr', 'Fr'])\nseries_dict = { 'Name':  names, 'GPA': gpas, 'Year' : years }  # dict of Series, keys are the series names\nstudents = pd.DataFrame( series_dict )\nstudents\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>GPA</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Allen</td>\n      <td>4.0</td>\n      <td>So</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>NaN</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>3.4</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dave</td>\n      <td>2.8</td>\n      <td>Jr</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ed</td>\n      <td>2.5</td>\n      <td>Sr</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Frank</td>\n      <td>3.8</td>\n      <td>Sr</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Gus</td>\n      <td>3.0</td>\n      <td>Fr</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Other Ways to create dataframes:\n\n::: {#6ebd2e17 .cell execution_count=17}\n``` {.python .cell-code}\n# Lists of lists\npd.DataFrame([['Tom', 7], ['Mike', 15], ['Tiffany', 3]])\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mike</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Tiffany</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#30e935a9 .cell execution_count=18}\n``` {.python .cell-code}\n# Dictionary\npd.DataFrame({\"Name\": ['Tom', 'Mike', 'Tiffany'], \"Number\": [7, 15, 3]})\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Tom</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mike</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Tiffany</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFor more, see the [Pandas documentation on DataFrames](https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dataframe ).\n\n### DataFrames share the index\n\nThe dataframe is stitched together from values macthing on their index. For example:\n\n::: {#282e2812 .cell execution_count=19}\n``` {.python .cell-code}\ngpas = pd.Series(data=[4.0, np.nan, 3.4, 2.8, 2.5 ], index=['Allen','Bob','Chris','Ed', 'Frank'])\nyrs = pd.Series(data=['So', 'Fr', 'Jr', 'Sr'], index=['Allen','Bob','Dave', 'Frank'])\nstudents = pd.DataFrame( {'GPA': gpas, 'Year': yrs})\nstudents\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GPA</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Allen</th>\n      <td>4.0</td>\n      <td>So</td>\n    </tr>\n    <tr>\n      <th>Bob</th>\n      <td>NaN</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>Chris</th>\n      <td>3.4</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Dave</th>\n      <td>NaN</td>\n      <td>Jr</td>\n    </tr>\n    <tr>\n      <th>Ed</th>\n      <td>2.8</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Frank</th>\n      <td>2.5</td>\n      <td>Sr</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Accessing elements with indexing\n\nYou can access columns in the `DataFrame` using the names of the series, much in the same way you would a dictionary. For example:\n\n::: {#c8e12b09 .cell execution_count=20}\n``` {.python .cell-code}\nstudents['GPA'] # slicing by row label\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nAllen    4.0\nBob      NaN\nChris    3.4\nDave     NaN\nEd       2.8\nFrank    2.5\nName: GPA, dtype: float64\n```\n:::\n:::\n\n\nSince the values in a `DataFrame` are `Series`, you can then access a particular value using the `Series` index. For example, since the `Series` data in `studentsn` were indexed by name, we can get Chris's grade by doing:\n\n::: {#d22eb536 .cell execution_count=21}\n``` {.python .cell-code}\nstudents['GPA']['Chris']\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nnp.float64(3.4)\n```\n:::\n:::\n\n\nMuch like a `Series` is like a special NumPy array with fancy indexing (and other useful features), a `DataFrame` is like a special type of dictionary, with some extra features that make handling datasets much easier. In fact, as we'll see below, a `DataFrame` is more like a cross between a dictionary and a NumPy array that make it *excel* at data wrangling. (pun intended)\n\n#### Accessing elements with loc and iloc\n\nThe `loc[index, col]` and `iloc[row_pos, col_pos]` properties allow you to slice the dataframe. `loc` uses the index and column names, while `iloc` uses ordinal positions starting at zero.\n\nHere are some examples, using `studentsn`\n\n::: {#7acd8461 .cell execution_count=22}\n``` {.python .cell-code}\n# Examples using loc\nprint(\"loc: Get the Chris' GPA: \", students.loc['Chris', 'GPA'])\nprint(\"loc: Get the Year of the last student (Frank): \", students.loc['Frank', 'Year'])\n\n# Same examples using iloc\nprint(\"iloc: Get the GPA of the student at row 2 (Chris): \", students.iloc[2, 0])\nprint(\"iloc: Get the Year of the last student (Frank): \", students.iloc[-1, 1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nloc: Get the Chris' GPA:  3.4\nloc: Get the Year of the last student (Frank):  Sr\niloc: Get the GPA of the student at row 2 (Chris):  3.4\niloc: Get the Year of the last student (Frank):  Sr\n```\n:::\n:::\n\n\n::: {#2429a3e7 .cell execution_count=23}\n``` {.python .cell-code}\n# You can also slice using loc and iloc\nprint(\"loc: last two rows:\\n\", students.loc['Ed':, 'GPA':'Year'])\nprint()\nprint(\"iloc: last two rows:\\n\", students.iloc[-2:, 0:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nloc: last two rows:\n        GPA Year\nEd     2.8  NaN\nFrank  2.5   Sr\n\niloc: last two rows:\n        GPA Year\nEd     2.8  NaN\nFrank  2.5   Sr\n```\n:::\n:::\n\n\n#### Null Checks\n\nuse `isna()` to check for `np.nan`. \n\n::: {#e03bcd4c .cell execution_count=24}\n``` {.python .cell-code}\nstudents[students.GPA.isna()]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GPA</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Bob</th>\n      <td>NaN</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>Dave</th>\n      <td>NaN</td>\n      <td>Jr</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.1\n\nCreate this `DataFrame`:\n\n```{text}\n   s1   s2 s3\na   1  2.2  q\nb   2  NaN  q\nc   3  3.0  z\nd   4  1.5  z\n```\n\nIn other words, the frame should have 3 columns named `s1`, `s2`, and `s3`, and the rows should be indexed with the strings `a`, `b`, `c`, and `d`. Use `Series` to create it to make sure the index is correct. Print the full the `DataFrame` (so that you can get back something like the above), then print the the first 2 rows and columns using `loc` or `iloc`.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#0f15f7f0 .cell execution_count=25}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ns1 = pd.Series(data = [1, 2, 3, 4], index=['a', 'b', 'c', 'd'], name='s1')\ns2 = pd.Series(data = [2.2, np.nan, 3.0, 1.5], index=['a', 'b', 'c', 'd'], name='s2')\ns3 = pd.Series(data = ['q', 'q', 'z', 'z'], index=['a', 'b', 'c', 'd'], name='s3')\n\ndf = pd.DataFrame({'s1':s1,'s2':s2,'s3':s3})\nprint(df)\n\nprint(df.loc['a':'b', 's1':'s2'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   s1   s2 s3\na   1  2.2  q\nb   2  NaN  q\nc   3  3.0  z\nd   4  1.5  z\n   s1   s2\na   1  2.2\nb   2  NaN\n```\n:::\n:::\n\n\n:::\n::::\n\n\n## Basic Dataframe operations\n\n- `info()` provide names of columns, counts of non-null values in each columns, and data types.\n- `describe()` for each numerical column provide some basic statistics (min, max, mean, and quartiles).\n- `head(n=5)` view the FIRST `n` rows in the dataframe (defaults to 5)\n- `tail(n=5)` view the LAST `n` rows in the dataframe (defaults to 5)\n- `sample(n=1)` view a random `n` rows from the dataframe (defautls to 1)\n- `.columns` retrieve a list of columns in the dataframe\n\nTo illustrate this, we'll load a comma-separated-value (CSV) file [customers.csv](customers.csv) that containing some customer data. We can load the file directly as a `DataFrame` using Panda's [read_csv](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas.read_csv) function. Notice that we can pass a URL to the function. We don't need to first download, Pandas will take care of that for us all under the hood!\n\n::: {#45097504 .cell execution_count=26}\n``` {.python .cell-code}\ncustomers = pd.read_csv('https://raw.githubusercontent.com/su-ist356-m003-fall-2025/course-home/refs/heads/main/04_data_wrangling/customers.csv')\nprint(customers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      First        Last                     Email Gender  Last IP Address  \\\n0        Al      Fresco        afresco@dayrep.com      M    74.111.18.161   \n1      Abby        Kuss           akuss@rhyta.com      F    23.80.125.101   \n2     Arial       Photo         aphoto@dayrep.com      F       24.0.14.56   \n3     Bette       Alott          balott@rhyta.com      F   56.216.127.219   \n4     Barb       Barion     bbarion@superrito.com      F     38.68.15.223   \n5     Barry  DeHatchett    bdehatchett@dayrep.com      M    23.192.215.78   \n6      Bill     Melator       bmelator@einrot.com      M     24.11.125.10   \n7     Candi       Cayne          ccayne@rhyta.com      F      24.39.14.15   \n8     Carol        Ling       cling@superrito.com      F    23.180.242.66   \n9       Cam         Rha           crha@einrot.com      M      24.1.25.140   \n10      Dan     Delyons       ddelyons@dayrep.com      M    24.38.224.161   \n11     Erin     Detyers       edetyers@dayrep.com      F     70.209.14.54   \n12    Euron   Tasomthin  etasomthin@superrito.com      M    68.199.40.156   \n13   Justin        Case          jcase@dayrep.com      M    23.192.215.44   \n14     Jean       Poole         jpoole@dayrep.com      F     23.182.25.40   \n15      Lee    Hvmeehom      lhvmeehom@einrot.com      F      215.82.23.2   \n16     Lisa  Karfurless    lkarfurless@dayrep.com      F    172.189.252.8   \n17     Mary     Melator        mmelator@rhyta.com      F       23.88.15.5   \n18     Mike      Rofone        mrofone@dayrep.com      M     23.224.160.4   \n19     Oren     Jouglad       ojouglad@einrot.com      M  128.122.140.238   \n20     Phil       Meaup         pmeaup@dayrep.com      M    23.83.132.200   \n21    Rowan      Deboat        rdeboat@dayrep.com      M      23.84.32.22   \n22      Ray     Ovlight       rovlight@dayrep.com      M     74.111.18.59   \n23     Sara      Bellum     sbellum@superrito.com      F     74.111.6.173   \n24      Sal        Ladd       sladd@superrito.com      M    23.112.202.16   \n25  Seymour       Ofewe         sofewe@dayrep.com      M      98.29.25.44   \n26       Ty       Anott          tanott@rhyta.com      M      23.230.12.5   \n27    Tally       Itupp      titupp@superrito.com      F    24.38.114.105   \n28      Tim        Pani       tpani@superrito.com      M    23.84.132.226   \n29   Victor        Rhee          vrhee@einrot.com      M   23.112.232.160   \n\n           City State  Total Orders  Total Purchased  Months Customer  \n0      Syracuse    NY             1               45                1  \n1       Phoenix    AZ             1               25                2  \n2        Newark    NJ             1              680                1  \n3       Raleigh    NC             6              560               18  \n4        Dallas    TX             4             1590                1  \n5        Boston    MA             1               15                6  \n6          Orem    UT             9             6090               35  \n7      Portland    ME             1              620                2  \n8      Syracuse    NY             2              440                6  \n9       Chicago    IL             0                0                1  \n10    Greenwich    CT             2             2570               10  \n11        Tampa    FL             5             1105               38  \n12    Hempstead    NY            13             4630               28  \n13       Boston    MA             3             1050                1  \n14     Kingston    NY             7              185               12  \n15     Columbus    OH             9              207               18  \n16      Fairfax    VA             6              250               27  \n17  Los Angeles    CA             8             4275               40  \n18     Cheyenne    WY             0                0                0  \n19     New York    NY            12             4500               36  \n20      Phoenix    AZ             4              930               24  \n21       Topeka    KS             1             3500               42  \n22     Syracuse    NY             6              125               42  \n23   Alexandria    VA             2              189                2  \n24    Rochester    NY            14              594               10  \n25    Cleveland    OH             9             1190                3  \n26     San Jose    CA             1               50                3  \n27    Sea Cliff    NY            11              380               42  \n28      Buffalo    NY             0                0                1  \n29    Green Bay    WI             0                0                2  \n```\n:::\n:::\n\n\n### Display the dataframe in Streamlit\n\nYou can use the `st.dataframe()` function to display a `DataFrame` in Streamlit.  \n\nHere is an example:\n\n::: {#ac81a1af .cell execution_count=27}\n``` {.python .cell-code}\nimport streamlit as st\nimport pandas as pd\n\nst.title(\"Dataframe Example\")\n\ncustomers = pd.read_csv('https://raw.githubusercontent.com/su-ist356-m003-fall-2025/course-home/refs/heads/main/04_data_wrangling/customers.csv')\n\nst.dataframe(customers.head(20))\nst.dataframe(customers.describe())\n```\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.2\n\nSimilar to the previous example, load this file into a `customers` dataframe:\n\nhttps://raw.githubusercontent.com/su-ist356-m003-fall-2025/course-home/refs/heads/main/04_data_wrangling/customers.csv\n\nThen create a radio widget to allow the user to select Head or Tail and a number input widget to enter a number of lines.\n\nOutput the head or tail of the dataframe and only show the number of lines input.\n\n*Hint*: Use Streamlit's [radio](https://docs.streamlit.io/develop/api-reference/widgets/st.radio) and [number_input](https://docs.streamlit.io/develop/api-reference/widgets/st.number_input) functions. \n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#a86a9de0 .cell execution_count=28}\n``` {.python .cell-code}\nimport streamlit as st\nimport pandas as pd\n\nst.title('My first dataframe')\n\ncustomers = pd.read_csv('https://raw.githubusercontent.com/su-ist356-m003-fall-2025/course-home/refs/heads/main/04_data_wrangling/customers.csv')\n\nradio = st.radio('Show:', options=[ 'Head', 'Tail'], index=0)\nrows = st.number_input('Rows:', min_value=1, max_value=len(customers), value=5)\nif radio == 'Head':\n    st.dataframe(customers.head(rows))\nelse:\n    st.dataframe(customers.tail(rows))\n```\n:::\n\n\n:::\n::::\n\n\n### Selecting Rows and Columns\n\nWe can pair down the output of a dataframe by using:\n\n- a `list` of column names to select columns.\n- a `boolean index` to select matching rows.\n\n::: {#20c63672 .cell execution_count=29}\n``` {.python .cell-code}\ndata_dict = { \n    'Name':  ['Allen','Bob','Chris','Dave','Ed','Frank','Gus'], \n    'GPA': [4.0, np.nan, 3.4, 2.8, 2.5, 3.8, 3.0], \n    'Year' : ['So', 'Fr', 'Fr', 'Jr', 'Sr', 'Sr', 'Fr'] } \nstudents = pd.DataFrame( data_dict )\nstudents\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>GPA</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Allen</td>\n      <td>4.0</td>\n      <td>So</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>NaN</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>3.4</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dave</td>\n      <td>2.8</td>\n      <td>Jr</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ed</td>\n      <td>2.5</td>\n      <td>Sr</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Frank</td>\n      <td>3.8</td>\n      <td>Sr</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Gus</td>\n      <td>3.0</td>\n      <td>Fr</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Selecting Columns\n\nThis example just gets the name and GPA columns\n\n::: {#45a077c2 .cell execution_count=30}\n``` {.python .cell-code}\ncolumns_to_show = ['Name', 'GPA']\nstudents[columns_to_show]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>GPA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Allen</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>3.4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dave</td>\n      <td>2.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ed</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Frank</td>\n      <td>3.8</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Gus</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Getting the freshmen using a boolean index\n\nconsider the following:\n\n::: {#27d41629 .cell execution_count=31}\n``` {.python .cell-code}\nstudents['Year'] == 'Fr'\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n0    False\n1     True\n2     True\n3    False\n4    False\n5    False\n6     True\nName: Year, dtype: bool\n```\n:::\n:::\n\n\nThis it called a `boolean index`. The boolean expression is evaluted for each index in the `DataFrame`. It's similar to the boolean \"mask\" array we used for extracting values from an array in the [NumPy](numpy_basics.qmd) unit.\n\nWhen we apply the boolean index to the dataframe, only the rows where the index evaluates to `True` are returned.\n\n::: {#5b36da75 .cell execution_count=32}\n``` {.python .cell-code}\nstudents[students['Year'] == 'Fr'] \n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>GPA</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>NaN</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>3.4</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Gus</td>\n      <td>3.0</td>\n      <td>Fr</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLikewise we can assign these variables for clarity\n\n::: {#1939cc92 .cell execution_count=33}\n``` {.python .cell-code}\nonly_freshmen_index = students['Year'] == 'Fr'\nonly_freshmen = students[only_freshmen_index]\nonly_freshmen\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>GPA</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>NaN</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>3.4</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Gus</td>\n      <td>3.0</td>\n      <td>Fr</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### And Or and Not with Boolean indexes\n\nWhat if we want freshmen or seniors? We cannot use `or` in this case, instead we must use the python bitwise or operator. This is because the series contains multiple values.\n\n**Bitwise Operators** \n\n- and `&`\n- or `|`\n- not `~`\n\nNote: `()` are required between each bitwise operator.\n\n::: {#e4213da6 .cell execution_count=34}\n``` {.python .cell-code}\n# freshmen and seniors\nonly_freshmen_seniors = (students['Year'] == 'Fr') | (students['Year'] == 'Sr')\nstudents[only_freshmen_seniors]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>GPA</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>NaN</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>3.4</td>\n      <td>Fr</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ed</td>\n      <td>2.5</td>\n      <td>Sr</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Frank</td>\n      <td>3.8</td>\n      <td>Sr</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Gus</td>\n      <td>3.0</td>\n      <td>Fr</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Putting it Together\n\nGet the name and GPA of only the freshmen that have a GPA stored (i.e., for which the GPA is not a NaN):\n\n::: {#47f02928 .cell execution_count=35}\n``` {.python .cell-code}\ncols = ['Name', 'GPA']\nfr_with_gpa = (students['Year'] == 'Fr') & (students['GPA'].notna())\nstudents[fr_with_gpa][cols]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>GPA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>Chris</td>\n      <td>3.4</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Gus</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.3\n\nSimilar to the previous example, load this file into a `customers` dataframe:\n\nhttps://raw.githubusercontent.com/su-ist356-m003-fall-2025/course-home/refs/heads/main/04_data_wrangling/customers.csv\n\nThen:\n\n1. Create a radio widget to allow the user to select \"M\" or \"F\" for gender,\n\n2. a multi-select widget to pick which columns to display (*Hint*: use Streamlit's [multiselect](https://docs.streamlit.io/develop/api-reference/widgets/st.multiselect) method),\n\n3. and filter the rows to match the gender and selected columns.\n\nDisplay the dataframe in the Streamlit app.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#9ec7c062 .cell execution_count=36}\n``` {.python .cell-code}\nimport streamlit as st\nimport pandas as pd\n\nst.title('Customers')\ncustomers = pd.read_csv('https://raw.githubusercontent.com/su-ist356-m003-fall-2025/course-home/refs/heads/main/04_data_wrangling/customers.csv')\nradio = st.radio('Gender:', options=[ 'M', 'F'], index=0)\ncols = st.multiselect('Columns:', options=customers.columns)\ngender_index = customers['Gender'] == radio\nst.dataframe(customers[gender_index][cols])\n```\n:::\n\n\n:::\n::::\n\n",
    "supporting": [
      "pandas-1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}