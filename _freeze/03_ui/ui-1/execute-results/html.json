{
  "hash": "e6f3c168cabb8e9249a6f677ab98d1d1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"1. Interaction in Jupyter using ipywidgets\"\njupyter: python3\n---\n\n::: {.callout-note}\n\nTo do this tutorial you will need `ipywidgets` installed in your conda environment. To do that:\n\n1.  Open a terminal (from in VS Code, click \"Terminal\" -> \"New Terminal\").\n\n1.  Activate your `ist356` conda environment by running:\n\n    ```bash\n    conda activate ist356\n    ```\n\n1.  Install `ipywidgets` by either running:\n\n    ```bash\n    pip install ipywidgets\n    ```\n\n    or:\n\n    ```bash\n    conda install -c conda-forge -y ipywidgets\n    ```\n\n:::\n\n\n## Notebook widgets:  ipywidgets\n\nThe jupyter notebook widgets create better UI interactions in notebooks. This is called the ipywidgets library. There is a lot to this library but we will keep our interactions simple.\n\nTo replace `input()` statements we use the `interact_manual` decorator function. Like a hat decorates your head, decorator function adds code to another function.\n\n`interact_manual` decorator does the following:\n\n- generates a *textbox* for any string input\n- generates a *slider* for any int/float input\n- generates a *dropdown* for any list input\n- generates a *button* titled \"Run interact\"\n\nWhen the **button is clicked** the code inside the decorated function is executed and the widget values are used as input. Use `display()` instead of `print()` for output.\n\n::: {#e761efd1 .cell execution_count=1}\n``` {.python .cell-code}\n# Necessary imports to make this work\nfrom IPython.display import display\nfrom ipywidgets import interact_manual\n```\n:::\n\n\n::: {#0c447a72 .cell execution_count=2}\n``` {.python .cell-code}\n# Example:\nvals = [ 'red', 'white', 'blue'] # this is a list type, it will generate a dropdown widget\nmin, max, step = 0, 20, 0.5      # this is the range of the slider, and the steps\ntext = \"testing\"                 # this is a string type, it will generate a textbox\n\n@interact_manual(color=vals, grade=(min,max,step), name=text) # DECORATOR function with values\ndef on_click(color, grade, name):                             # DECORATED function. This code \n    display(color)                                            # runs when the button is clicked \n    display(grade)                                            # (thus the name on_click)\n    display(name)\n```\n:::\n\n\n::: {.callout-note}\n\nFor more complex interactions we will use the streamlit library\n\n:::\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 1.1\n\nCreate a simple widget interaction that will display student status for their GPA. The widget should take as inputs:\n\n- the student's name;\n- their major: one of \"IMT\", \"IST\", or \"ADA\";\n- a gpa between 0.0 and 4.0.\n\nThe widget should process:\n\n- when gpa < 1.8 then status is \"probation\"\n- when gpa > 3.4 then status is \"deans list\"\n- else status is \"no list\".\n\nThe widget should then display the following statement:\n\n::: {#77adb99d .cell execution_count=3}\n``` {.python .cell-code}\n\"NAME in MAJOR with GPA is on STATUS\"\n```\n:::\n\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#30dc16ef .cell execution_count=4}\n``` {.python .cell-code}\nfrom IPython.display import display\nfrom ipywidgets import interact_manual\n\n\n@interact_manual(name=\"\", major=[\"IMT\", \"IST\", \"ADA\"], gpa=(0.0,4.0,0.05))\ndef onclick(name,major,gpa):\n    if gpa < 1.8:\n        status = \"probation\"\n    elif gpa > 3.4:\n        status = \"deans list\"\n    else:\n        status = \"no list\"\n    display(f\"{name} in {major} with gpa of {gpa} is on {status}.\")\n```\n:::\n\n\n:::\n::::\n\n",
    "supporting": [
      "ui-1_files"
    ],
    "filters": [],
    "includes": {}
  }
}