{
  "hash": "9c977398d2e95bda50664a89b8a02bad",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"2. Creating simple web apps with Streamlit\"\njupyter: python3\n---\n\nIn this tutorial we will learn basic usage of [https://docs.streamlit.io/get-started/fundamentals/main-concepts](Streamlit).\n\n\n::: {.callout-note}\n\nTo do this tutorial you will need `streamlit` installed in your conda environment. To do that:\n\n1.  Open a terminal (from in VS Code, click \"Terminal\" -> \"New Terminal\").\n\n1.  Activate your `ist356` conda environment by running:\n\n    ```{bash}\n    conda activate ist356\n    ```\n\n1.  Install `streamlit` by either running:\n\n    ```{bash}\n    pip install streamlit\n    ```\n\n    or:\n\n    ```{bash}\n    conda install -c conda-forge -y streamlit\n    ```\n\n:::\n\n\n## What is Streamlit?\n\nStreamlit markets itself as a User Interface library for building simple web applications from Python scripts. \n\nBuild:\n\n- Interactive dashboard with tables, charts and graphs\n- Accepting user input for a data pipeline\n- Chat applications \n- and more!\n\nThe best part of streamlit is the application runs in a browser and you don't need to learn front-end technologies like HTML, CSS and Javascript\n\n## How does it work?\n\nTo illustrate how streamlit works, here is a simple Python script that uses the Streamlit library:\n\n::: {#8e6d04ec .cell execution_count=1}\n``` {.python .cell-code}\nimport streamlit as st\n\nst.title(\"Saying Hello.\")\nname = st.text_input(\"And you are?\")\n\nif name:\n    st.write(f\"Hello, {name}!\")\n```\n:::\n\n\nTo test this:\n\n1.  Create a file called `hello-ui.py` using VS Code (Click \"File -> New File\") and paste the above code into it.\n\n1.  Save the file (File -> Save, or CTRL/CMD + S).\n\n1.  Open a terminal (in VS Code, Terminal -> New Terminal). If your `ist356` environment is not active, activate it by running `conda activate ist356`.\n\n1.  Now run:\n\n    ```{bash}\n    python -m streamlit run hello-ui.py\n    ```\n\n    When you run the script, Streamlit launches a webserver on your computer to run your app; your default web browser will automatically open with the simple website Streamlit created.\n\n1.  If you edit the `hello-ui.py` file, streamlit will automatically detect the changes when the changes are saved. If you re-do the interaction (in this case, adding a name and hitting Enter), the new code will be executed. Try it! Add a waving emoji by adding `:wave:` before the `Hello` in the `st.write`.\n\n1.  The app will continue to run in the browser. You can stop it by first hitting CTRL+C in the terminal, then closing the browser tab.\n\n## Interactions\n\nStreamlit supports both linear and event-driven interactions.\n\n### Linear style\n\nWith **linear** interactions the code runs from top-down each time the input changes.\n\n**The linear pattern is the simpler pattern.**\n\nThe most effective way to use of this pattern is:\n\n- setup widgets, saving their state in variables\n- then check interations through the variables with if\n\nAn example:\n\n::: {#9c676d38 .cell execution_count=2}\n``` {.python .cell-code}\nimport streamlit as st\n\nst.title(\"Streamlit Interaction: linear\")\n\n# setup\nname = st.text_input(\"Who are you?\")\nhi_clicked = st.button('Say Hi!')\nclear_clicked = st.button('Clear')\n\n# interactions\nif hi_clicked:\n    if name:\n        st.success(f\"Hello, {name}\", icon=\"üëç\")\n    else:\n        st.error(f\"I can't say hello, if you don't tell me your name!\", icon=\"üí£\")\n\nif clear_clicked:\n    name = None \n```\n:::\n\n\n### Event-driven style\n\nWith **event-driven** interactions, you write a function to handle the event. This is similar to how most other UI libraries work. \n\n::: {.callout-warning}\nThe event-driven pattern is more complex, and might have unexpected behaviors due to streamlit's processing order!\n:::\n\nThe most effective use of this pattern is to:\n\n- create handler functions with def\n- setup interactions, using the function on the event\n\nExample:\n\n::: {#e3cc80f2 .cell execution_count=3}\n``` {.python .cell-code}\nimport streamlit as st\n\n\ndef hi_click():\n    if name:\n        st.success(f\"Hello, {name}\", icon=\"üëç\")\n    else:\n        st.error(f\"I can't say hello, if you don't tell me your name!\", icon=\"üí£\")\n\n\ndef clear_click():\n    name = None \n\n# setup\nst.title(\"Streamlit Interaction: event-driven\")\nname = st.text_input(\"Who are you?\")\nst.button('Say Hi!', on_click=hi_click)\nst.button('Clear', on_click=clear_click)\n```\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.1\n\nWrite a streamlit app that takes as input a length and width of a rectangle, and outputs the permieter [2 x (L+W)] and area [(L x W)] of that rectangle. Add a \"calculate\" button and a \"clear\" button.\n\n*Hint*: use `st.number_input()` for numbers.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#3044d561 .cell execution_count=4}\n``` {.python .cell-code}\nimport streamlit as st\n\nst.title('Area and permieter')\nlength = st.number_input(\"Enter Length:\")\nwidth = st.number_input(\"Enter Width:\")\nbtn_clicked = st.button('Calculate!')\n\nif btn_clicked:\n    area = length * width\n    perm = 2 * (length + width)\n    st.write(f\"Area: {area}\")\n    st.write(f\"Perimeter: {perm}\")\n```\n:::\n\n\n:::\n::::\n\n\n## Session State: Helping Streamlit Remember values\n\n`st.session_state` is a global key/value store for data that need to persist between streamlit runs.\n\nAny data dependent on a previous interaction would be a use case for this.\n\nThe pattern using session state is:\n\n    - initialize the session state\n    - create the widgets\n    - check the interactions that change the state\n    - display the widgets that update the state\n\nThe session state is necessary to store persistent data. For example, the following will **not** work:\n\n**Wrong way**:\n\n::: {#b6d9cbf2 .cell execution_count=5}\n``` {.python .cell-code}\nimport streamlit as st\n\n# Streamlit is always running, so only do this will not do what you think\n\ncount = 0\n\n# widget setup\nst.title('Counter Example: Wrong')\nst.write(\"variables that change based on previous runs will not work as expected \")\nst.write(\"this is because streamlit runs all this code with each interaction\")\nincr_clicked = st.button('increment counter', type='primary')\nreset_clicked = st.button('reset counter', type='secondary')\n\n# interactions\nif reset_clicked:\n    count = 0\nelif incr_clicked:\n    count = count + 1\n    \n# display session state, after interations\nst.write(f'Button clicked {count} times')\n```\n:::\n\n\nWhy not? (Try it!)\n\nHowever, this will work:\n\n**Right way**:\n\n::: {#0314b8d1 .cell execution_count=6}\n``` {.python .cell-code}\nimport streamlit as st\n\n# Streamlit is always running, so only do this when count is not in session_state\n\n# initialize\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\n# widget setup\nst.title('Counter Example: Session State')\nst.write(\"variables that change based on previous runs need session state\")\nst.write(\"`st.session_state` preserves the values of the variable between runs\")\nincr_clicked = st.button('increment counter', type='primary')\nreset_clicked = st.button('reset counter', type='secondary')\n\n# interactions\nif reset_clicked:\n    st.session_state.count = 0\nelif incr_clicked:\n    st.session_state.count = st.session_state.count + 1\n    \n# display session state, after interations\nst.write(f'Button clicked {st.session_state.count} times')\n```\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.2\n\n**Order total and history**:\n\n- Write a streamlit app to input an amount.\n\n- Create an \"add to total\" button to accumulate the amount in the total.\n\n- Create a \"clear\" button to reset the session vars.\n\n- Display the total and the history of each item entered.\n\n*Hint*: you'll need to manage a list for history!\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#0fbc39cf .cell execution_count=7}\n``` {.python .cell-code}\nimport streamlit as st\n\n# initialize\nif 'total' not in st.session_state:\n    st.session_state.total = 0.0\nif 'history' not in st.session_state:\n    st.session_state.history = []\n\nst.title('Order Total and History')\namount = st.number_input(\"Amount:\")\nbtn_add = st.button('Add to Total')\nbtn_clear = st.button('Clear')\n\nif btn_add:\n    st.session_state.history.append(amount)\n    st.session_state.total = sum(st.session_state.history)\n    st.write(f\"TOTAL: {st.session_state.total}\")\n    st.write(\"HISTORY:\")\n    for h in st.session_state.history:\n        st.write(h)\n\nif btn_clear:\n    st.session_state.history = []\n    st.session_state.total = 0.0\n```\n:::\n\n\n:::\n::::\n\n\n## Exploring Streamlit input widgets\n\nStreamlit offers a number of different widgets for user input, beyond the text input highlighted above. The following code highlights them:\n\n::: {#5cd15d98 .cell execution_count=8}\n``` {.python .cell-code}\nimport streamlit as st\nfrom  datetime import datetime \nst.title('Streamlit Input Widgets!')\n\nst.markdown(\"## Text Inputs\")\ntxt = st.text_input('Enter your name:', value='John Doe')\nst.text(f\"OUTPUT: {txt}, type: {type(txt)}\")\npw = st.text_input('Enter your password:', type=\"password\")\nst.text(f\"OUTPUT: {pw}, type: {type(pw)}\")\ntxta = st.text_area('Leave a comment:', value='Type here...')\nst.text(f\"OUTPUT: {txta}, type: {type(txta)}\")\nst.divider()\n\nst.markdown(\"## Binary Widgets\")\nchk = st.checkbox('I agree to the terms and conditions', value=False)\nst.text(f\"OUTPUT: {chk}, type: {type(chk)}\")\ntog = st.toggle('Enable notifications', value=False)\nst.text(f\"OUTPUT: {tog}, type: {type(tog)}\")\nst.divider()\n\nst.markdown(\"## Date / Time Widgets\")\ndt =st.date_input('Select a date:')\nst.text(f\"OUTPUT: {dt}, type: {type(dt)}\")\ntm = st.time_input('Select a time:')\nst.text(f\"OUTPUT: {tm}, type: {type(tm)}\")\nst.divider()\n\nst.markdown(\"## Number Widgtets\")\nnumi = st.number_input('Enter Hourly Wage:', value=7.25, max_value=20.0, min_value=5.25, step=0.25)\nst.text(f\"OUTPUT: {numi}, type: {type(numi)}\")\nnums = st.slider('Pick a number between 1 and 20:', min_value=1, max_value=20, value=10, step=1)\nst.text(f\"OUTPUT: {nums}, type: {type(nums)}\")\nst.divider()\n\nst.markdown(\"## Selection Widgets\")\nselbox = st.selectbox('Choose one shipping method:', ['Jiffy Express', ' You Pee Es', 'FedUp Express'])\nst.text(f\"OUTPUT: {selbox}, type: {type(selbox)}\")\nmulselbox = st.multiselect('Select all your favorite colors:', ['Red', 'Green', 'Blue', 'Yellow', 'White'])\nst.text(f\"OUTPUT: {mulselbox}, type: {type(mulselbox)}\")\nselslider = st.select_slider('Rate us:', options=['1=Poor','2=ok','3=good','4=great','5=excellent'], value = '3=good')\nst.text(f\"OUTPUT: {selslider}, type: {type(selslider)}\")\nradio = st.radio('Rate us:', ['1=Poor','2=ok','3=good','4=great','5=excellent'], index=2, horizontal=True)\nst.text(f\"OUTPUT: {radio}, type: {type(radio)}\")\nst.divider()\n\n\nst.markdown(\"## 'Other' Widgets\")\nfeed = st.feedback('faces')\nst.text(f\"OUTPUT: {feed}, type: {type(feed)}\")\ncolor = st.color_picker('Pick a color:', value='#00f900')\nst.text(f\"OUTPUT: {color}, type: {type(color)}\")\nfile = st.file_uploader('Upload a file:')\nst.text(f\"OUTPUT: {file}, type: {type(file)}\")\npic = st.camera_input('Take a selfie:')\nst.text(f\"OUTPUT: {pic}, type: {type(pic)}\")\nst.divider()\n```\n:::\n\n\n## Exploring Steamlit output widgets\n\nLikewise, Streamlit offers a number of different widgets for displaying different types of output. Here's a sampling:\n\n::: {#79e145bd .cell execution_count=9}\n``` {.python .cell-code}\nimport streamlit as st\n\nst.title('Streamlit Output Widgets!')\n\nst.markdown(\"## Text Output\")\nst.text(\"Plain text.\\nObeys newlines.\")\n\nst.markdown(\"## Markdown Output\")\nst.markdown('''\n### Heading 3\n- this\n- is a\n- list\n            \nLearn markdown here: [https://www.markdownguide.org/getting-started/](https://www.markdownguide.org/getting-started/)\n''')\n\nst.markdown(\"## Code Output\")\nst.code('''\nname = input(\"Enter your name:\")\nprint(f\"Hello, {name}\")\n''', language=\"python\", line_numbers=True)\n\nst.markdown(\"## Image Output\")\nst.image(\"https://ist256.com/images/logo.png\",caption=\"IST256 logo\")\n\nst.markdown(\"## Metric / Card Ouput\")\nst.metric(label=\"Temperature\", value=\"70 ¬∞F\", delta=\"1.2 ¬∞F\")\nst.metric(label=\"Mike Fudge\", value=\"B+\", delta=\"-5 pts\")\n\nst.markdown(\"## Video Output\")\nst.video(\"https://youtu.be/soVItkifdms?si=eNNbRXnAg4efcJGi\")\n\nst.markdown(\"## Audio Output\")\nst.audio(\"https://file-examples.com/storage/fe6993554766e3161a375a5/2017/11/file_example_MP3_700KB.mp3\")\n\nst.markdown(\"## Toast Output\")\nif st.button(\"Click to show toast\"):\n    st.toast(\"Congrats! You clicked it!\", icon=\":material/thumb_up:\")\n\nst.markdown(\"## Column Layouts\")\ncol1, col2, col3 = st.columns(3)\ncol1.markdown(\"Hello\")\ncol2.text(\"There\")\ncol2.text(\"Mike\")\ncol3.warning(\"Warning!\")\ncol3.error(\"Error!\")\ncol3.success(\"Success!\")\n\nst.markdown(\"## Tab Layouts\")\ncol1, col2, col3 = st.tabs([\"Tab A\",\"Tab B\",\"Tab C\"])\ncol1.markdown(\"Hello\")\ncol2.text(\"There\")\ncol2.text(\"Mike\")\ncol3.warning(\"Warning!\")\ncol3.error(\"Error!\")\ncol3.success(\"Success!\")\n\nst.markdown(\"## Expander Output\")\nwith st.expander(\"See a map\"):\n    st.write('Here is a map for you!')\n    st.map(latitude=76,longitude=-43, zoom=13)\n```\n:::\n\n\n## File Uploads\n\nWe can use [st.file_uploader()](https://docs.streamlit.io/develop/api-reference/widgets/st.file_uploader) to allow users to upload files. The uploaded files return a Python \"file-like\" that can be used in a variety of applications with little additional processing. \n\nAn example:\n\n::: {#6e7128d5 .cell execution_count=10}\n``` {.python .cell-code}\nimport streamlit as st\nfrom io import StringIO # required to convert binary to text\n\n\nst.title(\"File Upload Example\")\nst.markdown('''\nThis example demonstrates how to process and uploaded file. \n            \n- The first example can process and file-like (image, video, data for a dataframe, etc)\n- The second example shows how to process text explicitly.\n            \n''')\nbin_file_data = st.file_uploader(\"Upload an image/photo file\", type=[\"png\", \"jpeg\", \"jpg\", \"gif\"])\ntext_file_data = st.file_uploader(\"Upload a text file\", type=[\"txt\", \"csv\", \"md\"])\n\nif bin_file_data:\n    st.markdown(f\"### {bin_file_data.name}\")\n    st.image(bin_file_data)\n\nif text_file_data:\n    st.markdown(f\"### {text_file_data.name}\")\n    binary_contents = text_file_data.getvalue()\n    # Convert binary to text\n    text_contents = StringIO(binary_contents.decode(\"utf-8\")).read() \n    st.text(text_contents)\n\nprint(text_file_data)\n```\n:::\n\n\n:::: {.callout-caution appearance=\"simple\" icon=\"false\"}\n### Code Challenge 2.3\n\n**Order file processing:**\n\n- Write a Streamlit app that takes as input a text file with one line per order. Samples are provided in the `data` folder, but each line should have the amount of the order.\n\n- Output the number of orders and the total amount of all orders.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n#### Solution\n\n::: {#9d48de33 .cell execution_count=11}\n``` {.python .cell-code}\nimport streamlit as st\n\nfrom io import StringIO # required to convert binary to text\n\nst.title(\"Order File Processing\")\ntext_file_data = st.file_uploader(\"Upload the order file\", type=[\"txt\"])\n\nif text_file_data:\n    binary_contents = text_file_data.getvalue()\n    # Convert binary to text\n    text_contents = StringIO(binary_contents.decode(\"utf-8\")).read() \n    total = 0\n    count = 0\n    for line in text_contents.split(\"\\n\"):\n        try:\n            order = float(line)\n            total = total + order\n            count = count + 1\n        except ValueError:\n            continue \n    st.info(f\"Number of orders: {count}\", icon=\"‚ûï\")\n    st.info(f\"Total amount: ${total:.2f}\", icon=\"üíµ\")\n```\n:::\n\n\n:::\n::::\n\n## Image Processing with the camera\n\nWe can use [st.camera_input()](https://docs.streamlit.io/develop/api-reference/widgets/st.camera_input) to get images from our webcams. \n\nFrom there its easy to load into popular image processing libraries.\n\nAn example:\n\n::: {#f1cedd32 .cell execution_count=12}\n``` {.python .cell-code}\nimport streamlit as st\nfrom PIL import Image\n\n\nst.title(\"Camera Example\")\nst.markdown('''\n    Let's take a picture with the camera and conver the image to greyscale with PIL\n\n    Learn More about PIL: https://pillow.readthedocs.io/en/stable/index.html\n''')\npic_data = st.camera_input(\"Take a pic!\")\n\nif pic_data:\n    img = Image.open(pic_data)\n    grey_img = img.convert(\"L\")\n    st.image(grey_img)\n```\n:::\n\n\n",
    "supporting": [
      "ui-2_files"
    ],
    "filters": [],
    "includes": {}
  }
}