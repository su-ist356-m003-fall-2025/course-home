[
  {
    "objectID": "03_ui/index.html",
    "href": "03_ui/index.html",
    "title": "3. UI",
    "section": "",
    "text": "In this unit we will learn about some useful Python modules for creating dynamic user interface (UI) to your code.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "3. UI"
    ]
  },
  {
    "objectID": "03_ui/index.html#tutorials",
    "href": "03_ui/index.html#tutorials",
    "title": "3. UI",
    "section": "Tutorials",
    "text": "Tutorials\n\nInteraction in Jupyter using ipywidgets",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "3. UI"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html",
    "href": "01_cli_conda/conda.html",
    "title": "Bash variables, environments, and conda",
    "section": "",
    "text": "Note: This task requires that you have conda installed already. Follow the instructions here to do that if you have not done so already.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#the-export-command",
    "href": "01_cli_conda/conda.html#the-export-command",
    "title": "Bash variables, environments, and conda",
    "section": "The export Command",
    "text": "The export Command\nIn Bash, variables normally exist only in the shell where they were defined.\nThe export command marks a variable so that it is passed to child processes (programs or scripts started from the current shell).\n\nExample:\nMYVAR=\"Hello\"\nbash -c 'echo $MYVAR'\n# (No output — MYVAR was not exported)\n\nexport MYVAR=\"Hello\"\nbash -c 'echo $MYVAR'\n# Output: Hello\nIn the first case, the new Bash process doesn’t know about MYVAR.\nIn the second case, export makes it available to the child process.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#the-source-command",
    "href": "01_cli_conda/conda.html#the-source-command",
    "title": "Bash variables, environments, and conda",
    "section": "The source Command",
    "text": "The source Command\nWhen you run a Bash script normally, it executes in a subshell (a separate process).\nAny variables set inside that script will only exist in that subshell and disappear when the script finishes.\nThe source command runs a script in the current shell.\nThis means variables or changes made by the script persist after it finishes.\n\nExample: Difference between source and export\ntest.sh:\nMYVAR=\"Hello\"\nCase 1 — Running normally:\nbash test.sh\necho $MYVAR\n# (No output — MYVAR is not set in current shell)\nCase 2 — Using source:\nsource test.sh\necho $MYVAR\n# Output: Hello\nCase 3 — Using export in a script:\n# test_export.sh\nexport MYVAR=\"Hello\"\nbash test_export.sh\necho $MYVAR\n# (No output — export makes it available to child processes, not the parent shell)",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#how-environments-work",
    "href": "01_cli_conda/conda.html#how-environments-work",
    "title": "Bash variables, environments, and conda",
    "section": "How environments work",
    "text": "How environments work\n\nEach shell session has its own environment.\nWhen you start a new process (run a command or script), it inherits a copy of your current environment.\nVariables you define with export become part of the environment and are visible to child processes.\nVariables defined without export are shell variables — they exist only in the current shell and are not passed to child processes.\n\nYou can view all your current environment variables by running:\nenv",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#the-path-variable",
    "href": "01_cli_conda/conda.html#the-path-variable",
    "title": "Bash variables, environments, and conda",
    "section": "The PATH Variable",
    "text": "The PATH Variable\nThe PATH variable controls where Bash searches for executables. It points to a : separated list of absolute paths. See what yours is set to by running:\necho $PATH\nWhen you execute any program in the shell, bash cycles through the list of paths specified in PATH until it finds an executable file that matches the name.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#create-environment",
    "href": "01_cli_conda/conda.html#create-environment",
    "title": "Bash variables, environments, and conda",
    "section": "Create Environment",
    "text": "Create Environment\nconda create --name py311 python=3.11\nThis creates a new environment called py311 with Python version 3.11 installed.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#activatedeactivate-environments",
    "href": "01_cli_conda/conda.html#activatedeactivate-environments",
    "title": "Bash variables, environments, and conda",
    "section": "Activate/Deactivate Environments",
    "text": "Activate/Deactivate Environments\nconda activate py311\nActivating an environment changes your shell’s environment variables (especially PATH) so that commands use the software installed in that environment. You’ll see the environment name in parentheses at the start of your shell prompt.\nconda deactivate\nDeactivating an environment restores your shell to its previous state, removing the environment-specific entries from PATH and other variables.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#install-packages",
    "href": "01_cli_conda/conda.html#install-packages",
    "title": "Bash variables, environments, and conda",
    "section": "Install Packages",
    "text": "Install Packages\nconda install numpy\nInstalls the package numpy into the currently active environment.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#channels",
    "href": "01_cli_conda/conda.html#channels",
    "title": "Bash variables, environments, and conda",
    "section": "Channels",
    "text": "Channels\nA channel is a location (usually online) where Conda looks for packages. When you install or search for a package, Conda queries one or more channels.\n\nDefault channel: If you installed Conda via Miniforge, the default channel is conda-forge, a large community-maintained repository.\nSpecialized channels: Some fields use dedicated channels, such as bioconda for bioinformatics software.\n\nTo install from a specific channel:\nconda install -c bioconda package_name\nHere, -c bioconda tells Conda to search the bioconda channel for the package.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#challenge-questions",
    "href": "01_cli_conda/conda.html#challenge-questions",
    "title": "Bash variables, environments, and conda",
    "section": "Challenge questions",
    "text": "Challenge questions\n\nCreate a conda environment called conda-test.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nconda create -n conda-test\n\n\n\nActivate your conda-test environment and install numpy into it.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nconda activate conda-test\nconda install numpy\n\n\n\nPrint your $PATH; you should see that the first couple of paths point to a conda directory with the name of your environment (conda-test) in it.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\necho $PATH\n\n\n\nCreate a python script called check_versions.py that contains the following code:\n#!/usr/bin/env python\nimport platform\nimport numpy\nprint(\"Python version: \", platform.python_version())\nnpvers = numpy.__version__\nprint(\"Numpy version: \", npvers)\nChange the permissions on check_versions.py to make it executable.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nRun:\nnano check_versions.py\nType/paste in the code. Then type Ctrl+O to save, then Ctrl+X to exit.\nRun:\nchmod +x check_versions.py\n\n\n\n\nSee what version of Python and numpy you installed by running check_versions.py script:\n./check_versions.py\nThis will print out the current time followed by the versions of Python and numpy you are using.\nSuppose that you need to use an older version of Python and numpy for a project. Create another conda environment called conda-test2 and install Python version 3.9 and numpy 1.24.1 into it.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nconda create -n conda-test2 python=3.9 numpy=1.24.1\n\n\n\nActivate conda-test2 and run check versions to verify that you have the desired versions.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nconda activate conda-test2\n./check_versions.py\n\n\n\nCreate an environment called biotest and install gofasta in it using the bioconda channel. (You can specify the channel for conda create and/or conda install using the -c flag, just as we did the in search command above.)\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nconda create -n biotest -c bioconda gofasta\n\n\n\nNow activate the bioconda channel and test that gofasta is installed by running:\nconda activate biotest\ngofasta --help\nYou should get a help message giving information about gofasta.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#removing-environments",
    "href": "01_cli_conda/conda.html#removing-environments",
    "title": "Bash variables, environments, and conda",
    "section": "Removing environments",
    "text": "Removing environments\nLets remove some of the environments we created to save space. You can see all the environments you have installed by running:\nconda info --envs\nLet’s uninstall the conda-test environment. First, if you are not in the base environment, go to it by running conda deactivate. This will take you to your last active environment. Keep deactivating until you see (base) on the left of the prompt. Alternatively, just type conda activate (with no environment name) to go directly to the base environment. Now let’s remove the conda-test environment by running:\nconda remove --all -n conda-test\nNow run conda info --envs again to check that the environment is installed. Repeat for any other environments you’d like to remove.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#bash-customization",
    "href": "01_cli_conda/conda.html#bash-customization",
    "title": "Bash variables, environments, and conda",
    "section": "Bash Customization",
    "text": "Bash Customization\nCustomizing your Bash shell can improve your workflow and make frequently used commands easier to run.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#example-enabling-color-output-in-ls",
    "href": "01_cli_conda/conda.html#example-enabling-color-output-in-ls",
    "title": "Bash variables, environments, and conda",
    "section": "Example: Enabling Color Output in ls",
    "text": "Example: Enabling Color Output in ls\nOn many systems, the output of ls returns text that is the same color, regardless of if it’s a file, folder, or something else. However, if you run:\nls -G\nThen the output text will be colored depending on what item is; e.g., directory names will be in blue and files in white.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#aliases",
    "href": "01_cli_conda/conda.html#aliases",
    "title": "Bash variables, environments, and conda",
    "section": "Aliases",
    "text": "Aliases\nAliases map a short command to a longer one. For example, if we always want the output of ls to be colored, we can alias ls -G with ls with:\nalias ls=\"ls -hG\"",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#customization-with-.bash_profile-and-.bashrc",
    "href": "01_cli_conda/conda.html#customization-with-.bash_profile-and-.bashrc",
    "title": "Bash variables, environments, and conda",
    "section": "Customization with .bash_profile and .bashrc",
    "text": "Customization with .bash_profile and .bashrc\nYou may find an alias like the above so useful that you want it to run everytime you open a terminal. There are files that are run automatically when Bash starts that allow you to do just that. They are:\n\n~/.bash_profile\nRuns for login shells. Good for commands that should only run once when you log in (e.g., setting environment variables).\n~/.bashrc\nRuns for interactive non-login shells. Good for commands you want every interactive shell to run (e.g., aliases, functions).\n\nOn many systems, .bash_profile will call .bashrc so settings apply in both contexts.\n\nTip: If unsure where to put something, put it in .bashrc and make sure .bash_profile sources .bashrc.\n\n\n\n\n\n\n\nNoteUsing Zsh?\n\n\n\nIf your default shell is zsh (common on macOS Catalina and later), the equivalent files are: - ~/.zprofile – similar to .bash_profile - ~/.zshrc – similar to .bashrc\nConfiguration changes should go into ~/.zshrc for most use cases.\n\n\nYou can put any bash command you like in these scripts to further customize your shell. For example, you can configure your shell so that pressing the up arrow searches backward through your command history for commands starting with the text you have typed, and the down arrow searches forward with:\n\nfor bash (add this to your ~/.bashrc):\nbind '\"\\e[A\": history-search-backward'\nbind '\"\\e[B\": history-search-forward'\nfor Zsh (add this to your ~/.zshrc):\nbindkey \"^[[A\" history-search-backward\nbindkey \"^[[B\" history-search-forward",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#redirection-and-append",
    "href": "01_cli_conda/conda.html#redirection-and-append",
    "title": "Bash variables, environments, and conda",
    "section": "Redirection and Append",
    "text": "Redirection and Append\nRedirect output to a file:\necho \"Hello\" &gt; file.txt\nOverwrites file.txt with “Hello”.\nAppend output to a file:\necho \"World\" &gt;&gt; file.txt\nAdds “World” to the end of file.txt.\n\n\n\n\n\n\nCautionChallenge:\n\n\n\nCreate a file called input.txt that contains the text “To be, or not to be,” on the first line. Then add “that is the question.” on the second line.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\necho \"To be, or not to be,\" &gt; input.txt\necho \"that is the question.\" &gt;&gt; input.txt",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#text-manipulation-with-sed",
    "href": "01_cli_conda/conda.html#text-manipulation-with-sed",
    "title": "Bash variables, environments, and conda",
    "section": "Text Manipulation with sed",
    "text": "Text Manipulation with sed\nIt frequently happens that you need to search for and replace text in a file. The program sed is used for that. For example, let’s modify the text in the input.txt you created above, and replace the word “be” with “use AI”:\nsed 's/ be/ use AI/g' input.txt\nWe can write results to a new file:\nsed 's/ be/ use AI/g' input.txt &gt; output.txt",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#file-permissions-and-ownership",
    "href": "01_cli_conda/conda.html#file-permissions-and-ownership",
    "title": "Bash variables, environments, and conda",
    "section": "File Permissions and Ownership",
    "text": "File Permissions and Ownership\n\nViewing Permissions\nls -l\nExample output:\n-rw-r--r--  1 user  staff   1234 Aug 14 12:00 file.txt\n\nFirst character: file type (- = file, d = directory)\nNext three: owner permissions\nNext three: group permissions\nNext three: others’ permissions\n\n\n\nChanging Permissions\nchmod u+x script.sh   # add execute permission for owner\nchmod u-w file.txt    # remove write permission for owner\n\n\nChanging Ownership\nsudo chown newuser file.txt",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/conda.html#conditionals",
    "href": "01_cli_conda/conda.html#conditionals",
    "title": "Bash variables, environments, and conda",
    "section": "Conditionals",
    "text": "Conditionals\nIn Bash, as with any language, conditionals allow you to execute commands only if certain conditions are true. They help control the flow of your script, enabling decisions based on system state, user input, or computation results.\nThe basic syntax for an if statement in Bash is:\nif [ CONDITION ]; then\n  # commands to run if CONDITION is true\nelif [ OTHER_CONDITION ]; then\n  # commands to run if OTHER_CONDITION is true\nelse\n  # commands to run if no conditions are true\nfi\n\nKey points:\n\nThe square brackets [ ] are a synonym for the test command.\nYou must have spaces after [ and before ].\nCommon tests:\n\n-f file — file exists and is a regular file\n-d directory — directory exists\nstring1 = string2 — strings are equal\nn1 -eq n2 — numbers are equal\n! CONDITION — logical NOT (true if CONDITION is false)\n\n\nFor example, to check if a file exists:\nif [ -f \"file.txt\" ]; then\n  echo \"File exists\"\nelse\n  echo \"File does not exist\"\nfi",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Bash variables, environments, and `conda`"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html",
    "href": "01_cli_conda/shell-intro.html",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "",
    "text": "What is a command shell and why would I use one?\n\n\nExplain how the shell relates to the keyboard, the screen, the operating system, and users’ programs.\nExplain when and why command-line interfaces should be used instead of graphical interfaces.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#command-note-sheet",
    "href": "01_cli_conda/shell-intro.html#command-note-sheet",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Command note sheet",
    "text": "Command note sheet\nThe following Word document has a table of many of the commands we cover in this tutorial (and others!):\n\nBash Commands cheat sheet (Click to download)\n\nYou can use this to keep notes of the commands you learn in this tutorial by filling out the “What it does / Meaning” column. When you’re done, you will have your own cheat sheet of bash commands for future reference.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#the-prompt",
    "href": "01_cli_conda/shell-intro.html#the-prompt",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "The prompt",
    "text": "The prompt\nWhen the shell is first opened, you are presented with a prompt, indicating that the shell is waiting for input.\n$\nThe shell typically uses $ as the prompt, but may use a different symbol. In the examples for this lesson, we’ll show the prompt as $. Most importantly, do not type the prompt when typing commands. Only type the command that follows the prompt. This rule applies both in these lessons and in lessons from other sources. Also note that after you type a command, you have to press the Enter key to execute it.\nThe prompt is followed by a text cursor, a character that indicates the position where your typing will appear. The cursor is usually a flashing or solid block, but it can also be an underscore or a pipe. You may have seen it in a text editor program, for example.\nNote that your prompt might look a little different. In particular, most popular shell environments by default put your user name and the host name before the $. Such a prompt might look like, e.g.:\ncdcapano@localhost $\nThe prompt might even include more than this. Do not worry if your prompt is not just a short $. This lesson does not depend on this additional information and it should also not get in your way. The only important item to focus on is the $ character itself and we will see later why.\n\n\n\n\n\n\nNoneOPTIONAL: Change your prompt to $\n\n\n\nIf you’d like to simplify your prompt for the purposes of this tutorial, copy and paste the code below into your terminal:\nPS1='$ '\n\n\nSo let’s try our first command, ls, which is short for listing. This command will list the contents of the current directory:\n$ ls\nDesktop     Downloads   Movies      Pictures\nDocuments   Library     Music       Public\n\n\n\n\n\n\nTipCommand not found\n\n\n\nIf the shell can’t find a program whose name is the command you typed, it will print an error message such as:\n$ ks\nks: command not found\nThis might happen if the command was mis-typed or if the program corresponding to that command is not installed.\n\n\n\nA Typical Problem\nYou are a marine biologist who has just returned from a six-month survey of the North Pacific Gyre, where you have sampled gelatinous marine life in the Great Pacific Garbage Patch. You have 1520 samples that you’ve run through an assay machine to measure the relative abundance of 300 proteins. You need to run these 1520 files through an imaginary program called goostats.sh. In addition to this huge task, you have to write up results by the end of the month, so your paper can appear in a special issue of Aquatic Goo Letters.\nIf you choose to run goostats.sh by hand using a GUI, you’ll have to select and open a file 1520 times. If goostats.sh takes 30 seconds to run each file, the whole process will take more than 12 hours. With the shell, you can instead assign your computer this mundane task while you focuses her attention on writing your paper.\nThe next few lessons will explore the ways you can achieve this. More specifically, the lessons explain how you can use a command shell to run the goostats.sh program, using loops to automate the repetitive steps of entering file names, so that your computer can work while you write your paper.\nAs a bonus, once you have put a processing pipeline together, you will be able to use it again whenever you collect more data.\nIn order to achieve your task, you need to know how to:\n\nnavigate to a file/directory\ncreate a file/directory\ncheck the length of a file\nchain commands together\nretrieve a set of files\niterate over files\nrun a shell script containing your pipeline\n\nDownload files:\nYou need to download some files to follow this lesson.\n\nDownload shell-lesson-data.zip and move the file to your Desktop.\nUnzip/extract the file. Let your instructor know if you need help with this step. You should end up with a new folder called shell-lesson-data on your Desktop.\n\n\n\n\n\n\n\n\nNoteKey Points\n\n\n\n\nA shell is a program whose primary purpose is to read commands and run other programs.\nThis lesson uses Bash, the default shell in many implementations of Unix.\nPrograms can be run in Bash by entering commands at the command-line prompt.\nThe shell’s main advantages are its high action-to-keystroke ratio, its support for automating repetitive tasks, and its capacity to access networked machines.\nA significant challenge when using the shell can be knowing what commands need to be run and how to run them.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#where-am-i",
    "href": "01_cli_conda/shell-intro.html#where-am-i",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Where am I?",
    "text": "Where am I?\nFirst, let’s find out where we are by running a command called pwd (which stands for ‘print working directory’). Directories are like places — at any time while we are using the shell, we are in exactly one place called our current working directory. Commands mostly read and write files in the current working directory, i.e. ‘here’, so knowing where you are before running a command is important. pwd shows you where you are:\n$ pwd\n/Users/cdcapano\nThe computer’s response is /Users/cdcapano, which is my home directory.\n\nThe home directory\nThe home directory will look different on different operating systems.\n\nLinux: /home/cdcapano\nWindows: C:\\Users\\cdcapano (This may differ based on Windows versions)\n\nIf pwd returns something else, you may need to navigate to your home directory using the command cd.\nLet’s look at how a filesystem is organized:\n\nThe filesystem looks like an upside-down tree. We refer to the topmost directory as the “root directory”. It contains everything else. It is referred to with the / symbol.\nIn this illustration, we have several other directories stemming off of the root. The bin directory often refers to a location where programs are stored. tmp is a common directory on filesystems as a place to hold files that don’t need to be kept long-term. You may recognize the Users directory from the output we had above when typing pwd. We know the path of our home directory, where we currently are, is /Users/cdcapano.\n\n\n\n\n\n\nTipSlashes\n\n\n\nThere are two meanings for the / character. When it appears at the front of a path, it means “root”, when it appears within a path, it acts as a separator.\n\n\n\nThe Users folder may have more than one directory in it. For example, the image below depicts two users, cdcapano and aturing. The home directory just as the home directory for cdcapano is /Users/cdcapano, the home directory for aturing would be /Users/aturing. Typically, when you open a new command prompt, you will start in your home directory by default",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#listing-directory-contents",
    "href": "01_cli_conda/shell-intro.html#listing-directory-contents",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Listing directory contents",
    "text": "Listing directory contents\nWe often want to know what a directory contains. To do this, we use the “listing” command ls:\n$ ls\nwhich might return something that looks like this (results will vary):\nApplications  Documents  Library  Music    Public\nDesktop       Downloads  Movies   Pictures  \nls prints the names of the files and directories in your current location. Typing ls -F will give specific notation below based on the\n\nA trailing / indicates that this is a directory\n@ indicates a link\n* indicates an executable\n\nDepending on your shell’s default settings, the shell might also use colors to indicate whether each entry is a file or directory.\n\n\n\n\n\n\nTipClearing your terminal\n\n\n\nIf your screen gets too cluttered, you can clear your terminal using the clear command. You can still access previous commands using ↑↑ and ↓↓ to move line-by-line, or by scrolling in your terminal.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#getting-help",
    "href": "01_cli_conda/shell-intro.html#getting-help",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Getting help",
    "text": "Getting help\nMost bash commands have help menus that tell the user about how the command is used and what options are available for tailoring the function. There are two common ways to get help with commands, which can differ based on the source of the command (built-in or externally installed), and the operating system.\n\nWe can pass a --help option to any command (on linux and Git Bash).\n$ ls --help\nWe can read the manual on a function using the man command (linux and OSX)\n$ man ls\nTo navigate through the man pages, you may use ↑↑ and ↓↓ to move line-by-line, or try bb and SpacebarSpacebar to skip up and down by a full page. To search for a character or word in the man pages, use // followed by the character or word you are searching for. Sometimes a search will result in multiple hits. If so, you can move between hits using NN (for moving forward) and Shift+NShift+N (for moving backward). To **quit** the man pages, press qq.\n\n\n\n\n\n\n\nTipBash Built-in commands\n\n\n\nSome commands are built in to the Bash shell, rather than existing as separate programs on the filesystem. One example is the cd “change directory” command. If you get a message like No manual entry for cd, try help cd instead. The help command is how you get usage information for Bash built-ins.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#command-options",
    "href": "01_cli_conda/shell-intro.html#command-options",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Command options",
    "text": "Command options\nWe’ve seen that commands can have many options associated with them, which can control how the command functions. These are often notated by short and long forms that are typically equal in their meaning, but have conventional use in different scenarios.\nWhen options exist as both short and long options:\n\nUse the short option when typing commands directly into the shell to minimize keystrokes and get your task done faster.\nUse the long option in scripts to provide clarity. It will be read many times and typed once.\n\n\n\n\n\n\n\nTipUnsupported commandline options\n\n\n\nIf you try to use an option that is not supported, ls and other commands will usually print an error message similar to:\n$ ls -j\nMac zsh output:\nls: invalid option -- j\nusage: ls [-@ABCFGHILOPRSTUWXabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]\nother Unix output:\nls: invalid option -- 'j'\nTry 'ls --help' for more information.\n\n\n\nChallenge Questions\nExplore the ls command options to answer the following questions:\n\n\n\n\n\n\nCautionQuestion 1: Listing in long, human-readable format\n\n\n\nWhich options for ls produces output in long format that is human readable? (i.e. displaying something like 5.3K instead of 5369)\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nthe options -l and -h can be used with ls to make the output long and human readable. You can use them in two ways:\n\nls -l -h\nor string them together ls -lh\n\n\n\n\n\n\n\n\n\n\n\n\nCautionQuestion 2: Listing in Reverse Chronological Order\n\n\n\nBy default, ls lists the contents of a directory in alphabetical order by name. The command ls -t lists items by time of last change instead of alphabetically. The command ls -r lists the contents of a directory in reverse order. Which file is displayed last when you combine the -t and -r options? Hint: You may need to use the -l option to see the last changed dates.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nThe most recently changed file is listed last when using -rt. This can be very useful for finding your most recent edits or checking to see if a new output file was written.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#exploring-other-directories",
    "href": "01_cli_conda/shell-intro.html#exploring-other-directories",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Exploring other directories",
    "text": "Exploring other directories\nNot only can we use ls on the current working directory, but we can use it to list the contents of a different directory. Let’s take a look at our Desktop directory by running ls -F Desktop, i.e., the command ls with the -F option and the argument Desktop. The argument Desktop tells ls that we want a listing of something other than our current working directory:\n$ ls -F Desktop\nYou should see your newly created directory “workshop”\nshell-lesson-data/\nNote that if a directory named Desktop does not exist in your current working directory, this command will return an error. Typically, a Desktop directory exists in your home directory, which we assume is the current working directory of your bash shell.\nYour output should be a list of all the files and sub-directories in your Desktop directory, including the shell-lesson-data directory you downloaded at the setup for this lesson. (On most systems, the contents of the Desktop directory in the shell will show up as icons in a graphical user interface behind all the open windows. See if this is the case for you.)\nOrganizing things hierarchically helps us keep track of our work. While it’s possible to put hundreds of files in our home directory just as it’s possible to pile hundreds of printed papers on our desk, it’s much easier to find things when they’ve been organized into sensibly-named subdirectories.\nNow that we know the shell-lesson-data directory is located in our Desktop directory, we can do two things.\nFirst, using the same strategy as before, we can look at its contents by passing a directory name to ls:\n$ ls -F Desktop/shell-lesson-data\nexercise-data/  north-pacific-gyre/\nSecond, we can actually change our location to a different directory, so we are no longer located in our home directory.\nThe command to change locations is cd followed by a directory name to change our working directory. cd stands for ‘change directory’, which is a bit misleading. The command doesn’t change the directory; it changes the shell’s current working directory. In other words it changes the shell’s settings for what directory we are in. The cd command is akin to double-clicking a folder in a graphical interface to get into that folder.\nLet’s say we want to move into the exercise-data directory we saw above. We can use the following series of commands to get there:\n$ cd Desktop\n$ cd shell-lesson-data\n$ cd exercise-data\nThese commands will move us from our home directory into our Desktop directory, then into the shell-lesson-data directory, then into the exercise-data directory. You will notice that cd doesn’t print anything. This is normal. Many shell commands will not output anything to the screen when successfully executed. But if we run pwd after it, we can see that we are now in /Users/cdcapano/Desktop/shell-lesson-data/exercise-data.\nIf we run ls -F without arguments now, it lists the contents of /Users/cdcapano/Desktop/shell-lesson-data/exercise-data, because that’s where we now are:\n$ pwd\n/Users/cdcapano/Desktop/shell-lesson-data/exercise-data\n$ ls -F\nalkanes/  animal-counts/  creatures/  numbers.txt  writing/\nWe now know how to go down the directory tree (i.e. how to go into a subdirectory), but how do we go up (i.e. how do we leave a directory and go into its parent directory)? We might try the following:\n$ cd shell-lesson-data\n-bash: cd: shell-lesson-data: No such file or directory\nBut we get an error! Why is this?\nWith our methods so far, cd can only see sub-directories inside your current directory. There are different ways to see directories above your current location; we’ll start with the simplest.\nThere is a shortcut in the shell to move up one directory level. It works as follows:\n$ cd ..\n.. is a special directory name meaning “the directory containing this one”, or more succinctly, the parent of the current directory. Sure enough, if we run pwd after running cd .., we’re back in /Users/cdcapano/Desktop/shell-lesson-data:\n$ pwd\n/Users/cdcapano/Desktop/shell-lesson-data\nThe special directory .. doesn’t usually show up when we run ls. If we want to display it, we can add the -a option to ls -F:\n$ ls -F -a\n./  ../  exercise-data/  north-pacific-gyre/\n-a stands for ‘show all’ (including hidden files); it forces ls to show us file and directory names that begin with ., such as .. (which, if we’re in /Users/cdcapano, refers to the /Users directory). As you can see, it also displays another special directory that’s just called ., which means ‘the current working directory’. It may seem redundant to have a name for it, but we’ll see some uses for it soon.\nNote that in most command line tools, multiple options can be combined with a single - and no spaces between the options; ls -F -a is equivalent to ls -Fa.\n\n\n\n\n\n\nNoteOther Hidden Files\n\n\n\nIn addition to the hidden directories .. and ., you may also see a file called .bash_profile. This file usually contains shell configuration settings. You may also see other files and directories beginning with .. These are usually files and directories that are used to configure different programs on your computer. The prefix . is used to prevent these configuration files from cluttering the terminal when a standard ls command is used.\n\n\nThese three commands are the basic commands for navigating the filesystem on your computer: pwd, ls, and cd. Let’s explore some variations on those commands. What happens if you type cd on its own, without giving a directory?\n$ cd\nHow can you check what happened? pwd gives us the answer!\n$ pwd\n/Users/cdcapano\nIt turns out that cd without an argument will return you to your home directory, which is great if you’ve got lost in your own filesystem.\nLet’s try returning to the exercise-data directory from before. Last time, we used three commands, but we can actually string together the list of directories to move to exercise-data in one step:\n$ cd Desktop/shell-lesson-data/exercise-data\nCheck that we’ve moved to the right place by running pwd and ls -F.\nIf we want to move up one level from the data directory, we could use cd ... But there is another way to move to any directory, regardless of your current location.\nSo far, when specifying directory names, or even a directory path (as above), we have been using relative paths. When you use a relative path with a command like ls or cd, it tries to find that location from where we are, rather than from the root of the file system.\nHowever, it is possible to specify the absolute path to a directory by including its entire path from the root directory, which is indicated by a leading slash. The leading / tells the computer to follow the path from the root of the file system, so it always refers to exactly one directory, no matter where we are when we run the command.\nThis allows us to move to our shell-lesson-data directory from anywhere on the filesystem (including from inside exercise-data). To find the absolute path we’re looking for, we can use pwd and then extract the piece we need to move to shell-lesson-data.\n$ pwd\n/Users/cdcapano/Desktop/shell-lesson-data/exercise-data\n$ cd /Users/cdcapano/Desktop/shell-lesson-data\nRun pwd and ls -F to ensure that we’re in the directory we expect.\n\n\n\n\n\n\nTipTwo more shortcuts\n\n\n\nThe shell interprets a tilde (~) character at the start of a path to mean “the current user’s home directory”. For example, if your home directory is /Users/cdcapano, then ~/data is equivalent to /Users/cdcapano/data. This only works if it is the first character in the path; here/there/~/elsewhere is not here/there/Users/cdcapano/elsewhere.\nAnother shortcut is the - (dash) character. cd will translate - into the previous directory I was in, which is faster than having to remember, then type, the full path. This is a very efficient way of moving back and forth between two directories – i.e. if you execute cd - twice, you end up back in the starting directory.\nThe difference between cd .. and cd - is that the former brings you up, while the latter brings you back.\n\nTry it!\nFirst navigate to ~/Desktop/shell-lesson-data (you should already be there).\n$ cd ~/Desktop/shell-lesson-data\nThen cd into the exercise-data/creatures directory\n$ cd exercise-data/creatures\nNow if you run\n$ cd -\nyou’ll see you’re back in ~/Desktop/shell-lesson-data. Run cd - again and you’re back in ~/Desktop/shell-lesson-data/exercise-data/creatures\n\n\n\n\nChallenge Questions\n\n\n\n\n\n\nCautionQuestion 3: Absolute vs Relative Paths\n\n\n\nStarting from /Users/cdcapano/data, which of the following commands could cdcapano use to navigate to her home directory, which is /Users/cdcapano?\n\ncd .\ncd /\ncd /home/cdcapano\ncd ../..\ncd ~\ncd home\ncd ~/data/..\ncd\ncd ..\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nNo: . stands for the current directory.\nNo: / stands for the root directory.\nNo: cdcapano’s home directory is /Users/cdcapano.\nNo: this command goes up two levels, i.e. ends in /Users.\nYes: ~ stands for the user’s home directory, in this case /Users/cdcapano.\nNo: this command would navigate into a directory home in the current directory if it exists.\nYes: unnecessarily complicated, but correct.\nYes: shortcut to go back to the user’s home directory.\nYes: goes up one level.\n\n\n\n\n\n\n\n\n\n\n\n\nCautionQuestion 4: Relative Path Resolution\n\n\n\nUsing the filesystem diagram below, if pwd displays /Users/thing, what will ls -F ../backup display?\n\n\n../backup: No such file or directory\n2012-12-01 2013-01-08 2013-01-27\n2012-12-01/ 2013-01-08/ 2013-01-27/\noriginal/ pnas_final/ pnas_sub/\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nNo: there is a directory backup in /Users.\nNo: this is the content of Users/thing/backup, but with .., we asked for one level further up.\nNo: see previous explanation.\nYes: ../backup/ refers to /Users/backup/.\n\n\n\n\n\n\n\n\n\n\n\n\nCautionQuestion 5: ls reading comprehension\n\n\n\nUsing the filesystem diagram below, if pwd displays /Users/backup, and -r tells ls to display things in reverse order, what command(s) will result in the following output:\npnas_sub/ pnas_final/ original/\n\n\nls pwd\nls -r -F\nls -r -F /Users/backup\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nNo: pwd is not the name of a directory.\nYes: ls without directory argument lists files and directories in the current directory.\nYes: uses the absolute path explicitly.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#general-syntax-of-a-shell-command",
    "href": "01_cli_conda/shell-intro.html#general-syntax-of-a-shell-command",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "General Syntax of a Shell Command",
    "text": "General Syntax of a Shell Command\nWe have now encountered commands, options, and arguments, but it is perhaps useful to formalise some terminology.\nConsider the command below as a general example of a command, which we will dissect into its component parts:\n$ ls -F /\n\nls is the command, with an option -F and an argument /. We’ve already encountered options which either start with a single dash (-), known as short options, or two dashes (--), known as long options. Options change the behavior of a command and arguments tell the command what to operate on (e.g. files and directories). Sometimes options and arguments are referred to as parameters. A command can be called with more than one option and more than one argument, but a command doesn’t always require an argument or an option.\nYou might sometimes see options being referred to as switches or flags, especially for options that take no argument. In this lesson we will stick with using the term option.\nEach part is separated by spaces. If you omit the space between ls and -F the shell will look for a command called ls-F, which doesn’t exist. Also, capitalization can be important. For example, ls -s will display the size of files and directories alongside the names, while ls -S will sort the files and directories by size, as shown below:\n$ cd ~/Desktop/shell-lesson-data\n$ ls -s exercise-data\ntotal 28\n 4 animal-counts   4 creatures  12 numbers.txt   4 alkanes   4 writing\nNote that the sizes returned by ls -s are in blocks. As these are defined differently for different operating systems, you may not obtain the same figures as in the example.\n$ ls -S exercise-data\nanimal-counts  creatures  alkanes  writing  numbers.txt\nPutting all that together, our command ls -F / above gives us a listing of files and directories in the root directory /. An example of the output you might get from the above command is given below:\n$ ls -F /\nApplications/         System/\nLibrary/              Users/\nNetwork/              Volumes/\n\nYour Task: Organizing Files\nKnowing this much about files and directories, You are ready to organize the files that the protein assay machine will create.\nYou create a directory called north-pacific-gyre (to remind yourself where the data came from), which will contain the data files from the assay machine and your data processing scripts.\nEach of your physical samples is labelled according to your lab’s convention with a unique ten-character ID, such as ‘NENE01729A’. This ID is what you used in your collection log to record the location, time, depth, and other characteristics of the sample, so you decide to use it within the filename of each data file. Since the output of the assay machine is plain text, you will call your files NENE01729A.txt, NENE01812A.txt, and so on. All 1520 files will go into the same directory.\nNow in your current directory shell-lesson-data, you can see what files you have using the command:\n$ ls north-pacific-gyre/\nThis command is a lot to type, but you can let the shell do most of the work through what is called tab completion. If you types:\n$ ls nor\nand then presses Tab (the tab key on her keyboard), the shell automatically completes the directory name for you:\n$ ls north-pacific-gyre/\nPressing Tab again does nothing, since there are multiple possibilities; pressing Tab twice brings up a list of all the files.\nIf you then presses G and then presses Tab again, the shell will append ‘goo’ since all files that start with ‘g’ share the first three characters ‘goo’.\n$ ls north-pacific-gyre/goo\nTo see all of those files, you can press Tab twice more.\nls north-pacific-gyre/goo\ngoodiff.sh   goostats.sh\nThis is called tab completion, and we will see it in many other tools as we go on.\n\n\n\n\n\n\n\nNoteKey Points\n\n\n\n\nThe file system is responsible for managing information on the disk.\nInformation is stored in files, which are stored in directories (folders).\nDirectories can also store other directories, which then form a directory tree.\npwd prints the user’s current working directory.\nls [path] prints a listing of a specific file or directory; ls on its own lists the current working directory.\ncd [path] changes the current working directory.\nMost commands take options that begin with a single -.\nDirectory names in a path are separated with / on Unix, but \\ on Windows.\n/ on its own is the root directory of the whole file system.\nAn absolute path specifies a location from the root of the file system.\nA relative path specifies a location starting from the current location.\n. on its own means ‘the current directory’; .. means ‘the directory above the current one’.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#creating-directories-and-files",
    "href": "01_cli_conda/shell-intro.html#creating-directories-and-files",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Creating Directories and Files",
    "text": "Creating Directories and Files\nWe now know how to explore files and directories, but how do we create them in the first place?\nIn this episode we will learn about creating and moving files and directories, using the exercise-data/writing directory as an example.\n\nStep one: see where we are and what we already have\nWe should still be in the shell-lesson-data directory on the Desktop, which we can check using:\n$ pwd\n/Users/cdcapano/Desktop/shell-lesson-data\nNext we’ll move to the exercise-data/writing directory and see what it contains:\n$ cd exercise-data/writing/\n$ ls -F\nhaiku.txt  LittleWomen.txt\n\n\nCreate a directory\nLet’s create a new directory called thesis using the command mkdir thesis (which has no output):\n$ mkdir thesis\nAs you might guess from its name, mkdir means ‘make directory’. Since thesis is a relative path (i.e., does not have a leading slash, like /what/ever/thesis), the new directory is created in the current working directory:\n$ ls -F\nhaiku.txt  LittleWomen.txt  thesis/\nSince we’ve just created the thesis directory, there’s nothing in it yet:\n$ ls -F thesis\nNote that mkdir is not limited to creating single directories one at a time. The -p option allows mkdir to create a directory with nested subdirectories in a single operation:\n$ mkdir -p ../project/data ../project/results\nThe -R option to the ls command will list all nested subdirectories within a directory. Let’s use ls -FR to recursively list the new directory hierarchy we just created in the project directory:\n$ ls -FR ../project\n../project/:\ndata/  results/\n\n../project/data:\n\n../project/results:\n\n\n\n\n\n\nNoteTwo ways of doing the same thing\n\n\n\nUsing the shell to create a directory is no different than using a file explorer. If you open the current directory using your operating system’s graphical file explorer, the thesis directory will appear there too. While the shell and the file explorer are two different ways of interacting with the files, the files and directories themselves are the same.\n\n\n\n\n\n\n\n\nNoteGood names for files and directories\n\n\n\nComplicated names of files and directories can make your life painful when working on the command line. Here we provide a few useful tips for the names of your files and directories.\n\nDon’t use spaces.\n\nSpaces can make a name more meaningful, but since spaces are used to separate arguments on the command line it is better to avoid them in names of files and directories. You can use - or _ instead (e.g. north-pacific-gyre/ rather than north pacific gyre/). To test this out, try typing mkdir north pacific gyre and see what directory (or directories!) are made when you check with ls -F.\n\nDon’t begin the name with - (dash).\n\nCommands treat names starting with - as options.\n\nStick with letters, numbers, . (period or ‘full stop’), - (dash) and _ (underscore).\n\nMany other characters have special meanings on the command line. We will learn about some of these during this lesson. There are special characters that can cause your command to not work as expected and can even result in data loss.\nIf you need to refer to names of files or directories that have spaces or other special characters, you should surround the name in single quotes ('').\n\n\n\n\nCreate a text file\nLet’s change our working directory to thesis using cd, then run a text editor called Nano to create a file called draft.txt:\n$ cd thesis\n$ nano draft.txt\n\n\n\n\n\n\nNoteWhich editor?\n\n\n\nWhen we say, ‘nano is a text editor’ we really do mean ‘text’. It can only work with plain character data, not tables, images, or any other human-friendly media. We use it in examples because it is one of the least complex text editors. However, because of this trait, it may not be powerful enough or flexible enough for the work you need to do after this workshop. On Unix systems (such as Linux and macOS), many programmers use Emacs or Vim (both of which require more time to learn), or a graphical editor such as Gedit or VScode. On Windows, you may wish to use Notepad++. Windows also has a built-in editor called notepad that can be run from the command line in the same way as nano for the purposes of this lesson.\nNo matter what editor you use, you will need to know where it searches for and saves files. If you start it from the shell, it will (probably) use your current working directory as its default location. If you use your computer’s start menu, it may want to save files in your Desktop or Documents directory instead. You can change this by navigating to another directory the first time you ‘Save As…’\n\n\nLet’s type a few lines of text:\n\nOnce we’re happy with our text, we can press Ctrl+O (press the Ctrl or Control key and, while holding it down, press the O key) to write our data to disk. We will be asked to provide a name for the file that will contain our text. Press Return to accept the suggested default of draft.txt.\nOnce our file is saved, we can use Ctrl+X to quit the editor and return to the shell.\n\n\n\n\n\n\nTipControl, Ctrl, or ^ Key\n\n\n\nThe Control key is also called the ‘Ctrl’ key. There are various ways in which using the Control key may be described. For example, you may see an instruction to press the Control key and, while holding it down, press the X key, described as any of:\n\nControl-X\nControl+X\nCtrl-X\nCtrl+X\n^X\nC-x\n\nIn nano, along the bottom of the screen you’ll see ^G Get Help ^O WriteOut. This means that you can use Control-G to get help and Control-O to save your file.\n\n\nnano doesn’t leave any output on the screen after it exits, but ls now shows that we have created a file called draft.txt:\n$ ls\ndraft.txt\n\n\n\n\n\n\nCautionChallenge: Creating Files a Different Way\n\n\n\nWe have seen how to create text files using the nano editor. Now, try the following command:\n$ touch my_file.txt\n\nWhat did the touch command do? When you look at your current directory using the GUI file explorer, does the file show up?\nUse ls -l to inspect the files. How large is my_file.txt?\nWhen might you want to create a file this way?\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nThe touch command generates a new file called my_file.txt in your current directory. You can observe this newly generated file by typing ls at the command line prompt. my_file.txt can also be viewed in your GUI file explorer.\nWhen you inspect the file with ls -l, note that the size of my_file.txt is 0 bytes. In other words, it contains no data. If you open my_file.txt using your text editor it is blank.\nSome programs do not generate output files themselves, but instead require that empty files have already been generated. When the program is run, it searches for an existing file to populate with its output. The touch command allows you to efficiently generate a blank text file to be used by such programs.\n\n\n\n\nTo avoid confusion later on, we suggest removing the file you’ve just created before proceeding with the rest of the episode, otherwise future outputs may vary from those given in the lesson. To do this, use the following command:\n$ rm my_file.txt\n\n\n\nWhat’s in a name?\nYou may have noticed that all of your files are named ‘something dot something’, and in this part of the lesson, we always used the extension .txt. This is just a convention; we can call a file mythesis or almost anything else we want. However, most people use two-part names most of the time to help them (and their programs) tell different kinds of files apart. The second part of such a name is called the filename extension and indicates what type of data the file holds: .txt signals a plain text file, .pdf indicates a PDF document, .cfg is a configuration file full of parameters for some program or other, .png is a PNG image, and so on.\nThis is just a convention, albeit an important one. Files merely contain bytes; it’s up to us and our programs to interpret those bytes according to the rules for plain text files, PDF documents, configuration files, images, and so on.\nNaming a PNG image of a whale as whale.mp3 doesn’t somehow magically turn it into a recording of whale song, though it might cause the operating system to associate the file with a music player program. In this case, if someone double-clicked whale.mp3 in a file explorer program, the music player will automatically (and erroneously) attempt to open the whale.mp3 file.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#moving-files-and-directories",
    "href": "01_cli_conda/shell-intro.html#moving-files-and-directories",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Moving Files and Directories",
    "text": "Moving Files and Directories\nReturning to the shell-lesson-data/exercise-data/writing directory,\n$ cd ~/Desktop/shell-lesson-data/exercise-data/writing\nIn our thesis directory we have a file draft.txt which isn’t a particularly informative name, so let’s change the file’s name using mv, which is short for ‘move’:\n$ mv thesis/draft.txt thesis/quotes.txt\nThe first argument tells mv what we’re ‘moving’, while the second is where it’s to go. In this case, we’re moving thesis/draft.txt to thesis/quotes.txt, which has the same effect as renaming the file. Sure enough, ls shows us that thesis now contains one file called quotes.txt:\n$ ls thesis\nquotes.txt\nOne must be careful when specifying the target file name, since mv will silently overwrite any existing file with the same name, which could lead to data loss. By default, mv will not ask for confirmation before overwriting files. However, an additional option, mv -i (or mv --interactive), will cause mv to request such confirmation.\nNote that mv also works on directories.\nLet’s move quotes.txt into the current working directory. We use mv once again, but this time we’ll use just the name of a directory as the second argument to tell mv that we want to keep the filename but put the file somewhere new. (This is why the command is called ‘move’.) In this case, the directory name we use is the special directory name . that we mentioned earlier.\n$ mv thesis/quotes.txt .\nThe effect is to move the file from the directory it was in to the current working directory. ls now shows us that thesis is empty:\n$ ls thesis\n$\nAlternatively, we can confirm the file quotes.txt is no longer present in the thesis directory by explicitly trying to list it:\n$ ls thesis/quotes.txt\nls: cannot access 'thesis/quotes.txt': No such file or directory\nls with a filename or directory as an argument only lists the requested file or directory. If the file given as the argument doesn’t exist, the shell returns an error as we saw above. We can use this to see that quotes.txt is now present in our current directory:\n$ ls quotes.txt\nquotes.txt\n\n\n\n\n\n\nCautionChallenge: Moving files to a new folder\n\n\n\nAfter running the following commands, Jamie realizes that she put the files sucrose.dat and maltose.dat into the wrong folder. The files should have been placed in the raw folder.\n$ ls -F\n analyzed/ raw/\n$ ls -F analyzed\nfructose.dat glucose.dat maltose.dat sucrose.dat\n$ cd analyzed\nFill in the blanks to move these files to the raw/ folder (i.e. the one she forgot to put them in)\n$ mv sucrose.dat maltose.dat ____/____\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n$ mv sucrose.dat maltose.dat ../raw\nRecall that .. refers to the parent directory (i.e. one above the current directory) and that . refers to the current directory.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#copying-files-and-directories",
    "href": "01_cli_conda/shell-intro.html#copying-files-and-directories",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Copying Files and Directories",
    "text": "Copying Files and Directories\nThe cp command works very much like mv, except it copies a file instead of moving it. We can check that it did the right thing using ls with two paths as arguments — like most Unix commands, ls can be given multiple paths at once:\n$ cp quotes.txt thesis/quotations.txt\n$ ls quotes.txt thesis/quotations.txt\nquotes.txt   thesis/quotations.txt\nWe can also copy a directory and all its contents by using the recursive option -r, e.g. to back up a directory:\n$ cp -r thesis thesis_backup\nWe can check the result by listing the contents of both the thesis and thesis_backup directory:\n$ ls thesis thesis_backup\nthesis:\nquotations.txt\n\nthesis_backup:\nquotations.txt\nIt is important to include the -r flag. If you want to copy a directory and you omit this option you will see a message that the directory has been omitted because -r not specified.\n$ cp thesis thesis_backup\ncp: -r not specified; omitting directory 'thesis'\n\n\n\n\n\n\nCautionChallenge: Renaming files\n\n\n\nSuppose that you created a plain-text file in your current directory to contain a list of the statistical tests you will need to do to analyze your data, and named it statstics.txt\nAfter creating and saving this file you realize you misspelled the filename! You want to correct the mistake, which of the following commands could you use to do so?\n\ncp statstics.txt statistics.txt\nmv statstics.txt statistics.txt\nmv statstics.txt .\ncp statstics.txt .\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nNo. While this would create a file with the correct name, the incorrectly named file still exists in the directory and would need to be deleted.\nYes, this would work to rename the file.\nNo, the period(.) indicates where to move the file, but does not provide a new file name; identical file names cannot be created.\nNo, the period(.) indicates where to copy the file, but does not provide a new file name; identical file names cannot be created.\n\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: Moving and copying\n\n\n\nWhat is the output of the closing ls command in the sequence shown below?\n$ pwd\n/Users/jamie/data\n$ ls\nproteins.dat\n$ mkdir recombined\n$ mv proteins.dat recombined/\n$ cp recombined/proteins.dat ../proteins-saved.dat\n$ ls\n\nproteins-saved.dat recombined\nrecombined\nproteins.dat recombined\nproteins-saved.dat\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nWe start in the /Users/jamie/data directory, and create a new folder called recombined. The second line moves (mv) the file proteins.dat to the new folder (recombined). The third line makes a copy of the file we just moved. The tricky part here is where the file was copied to. Recall that .. means ‘go up a level’, so the copied file is now in /Users/jamie. Notice that .. is interpreted with respect to the current working directory, not with respect to the location of the file being copied. So, the only thing that will show using ls (in /Users/jamie/data) is the recombined folder.\n\nNo, see explanation above. proteins-saved.dat is located at /Users/jamie\nYes\nNo, see explanation above. proteins.dat is located at /Users/jamie/data/recombined\nNo, see explanation above. proteins-saved.dat is located at /Users/jamie",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#removing-files-and-directories",
    "href": "01_cli_conda/shell-intro.html#removing-files-and-directories",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Removing files and directories",
    "text": "Removing files and directories\nReturning to the shell-lesson-data/exercise-data/writing directory, let’s tidy up this directory by removing the quotes.txt file we created. The Unix command we’ll use for this is rm (short for ‘remove’):\n$ rm quotes.txt\nWe can confirm the file has gone using ls:\n$ ls quotes.txt\nls: cannot access 'quotes.txt': No such file or directory\n\n\n\n\n\n\nImportantDeleting is forever\n\n\n\nThe Unix shell doesn’t have a trash bin that we can recover deleted files from (though most graphical interfaces to Unix do). Instead, when we delete files, they are unlinked from the file system so that their storage space on disk can be recycled. Tools for finding and recovering deleted files do exist, but there’s no guarantee they’ll work in any particular situation, since the computer may recycle the file’s disk space right away.\n\n\n\n\n\n\n\n\nCautionChallenge: Using rm Safely\n\n\n\nWhat happens when we execute rm -i thesis_backup/quotations.txt? Why would we want this protection when using rm?\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nrm: remove regular file 'thesis_backup/quotations.txt'? y\nThe -i option will prompt before (every) removal (use Y to confirm deletion or N to keep the file). The Unix shell doesn’t have a trash bin, so all the files removed will disappear forever. By using the -i option, we have the chance to check that we are deleting only the files that we want to remove.\n\n\n\n\n\nIf we try to remove the thesis directory using rm thesis, we get an error message:\n$ rm thesis\nrm: cannot remove 'thesis': Is a directory\nThis happens because rm by default only works on files, not directories.\nrm can remove a directory and all its contents if we use the recursive option -r, and it will do so without any confirmation prompts:\n$ rm -r thesis\nGiven that there is no way to retrieve files deleted using the shell, rm -r should be used with great caution (you might consider adding the interactive option rm -r -i).",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#operations-with-multiple-filenames",
    "href": "01_cli_conda/shell-intro.html#operations-with-multiple-filenames",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Operations with Multiple Filenames",
    "text": "Operations with Multiple Filenames\nOftentimes one needs to copy or move several files at once. This can be done by providing a list of individual filenames, or specifying a naming pattern using wildcards. Wildcards are special characters that can be used to represent unknown characters or sets of characters when navigating the Unix file system.\n\n\n\n\n\n\nCautionChallenge: Copy with Multiple Filenames\n\n\n\nFor this exercise, you can test the commands in the shell-lesson-data/exercise-data directory.\nIn the example below, what does cp do when given several filenames and a directory name?\n$ mkdir backup\n$ cp creatures/minotaur.dat creatures/unicorn.dat backup/\nIn the example below, what does cp do when given three or more file names?\n$ cd creatures\n$ ls -F\nbasilisk.dat  minotaur.dat  unicorn.dat\n$ cp minotaur.dat unicorn.dat basilisk.dat\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nIf given more than one file name followed by a directory name (i.e. the destination directory must be the last argument), cp copies the files to the named directory.\nIf given three file names, cp throws an error such as the one below, because it is expecting a directory name as the last argument.\ncp: target 'basilisk.dat' is not a directory",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#using-wildcards-for-accessing-multiple-files-at-once",
    "href": "01_cli_conda/shell-intro.html#using-wildcards-for-accessing-multiple-files-at-once",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Using Wildcards for Accessing Multiple Files at Once",
    "text": "Using Wildcards for Accessing Multiple Files at Once\n* is a wildcard, which represents zero or more other characters. Let’s consider the shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, and every file that ends with ‘.pdb’. On the other hand, p*.pdb only represents pentane.pdb and propane.pdb, because the ‘p’ at the front can only represent filenames that begin with the letter ‘p’.\n? is also a wildcard, but it represents exactly one character. So ?ethane.pdb could represent methane.pdb whereas *ethane.pdb represents both ethane.pdb and methane.pdb.\nWildcards can be used in combination with each other. For example, ???ane.pdb indicates three characters followed by ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb.\nWhen the shell sees a wildcard, it expands the wildcard to create a list of matching filenames before running the preceding command. As an exception, if a wildcard expression does not match any file, Bash will pass the expression as an argument to the command as it is. For example, typing ls *.pdf in the alkanes directory (which contains only files with names ending with .pdb) results in an error message that there is no file called *.pdf. However, generally commands like wc and ls see the lists of file names matching these expressions, but not the wildcards themselves. It is the shell, not the other programs, that expands the wildcards.\n\n\n\n\n\n\nCautionChallenge: List filenames matching a pattern\n\n\n\nWhen run in the alkanes directory, which ls command(s) will produce this output?\nethane.pdb   methane.pdb\n\nls *t*ane.pdb\nls *t?ne.*\nls *t??ne.pdb\nls ethane.*\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nThe solution is 3.\n1. shows all files whose names contain zero or more characters (*) followed by the letter t, then zero or more characters (*) followed by ane.pdb. This gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb.\n2. shows all files whose names start with zero or more characters (*) followed by the letter t, then a single character (?), then ne. followed by zero or more characters (*). This will give us octane.pdb and pentane.pdb but doesn’t match anything which ends in thane.pdb.\n3. fixes the problems of option 2 by matching two characters (??) between t and ne. This is the solution.\n4. only shows files starting with ethane..\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: More on wildcards\n\n\n\nSam has a directory containing calibration data, datasets, and descriptions of the datasets:\n.\n├── 2015-10-23-calibration.txt\n├── 2015-10-23-dataset1.txt\n├── 2015-10-23-dataset2.txt\n├── 2015-10-23-dataset_overview.txt\n├── 2015-10-26-calibration.txt\n├── 2015-10-26-dataset1.txt\n├── 2015-10-26-dataset2.txt\n├── 2015-10-26-dataset_overview.txt\n├── 2015-11-23-calibration.txt\n├── 2015-11-23-dataset1.txt\n├── 2015-11-23-dataset2.txt\n├── 2015-11-23-dataset_overview.txt\n├── backup\n│   ├── calibration\n│   └── datasets\n└── send_to_bob\n    ├── all_datasets_created_on_a_23rd\n    └── all_november_files\nBefore heading off to another field trip, she wants to back up her data and send some datasets to her colleague Bob. Sam uses the following commands to get the job done:\n$ cp *dataset* backup/datasets\n$ cp ____calibration____ backup/calibration\n$ cp 2015-____-____ send_to_bob/all_november_files/\n$ cp ____ send_to_bob/all_datasets_created_on_a_23rd/\nHelp Sam by filling in the blanks.\nThe resulting directory structure should look like this\n.\n├── 2015-10-23-calibration.txt\n├── 2015-10-23-dataset1.txt\n├── 2015-10-23-dataset2.txt\n├── 2015-10-23-dataset_overview.txt\n├── 2015-10-26-calibration.txt\n├── 2015-10-26-dataset1.txt\n├── 2015-10-26-dataset2.txt\n├── 2015-10-26-dataset_overview.txt\n├── 2015-11-23-calibration.txt\n├── 2015-11-23-dataset1.txt\n├── 2015-11-23-dataset2.txt\n├── 2015-11-23-dataset_overview.txt\n├── backup\n│   ├── calibration\n│   │   ├── 2015-10-23-calibration.txt\n│   │   ├── 2015-10-26-calibration.txt\n│   │   └── 2015-11-23-calibration.txt\n│   └── datasets\n│       ├── 2015-10-23-dataset1.txt\n│       ├── 2015-10-23-dataset2.txt\n│       ├── 2015-10-23-dataset_overview.txt\n│       ├── 2015-10-26-dataset1.txt\n│       ├── 2015-10-26-dataset2.txt\n│       ├── 2015-10-26-dataset_overview.txt\n│       ├── 2015-11-23-dataset1.txt\n│       ├── 2015-11-23-dataset2.txt\n│       └── 2015-11-23-dataset_overview.txt\n└── send_to_bob\n    ├── all_datasets_created_on_a_23rd\n    │   ├── 2015-10-23-dataset1.txt\n    │   ├── 2015-10-23-dataset2.txt\n    │   ├── 2015-10-23-dataset_overview.txt\n    │   ├── 2015-11-23-dataset1.txt\n    │   ├── 2015-11-23-dataset2.txt\n    │   └── 2015-11-23-dataset_overview.txt\n    └── all_november_files\n        ├── 2015-11-23-calibration.txt\n        ├── 2015-11-23-dataset1.txt\n        ├── 2015-11-23-dataset2.txt\n        └── 2015-11-23-dataset_overview.txt\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n$ cp *calibration.txt backup/calibration\n$ cp 2015-11-* send_to_bob/all_november_files/\n$ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: Organizing directories and files\n\n\n\nJamie is working on a project, and she sees that her files aren’t very well organized:\n$ ls -F\nanalyzed/  fructose.dat    raw/   sucrose.dat\nThe fructose.dat and sucrose.dat files contain output from her data analysis. What command(s) covered in this lesson does she need to run so that the commands below will produce the output shown?\n$ ls -F\nanalyzed/   raw/\n$ ls analyzed\nfructose.dat    sucrose.dat\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nmv *.dat analyzed\nJamie needs to move her files fructose.dat and sucrose.dat to the analyzed directory. The shell will expand *.dat to match all .dat files in the current directory. The mv command then moves the list of .dat files to the ‘analyzed’ directory.\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: Reproduce a folder structure\n\n\n\nYou’re starting a new experiment and would like to duplicate the directory structure from your previous experiment so you can add new data.\nAssume that the previous experiment is in a folder called 2016-05-18, which contains a data folder that in turn contains folders named raw and processed that contain data files. The goal is to copy the folder structure of the 2016-05-18 folder into a folder called 2016-05-20 so that your final directory structure looks like this:\n2016-05-20/\n└── data\n   ├── processed\n   └── raw\nWhich of the following set of commands would achieve this objective? What would the other commands do?\n$ mkdir 2016-05-20\n$ mkdir 2016-05-20/data\n$ mkdir 2016-05-20/data/processed\n$ mkdir 2016-05-20/data/raw\n$ mkdir 2016-05-20\n$ cd 2016-05-20\n$ mkdir data\n$ cd data\n$ mkdir raw processed\n$ mkdir 2016-05-20/data/raw\n$ mkdir 2016-05-20/data/processed\n$ mkdir -p 2016-05-20/data/raw\n$ mkdir -p 2016-05-20/data/processed\n$ mkdir 2016-05-20\n$ cd 2016-05-20\n$ mkdir data\n$ mkdir raw processed\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nThe first two sets of commands achieve this objective. The first set uses relative paths to create the top-level directory before the subdirectories.\nThe third set of commands will give an error because the default behavior of mkdir won’t create a subdirectory of a non-existent directory: the intermediate level folders must be created first.\nThe fourth set of commands achieve this objective. Remember, the -p option, followed by a path of one or more directories, will cause mkdir to create any intermediate subdirectories as required.\nThe final set of commands generates the ‘raw’ and ‘processed’ directories at the same level as the ‘data’ directory.\n\n\n\n\n\n\n\n\n\n\n\nNoteKey Points\n\n\n\n\ncp [old] [new] copies a file.\nmkdir [path] creates a new directory.\nmv [old] [new] moves (renames) a file or directory.\nrm [path] removes (deletes) a file.\n* matches zero or more characters in a filename, so *.txt matches all files ending in .txt.\n? matches any single character in a filename, so ?.txt matches a.txt but not any.txt.\nUse of the Control key may be described in many ways, including Ctrl-X, Control-X, and ^X.\nThe shell does not have a trash bin: once something is deleted, it’s really gone.\nMost files’ names are something.extension. The extension isn’t required, and doesn’t guarantee anything, but is normally used to indicate the type of data in the file.\nDepending on the type of work you do, you may need a more powerful text editor than Nano.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#capturing-output-from-commands",
    "href": "01_cli_conda/shell-intro.html#capturing-output-from-commands",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Capturing output from commands",
    "text": "Capturing output from commands\n\nOutput page by page with less\nWe’ll continue to use cat in this lesson, for convenience and consistency, but it has the disadvantage that it always dumps the whole file onto your screen. More useful in practice is the command less (e.g. less lengths.txt). This displays a screenful of the file, and then stops. You can go forward one screenful by pressing the spacebar, or back one by pressing b. Press q to quit.\nWhich of these files contains the fewest lines? It’s an easy question to answer when there are only six files, but what if there were 6000? Our first step toward a solution is to run the command:\n$ wc -l *.pdb &gt; lengths.txt\nThe greater than symbol, &gt;, tells the shell to redirect the command’s output to a file instead of printing it to the screen. This command prints no screen output, because everything that wc would have printed has gone into the file lengths.txt instead. If the file doesn’t exist prior to issuing the command, the shell will create the file. If the file exists already, it will be silently overwritten, which may lead to data loss. Thus, redirect commands require caution.\nls lengths.txt confirms that the file exists:\n$ ls lengths.txt\nlengths.txt\nWe can now send the content of lengths.txt to the screen using cat lengths.txt. The cat command gets its name from ‘concatenate’ i.e. join together, and it prints the contents of files one after another. There’s only one file in this case, so cat just shows us what it contains:\n$ cat lengths.txt\n  20  cubane.pdb\n  12  ethane.pdb\n   9  methane.pdb\n  30  octane.pdb\n  21  pentane.pdb\n  15  propane.pdb\n 107  total\n\n\nFiltering output\nNext we’ll use the sort command to sort the contents of the lengths.txt file. But first we’ll do an exercise to learn a little about the sort command:\n\n\n\n\n\n\nCautionChallenge: What does sort -n do?\n\n\n\nThe file shell-lesson-data/exercise-data/numbers.txt contains the following lines:\n10\n2\n19\n22\n6\nIf we run sort on this file, the output is:\n10\n19\n2\n22\n6\nIf we run sort -n on the same file, we get this instead:\n2\n6\n10\n19\n22\nExplain why -n has this effect.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nThe -n option specifies a numerical rather than an alphanumerical sort.\n\n\n\n\n\nWe will also use the -n option to specify that the sort is numerical instead of alphanumerical. This does not change the file; instead, it sends the sorted result to the screen:\n$ sort -n lengths.txt\n  9  methane.pdb\n 12  ethane.pdb\n 15  propane.pdb\n 20  cubane.pdb\n 21  pentane.pdb\n 30  octane.pdb\n107  total\nWe can put the sorted list of lines in another temporary file called sorted-lengths.txt by putting &gt; sorted-lengths.txt after the command, just as we used &gt; lengths.txt to put the output of wc into lengths.txt. Once we’ve done that, we can run another command called head to get the first few lines in sorted-lengths.txt:\n$ sort -n lengths.txt &gt; sorted-lengths.txt\n$ head -n 1 sorted-lengths.txt\n  9  methane.pdb\nUsing -n 1 with head tells it that we only want the first line of the file; -n 20 would get the first 20, and so on. Since sorted-lengths.txt contains the lengths of our files ordered from least to greatest, the output of head must be the file with the fewest lines.\n\n\n\n\n\n\nImportantRedirecting to the same file\n\n\n\nIt’s a very bad idea to try redirecting the output of a command that operates on a file to the same file. For example:\n$ sort -n lengths.txt &gt; lengths.txt\nDoing something like this may give you incorrect results and/or delete the contents of lengths.txt.\n\n\n\n\n\n\n\n\nCautionChallenge: What Does &gt;&gt; Mean?\n\n\n\nWe have seen the use of &gt;, but there is a similar operator &gt;&gt; which works slightly differently. We’ll learn about the differences between these two operators by printing some strings. We can use the echo command to print strings e.g.\n$ echo The echo command prints text\nThe echo command prints text\nNow test the commands below to reveal the difference between the two operators:\n$ echo hello &gt; testfile01.txt\nand:\n$ echo hello &gt;&gt; testfile02.txt\nHint: Try executing each command twice in a row and then examining the output files.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nIn the first example with &gt;, the string ‘hello’ is written to testfile01.txt, but the file gets overwritten each time we run the command.\nWe see from the second example that the &gt;&gt; operator also writes ‘hello’ to a file (in this case testfile02.txt), but appends the string to the file if it already exists (i.e. when we run it for the second time).\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: appending data\n\n\n\nWe have already met the head command, which prints lines from the start of a file. tail is similar, but prints lines from the end of a file instead.\nConsider the file shell-lesson-data/exercise-data/animal-counts/animals.csv. After these commands, select the answer that corresponds to the file animals-subset.csv:\n$ head -n 3 animals.csv &gt; animals-subset.csv\n$ tail -n 2 animals.csv &gt;&gt; animals-subset.csv\n\nThe first three lines of animals.csv\nThe last two lines of animals.csv\nThe first three lines and the last two lines of animals.csv\nThe second and third lines of animals.csv\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nOption 3 is correct. For option 1 to be correct we would only run the head command. For option 2 to be correct we would only run the tail command. For option 4 to be correct we would have to pipe the output of head into tail -n 2 by doing head -n 3 animals.csv | tail -n 2 &gt; animals-subset.csv",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#passing-output-to-another-command",
    "href": "01_cli_conda/shell-intro.html#passing-output-to-another-command",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Passing output to another command",
    "text": "Passing output to another command\nIn our example of finding the file with the fewest lines, we are using two intermediate files lengths.txt and sorted-lengths.txt to store output. This is a confusing way to work because even once you understand what wc, sort, and head do, those intermediate files make it hard to follow what’s going on. We can make it easier to understand by running sort and head together:\n$ sort -n lengths.txt | head -n 1\n  9  methane.pdb\nThe vertical bar, |, between the two commands is called a pipe. It tells the shell that we want to use the output of the command on the left as the input to the command on the right.\nThis has removed the need for the sorted-lengths.txt file.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#combining-multiple-commands",
    "href": "01_cli_conda/shell-intro.html#combining-multiple-commands",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Combining multiple commands",
    "text": "Combining multiple commands\nNothing prevents us from chaining pipes consecutively. We can for example send the output of wc directly to sort, and then send the resulting output to head. This removes the need for any intermediate files.\nWe’ll start by using a pipe to send the output of wc to sort:\n$ wc -l *.pdb | sort -n\n   9 methane.pdb\n  12 ethane.pdb\n  15 propane.pdb\n  20 cubane.pdb\n  21 pentane.pdb\n  30 octane.pdb\n 107 total\nWe can then send that output through another pipe, to head, so that the full pipeline becomes:\n$ wc -l *.pdb | sort -n | head -n 1\n   9  methane.pdb\nThis is exactly like a mathematician nesting functions like log(3x) and saying ‘the log of three times x’. In our case, the algorithm is ‘head of sort of line count of *.pdb’.\nThe redirection and pipes used in the last few commands are illustrated below:\n\n\n\n\n\n\n\nCautionChallenge: Piping commands together\n\n\n\nIn our current directory, we want to find the 3 files which have the least number of lines. Which command listed below would work?\n\nwc -l * &gt; sort -n &gt; head -n 3\nwc -l * | sort -n | head -n 1-3\nwc -l * | head -n 3 | sort -n\nwc -l * | sort -n | head -n 3\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nOption 4 is the solution. The pipe character | is used to connect the output from one command to the input of another. &gt; is used to redirect standard output to a file. Try it in the shell-lesson-data/exercise-data/alkanes directory!",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#tools-designed-to-work-together",
    "href": "01_cli_conda/shell-intro.html#tools-designed-to-work-together",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Tools designed to work together",
    "text": "Tools designed to work together\nThis idea of linking programs together is why Unix has been so successful. Instead of creating enormous programs that try to do many different things, Unix programmers focus on creating lots of simple tools that each do one job well, and that work well with each other. This programming model is called ‘pipes and filters’. We’ve already seen pipes; a filter is a program like wc or sort that transforms a stream of input into a stream of output. Almost all of the standard Unix tools can work this way. Unless told to do otherwise, they read from standard input, do something with what they’ve read, and write to standard output.\nThe key is that any program that reads lines of text from standard input and writes lines of text to standard output can be combined with every other program that behaves this way as well. You can and should write your programs this way so that you and other people can put those programs into pipes to multiply their power.\n\n\n\n\n\n\nCautionChallenge: Pipe Reading Comprehension\n\n\n\nA file called animals.csv (in the shell-lesson-data/exercise-data/animal-counts folder) contains the following data:\n2012-11-05,deer,5\n2012-11-05,rabbit,22\n2012-11-05,raccoon,7\n2012-11-06,rabbit,19\n2012-11-06,deer,2\n2012-11-06,fox,4\n2012-11-07,rabbit,16\n2012-11-07,bear,1\nWhat text passes through each of the pipes and the final redirect in the pipeline below? Note, the sort -r command sorts in reverse order.\n$ cat animals.csv | head -n 5 | tail -n 3 | sort -r &gt; final.txt\nHint: build the pipeline up one command at a time to test your understanding\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nThe head command extracts the first 5 lines from animals.csv. Then, the last 3 lines are extracted from the previous 5 by using the tail command. With the sort -r command those 3 lines are sorted in reverse order. Finally, the output is redirected to a file: final.txt. The content of this file can be checked by executing cat final.txt. The file should contain the following lines:\n2012-11-06,rabbit,19\n2012-11-06,deer,2\n2012-11-05,raccoon,7\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: Pipe Construction\n\n\n\nFor the file animals.csv from the previous exercise, consider the following command:\n$ cut -d , -f 2 animals.csv\nThe cut command is used to remove or ‘cut out’ certain sections of each line in the file, and cut expects the lines to be separated into columns by a Tab character. A character used in this way is called a delimiter. In the example above we use the -d option to specify the comma as our delimiter character. We have also used the -f option to specify that we want to extract the second field (column). This gives the following output:\ndeer\nrabbit\nraccoon\nrabbit\ndeer\nfox\nrabbit\nbear\nThe uniq command filters out adjacent matching lines in a file. How could you extend this pipeline (using uniq and another command) to find out what animals the file contains (without any duplicates in their names)?\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n$ cut -d , -f 2 animals.csv | sort | uniq\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: Which Pipe?\n\n\n\nThe file animals.csv contains 8 lines of data formatted as follows:\n2012-11-05,deer,5\n2012-11-05,rabbit,22\n2012-11-05,raccoon,7\n2012-11-06,rabbit,19\n...\nThe uniq command has a -c option which gives a count of the number of times a line occurs in its input. Assuming your current directory is shell-lesson-data/exercise-data/animal-counts, what command would you use to produce a table that shows the total count of each type of animal in the file?\n\nsort animals.csv | uniq -c\nsort -t, -k2,2 animals.csv | uniq -c\ncut -d, -f 2 animals.csv | uniq -c\ncut -d, -f 2 animals.csv | sort | uniq -c\ncut -d, -f 2 animals.csv | sort | uniq -c | wc -l\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nOption 4. is the correct answer. If you have difficulty understanding why, try running the commands, or sub-sections of the pipelines (make sure you are in the shell-lesson-data/exercise-data/animal-counts directory).",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#your-pipeline-checking-files",
    "href": "01_cli_conda/shell-intro.html#your-pipeline-checking-files",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Your Pipeline: Checking Files",
    "text": "Your Pipeline: Checking Files\nYou have run your samples through the assay machines and created 17 files in the north-pacific-gyre directory described earlier. As a quick check, starting from the shell-lesson-data directory, you type:\n$ cd north-pacific-gyre\n$ wc -l *.txt\nThe output is 18 lines that look like this:\n300 NENE01729A.txt\n300 NENE01729B.txt\n300 NENE01736A.txt\n300 NENE01751A.txt\n300 NENE01751B.txt\n300 NENE01812A.txt\n... ...\nNow you type this:\n$ wc -l *.txt | sort -n | head -n 5\n 240 NENE02018B.txt\n 300 NENE01729A.txt\n 300 NENE01729B.txt\n 300 NENE01736A.txt\n 300 NENE01751A.txt\nWhoops: one of the files is 60 lines shorter than the others. When you go back and check it, you see that you did that assay at 8:00 on a Monday morning — someone was probably in using the machine on the weekend, and you forgot to reset it. Before re-running that sample, you check to see if any files have too much data:\n$ wc -l *.txt | sort -n | tail -n 5\n 300 NENE02040B.txt\n 300 NENE02040Z.txt\n 300 NENE02043A.txt\n 300 NENE02043B.txt\n5040 total\nThose numbers look good — but what’s that ‘Z’ doing there in the third-to-last line? All of your samples should be marked ‘A’ or ‘B’; by convention, your lab uses ‘Z’ to indicate samples with missing information. To find others like it, you do this:\n$ ls *Z.txt\nNENE01971Z.txt    NENE02040Z.txt\nSure enough, when you check the log on your laptop, there’s no depth recorded for either of those samples. Since it’s too late to get the information any other way, you must exclude those two files from your analysis. You could delete them using rm, but there are actually some analyses you might do later where depth doesn’t matter, so instead, you’ll have to be careful later on to select files using the wildcard expressions NENE*A.txt NENE*B.txt.\n\n\n\n\n\n\nNoteKey Points\n\n\n\n\nwc counts lines, words, and characters in its inputs.\ncat displays the contents of its inputs.\nsort sorts its inputs.\nhead displays the first 10 lines of its input by default without additional arguments.\ntail displays the last 10 lines of its input by default without additional arguments.\ncommand &gt; [file] redirects a command’s output to a file (overwriting any existing content).\ncommand &gt;&gt; [file] appends a command’s output to a file.\n[first] | [second] is a pipeline: the output of the first command is used as the input to the second.\nThe best way to use the shell is to use pipes to combine simple single-purpose programs (filters).’ll have to be careful later on to select files using the wildcard expressions NENE*A.txt NENE*B.txt.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#your-pipeline-processing-files",
    "href": "01_cli_conda/shell-intro.html#your-pipeline-processing-files",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Your pipeline: Processing files",
    "text": "Your pipeline: Processing files\nYou are now ready to process your data files using goostats.sh — a shell script written by your supervisor. This calculates some statistics from a protein sample file and takes two arguments:\n\nan input file (containing the raw data)\nan output file (to store the calculated statistics)\n\nSince you are still learning how to use the shell, you decides to build up the required commands in stages. Your first step is to make sure that you can select the right input files — remember, these are ones whose names end in ‘A’ or ‘B’, rather than ‘Z’. Moving to the north-pacific-gyre directory, you type:\n$ cd\n$ cd Desktop/shell-lesson-data/north-pacific-gyre\n$ for datafile in NENE*A.txt NENE*B.txt\n&gt; do\n&gt;     echo $datafile\n&gt; done\nNENE01729A.txt\nNENE01736A.txt\nNENE01751A.txt\n\n...\nNENE02040B.txt\nNENE02043B.txt\nYour next step is to decide what to call the files that the goostats.sh analysis program will create. Prefixing each input file’s name with ‘stats’ seems simple, so you modify your loop to do that:\n$ for datafile in NENE*A.txt NENE*B.txt\n&gt; do\n&gt;     echo $datafile stats-$datafile\n&gt; done\nNENE01729A.txt stats-NENE01729A.txt\nNENE01736A.txt stats-NENE01729A.txt\nNENE01751A.txt stats-NENE01729A.txt\n...\nNENE02040B.txt stats-NENE02040B.txt\nNENE02043B.txt stats-NENE02043B.txt\nYou haven’t actually run goostats.sh yet, but now you’re sure you can select the right files and generate the right output filenames.\nTyping in commands over and over again is becoming tedious, though, and you are worried about making mistakes, so instead of re-entering your loop, you press ↑. In response, the shell re-displays the whole loop on one line (using semi-colons to separate the pieces):\n$ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done\nUsing the ←, you navigate to the echo command and change it to bash goostats.sh:\n$ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done\nWhen you press Enter, the shell runs the modified command. However, nothing appears to happen — there is no output. After a moment, you realize that since your script doesn’t print anything to the screen any longer, you has no idea whether it is running, much less how quickly. You kill the running command by typing Ctrl+C, uses ↑ to repeat the command, and edit it to read:\n$ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile;\nbash goostats.sh $datafile stats-$datafile; done\n\n\n\n\n\n\nTipBeginning and end\n\n\n\nWe can move to the beginning of a line in the shell by typing Ctrl+A and to the end using Ctrl+E.\n\n\nWhen you run your program now, it produces one line of output every five seconds or so:\nNENE01729A.txt\nNENE01736A.txt\nNENE01751A.txt\n...\n1518 times 5 seconds, divided by 60, tells her that her script will take about two hours to run. As a final check, you open another terminal window, go into north-pacific-gyre, and uses cat stats-NENE01729B.txt to examine one of the output files. It looks good, so you decides to get some coffee and catch up on your reading.\n\n\n\n\n\n\nTipThose who know history can choose to repeat it\n\n\n\nAnother way to repeat previous work is to use the history command to get a list of the last few hundred commands that have been executed, and then to use !123 (where ‘123’ is replaced by the command number) to repeat one of those commands. For example, if you types this:\n$ history | tail -n 5\n456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done\n457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done\n458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done\n459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile\nstats-$datafile; done\n460  history | tail -n 5\nthen you can re-run goostats.sh on the files simply by typing !459.\n\n\n\n\n\n\n\n\nTipMore history commands\n\n\n\nThere are a number of other shortcut commands for getting at the history.\n\nCtrl+R enters a history search mode ‘reverse-i-search’ and finds the most recent command in your history that matches the text you enter next. Press Ctrl+R one or more additional times to search for earlier matches. You can then use the left and right arrow keys to choose that line and edit it then hit Return to run the command.\n!! retrieves the immediately preceding command (you may or may not find this more convenient than using ↑)\n!$ retrieves the last word of the last command. That’s useful more often than you might expect: after bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, you can type less !$ to look at the file stats-NENE01729B.txt, which is quicker than doing ↑ and editing the command-line.\n\n\n\n\n\n\n\n\n\nNoteKey Points\n\n\n\n\nA for loop repeats commands once for every thing in a list.\nEvery for loop needs a variable to refer to the thing it is currently operating on.\nUse $name to expand a variable (i.e., get its value). ${name} can also be used.\nDo not use spaces, quotes, or wildcard characters such as ‘*’ or ‘?’ in filenames, as it complicates variable expansion.\nGive files consistent names that are easy to match with wildcard patterns to make it easy to select them for looping.\nUse the up-arrow key to scroll up through previous commands to edit and repeat them.\nUse Ctrl+R to search through the previously entered commands.\nUse history to display recent commands, and ![number] to repeat a command by number.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "01_cli_conda/shell-intro.html#your-pipeline-creating-a-script",
    "href": "01_cli_conda/shell-intro.html#your-pipeline-creating-a-script",
    "title": "Introduction to Command Line Interface and the Unix Shell",
    "section": "Your pipeline: Creating a script",
    "text": "Your pipeline: Creating a script\nYour supervisor insisted that all your analytics must be reproducible. The easiest way to capture all the steps is in a script.\nFirst we return to your project directory:\n$ cd ../../north-pacific-gyre/\nYou create a file using nano …\n$ nano do-stats.sh\n…which contains the following:\n# Calculate stats for data files.\nfor datafile in \"$@\"\ndo\n    echo $datafile\n    bash goostats.sh $datafile stats-$datafile\ndone\nYou save this in a file called do-stats.sh so that you can now re-do the first stage of your analysis by typing:\n$ bash do-stats.sh NENE*A.txt NENE*B.txt\nYou can also do this:\n$ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l\nso that the output is just the number of files processed rather than the names of the files that were processed.\nOne thing to note about your script is that it lets the person running it decide what files to process. You could have written it as:\n# Calculate stats for Site A and Site B data files.\nfor datafile in NENE*A.txt NENE*B.txt\ndo\n    echo $datafile\n    bash goostats.sh $datafile stats-$datafile\ndone\nThe advantage is that this always selects the right files: you doesn’t have to remember to exclude the ‘Z’ files. The disadvantage is that it always selects just those files — you can’t run it on all files (including the ‘Z’ files), or on the ‘G’ or ‘H’ files your colleagues in Antarctica are producing, without editing the script. If you wanted to be more adventurous, you could modify your script to check for command-line arguments, and use NENE*A.txt NENE*B.txt if none were provided. Of course, this introduces another tradeoff between flexibility and complexity.\n\n\n\n\n\n\nCautionChallenge: Variables in shell scripts\n\n\n\nIn the alkanes directory, imagine you have a shell script called script.sh containing the following commands:\nhead -n $2 $1\ntail -n $3 $1\nWhile you are in the alkanes directory, you type the following command:\n$ bash script.sh '*.pdb' 1 1\nWhich of the following outputs would you expect to see?\n\nAll of the lines between the first and the last lines of each file ending in .pdb in the alkanes directory\nThe first and the last line of each file ending in .pdb in the alkanes directory\nThe first and the last line of each file in the alkanes directory\nAn error because of the quotes around *.pdb\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nThe correct answer is 2.\nThe special variables $1, $2 and $3 represent the command line arguments given to the script, such that the commands run are:\n$ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\n$ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb\nThe shell does not expand '*.pdb' because it is enclosed by quote marks. As such, the first argument to the script is '*.pdb' which gets expanded within the script by head and tail\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: Find the longest file with a given extension\n\n\n\nWrite a shell script called longest.sh that takes the name of a directory and a filename extension as its arguments, and prints out the name of the file with the most lines in that directory with that extension. For example:\n$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb\nwould print the name of the .pdb file in shell-lesson-data/exercise-data/alkanes that has the most lines.\nFeel free to test your script on another directory e.g.\n$ bash longest.sh shell-lesson-data/exercise-data/writing txt\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n# Shell script which takes two arguments:\n#    1. a directory name\n#    2. a file extension\n# and prints the name of the file in that directory\n# with the most lines which matches the file extension.\n\nwc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1\nThe first part of the pipeline, wc -l $1/*.$2 | sort -n, counts the lines in each file and sorts them numerically (largest last). When there’s more than one file, wc also outputs a final summary line, giving the total number of lines across all files. We use tail -n 2 | head -n 1 to throw away this last line.\nWith wc -l $1/*.$2 | sort -n | tail -n 1 we’ll see the final summary line: we can build our pipeline up in pieces to be sure we understand the output.\n\n\n\n\n\n\n\n\n\n\n\nCautionChallenge: Script reading comprehension\n\n\n\nFor this question, consider the shell-lesson-data/exercise-data/alkanes directory once again. This contains a number of .pdb files in addition to any other files you may have created. Explain what each of the following three scripts would do when run as bash script1.sh *.pdb, bash script2.sh *.pdb, and bash script3.sh *.pdb respectively.\n# Script 1\necho *.*\n# Script 2\nfor filename in $1 $2 $3\ndo\n    cat $filename\ndone\n# Script 3\necho $@.pdb\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\nIn each case, the shell expands the wildcard in *.pdb before passing the resulting list of file names as arguments to the script.\nScript 1 would print out a list of all files containing a dot in their name. The arguments passed to the script are not actually used anywhere in the script.\nScript 2 would print the contents of the first 3 files with a .pdb file extension. $1, $2, and $3 refer to the first, second, and third argument respectively.\nScript 3 would print all the arguments to the script (i.e. all the .pdb files), followed by .pdb. $@ refers to all the arguments given to a shell script.\ncubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb\n\n\n\n\n\n\n\n\n\n\n\nNoteKey Points\n\n\n\n\nSave commands in files (usually called shell scripts) for re-use.\nbash [filename] runs the commands saved in a file.\n$@ refers to all of a shell script’s command-line arguments.\n$1, $2, etc., refer to the first command-line argument, the second command-line argument, etc.\nPlace variables in quotes if the values might have spaces in them.\nLetting users decide what files to process is more flexible and more consistent with built-in Unix commands.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments",
      "Introduction to Command Line Interface and the Unix Shell"
    ]
  },
  {
    "objectID": "02_python/python-3.html",
    "href": "02_python/python-3.html",
    "title": "3. Functions, documentation, strings, files",
    "section": "",
    "text": "A Function is a named sequence of statements which accomplish a task. They promote modularity, making our code less complex, easier to understand and encourage code-reuse.\nWhen you “run” a defined function it’s known as a function call. Functions are designed to be written once, but called many times.\nWe’ve seen functions before:\n\n\n# We call functions all the time\n# input(). random.randint(), and int() are all functions!\nimport random\nx = input(\"Enter Name: \")  \ny = random.randint(1, 10)  #random is the module, randint() is the function\nz = int(\"9\")\nprint(x, y, z)\n\n\n\n\nFunctions are like their own little programs. They take input, which we call the function arguments (or parameters) and give us back output that we refer to as return values.\nINPUT      ==&gt; PROCESS     ==&gt; OUTPUT\nFunction   ==&gt; Function    ==&gt; Function \nArguments      Definition       Return\nWe use the def keyword to define a function.\n\n# Example Function\ndef area_of_triangle(base, height): # &lt;== INPUTs\n    area = 0.5 * base * height\n    return area # &lt;== OUTPUT\n\n# Function call: using your function\na = area_of_triangle(10, 5)\nprint(a)\n\n25.0\n\n\nWhen you call a function you can name your arguments. This allows you to override the order of the arguments.\n\n# These are the same order as defined\narea1 = area_of_triangle(base = 10, height = 5)\n# Different order than defined\narea2 = area_of_triangle(height = 5, base = 10)\nprint(area1, area2)\n\n25.0 25.0\n\n\n\n\n\ndef division_and_modulo(dividend, divisor):\n    quotient = dividend // divisor # int division\n    remainder = dividend % divisor # modulo\n    return quotient, remainder\n\nq, r = division_and_modulo(10, 3)\nprint(f\"10 divided by 3 is {q}, with a remainder of {r}\")\n\n10 divided by 3 is 3, with a remainder of 1\n\n\n\n\n\n\n\n\nCautionCode Challenge 3.1\n\n\n\nWrite a function called average which takes a list of numbers as input then outputs the average of the numbers (sum / count)\nCall your function with an arbitrary list of numbers you create.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\ndef average(list_of_numbers):\n    total = 0\n    count = 0\n    for n in list_of_numbers:\n        total += n\n        count += 1\n    return total/count\n\nnums = [10, 15, 10, 5]\navg = average(nums)\nprint(f\"Average of {nums} is {avg}\")\n\nAverage of [10, 15, 10, 5] is 10.0\n\n\n\n\n\n\n\n\n\n\n\nTypes can be added to the def statement to help the caller understand what type of data the function expects. These are known as type hints\nIn this example the expected arguments are float and the return is float\n\ndef area_of_triangle(base: float, height: float) -&gt; float: \n    area = 0.5 * base *height\n    return area\n\nYou can see type hints in action by calling the function\nRun the cell above to create the function.\nIn the code below, start a left paren ( to see the type hints\n\narea_of_triangle\n\n&lt;function __main__.area_of_triangle(base: float, height: float) -&gt; float&gt;\n\n\n\n\n\nA Docstring is a multi-line comment which explains what the function does to the function caller.\nThe same function with type hints and docstring:\n\ndef area_of_triangle(base: float, height: float) -&gt; float: \n    '''\n    Calculates the area of a triangle given base and height\n    returns the area defined as 1/2 the base times height\n    '''\n    area = 0.5 * base *height\n    return area\n\nYou can see doc strings in action by calling the function\nRun the cell above to create the function. In the code below, start a left paren ( to see the doc string\n\narea_of_triangle\n\n&lt;function __main__.area_of_triangle(base: float, height: float) -&gt; float&gt;\n\n\nYou can also use ? or help() to see the docstring and type hints:\n\nhelp(area_of_triangle)\n\nHelp on function area_of_triangle in module __main__:\n\narea_of_triangle(base: float, height: float) -&gt; float\n    Calculates the area of a triangle given base and height\n    returns the area defined as 1/2 the base times height",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#what-are-functions",
    "href": "02_python/python-3.html#what-are-functions",
    "title": "3. Functions, documentation, strings, files",
    "section": "",
    "text": "A Function is a named sequence of statements which accomplish a task. They promote modularity, making our code less complex, easier to understand and encourage code-reuse.\nWhen you “run” a defined function it’s known as a function call. Functions are designed to be written once, but called many times.\nWe’ve seen functions before:\n\n\n# We call functions all the time\n# input(). random.randint(), and int() are all functions!\nimport random\nx = input(\"Enter Name: \")  \ny = random.randint(1, 10)  #random is the module, randint() is the function\nz = int(\"9\")\nprint(x, y, z)",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#function-definitions",
    "href": "02_python/python-3.html#function-definitions",
    "title": "3. Functions, documentation, strings, files",
    "section": "",
    "text": "Functions are like their own little programs. They take input, which we call the function arguments (or parameters) and give us back output that we refer to as return values.\nINPUT      ==&gt; PROCESS     ==&gt; OUTPUT\nFunction   ==&gt; Function    ==&gt; Function \nArguments      Definition       Return\nWe use the def keyword to define a function.\n\n# Example Function\ndef area_of_triangle(base, height): # &lt;== INPUTs\n    area = 0.5 * base * height\n    return area # &lt;== OUTPUT\n\n# Function call: using your function\na = area_of_triangle(10, 5)\nprint(a)\n\n25.0\n\n\nWhen you call a function you can name your arguments. This allows you to override the order of the arguments.\n\n# These are the same order as defined\narea1 = area_of_triangle(base = 10, height = 5)\n# Different order than defined\narea2 = area_of_triangle(height = 5, base = 10)\nprint(area1, area2)\n\n25.0 25.0\n\n\n\n\n\ndef division_and_modulo(dividend, divisor):\n    quotient = dividend // divisor # int division\n    remainder = dividend % divisor # modulo\n    return quotient, remainder\n\nq, r = division_and_modulo(10, 3)\nprint(f\"10 divided by 3 is {q}, with a remainder of {r}\")\n\n10 divided by 3 is 3, with a remainder of 1\n\n\n\n\n\n\n\n\nCautionCode Challenge 3.1\n\n\n\nWrite a function called average which takes a list of numbers as input then outputs the average of the numbers (sum / count)\nCall your function with an arbitrary list of numbers you create.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\ndef average(list_of_numbers):\n    total = 0\n    count = 0\n    for n in list_of_numbers:\n        total += n\n        count += 1\n    return total/count\n\nnums = [10, 15, 10, 5]\navg = average(nums)\nprint(f\"Average of {nums} is {avg}\")\n\nAverage of [10, 15, 10, 5] is 10.0",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#type-hints",
    "href": "02_python/python-3.html#type-hints",
    "title": "3. Functions, documentation, strings, files",
    "section": "",
    "text": "Types can be added to the def statement to help the caller understand what type of data the function expects. These are known as type hints\nIn this example the expected arguments are float and the return is float\n\ndef area_of_triangle(base: float, height: float) -&gt; float: \n    area = 0.5 * base *height\n    return area\n\nYou can see type hints in action by calling the function\nRun the cell above to create the function.\nIn the code below, start a left paren ( to see the type hints\n\narea_of_triangle\n\n&lt;function __main__.area_of_triangle(base: float, height: float) -&gt; float&gt;",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#docstrings",
    "href": "02_python/python-3.html#docstrings",
    "title": "3. Functions, documentation, strings, files",
    "section": "",
    "text": "A Docstring is a multi-line comment which explains what the function does to the function caller.\nThe same function with type hints and docstring:\n\ndef area_of_triangle(base: float, height: float) -&gt; float: \n    '''\n    Calculates the area of a triangle given base and height\n    returns the area defined as 1/2 the base times height\n    '''\n    area = 0.5 * base *height\n    return area\n\nYou can see doc strings in action by calling the function\nRun the cell above to create the function. In the code below, start a left paren ( to see the doc string\n\narea_of_triangle\n\n&lt;function __main__.area_of_triangle(base: float, height: float) -&gt; float&gt;\n\n\nYou can also use ? or help() to see the docstring and type hints:\n\nhelp(area_of_triangle)\n\nHelp on function area_of_triangle in module __main__:\n\narea_of_triangle(base: float, height: float) -&gt; float\n    Calculates the area of a triangle given base and height\n    returns the area defined as 1/2 the base times height",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#strings-are-sequence-types",
    "href": "02_python/python-3.html#strings-are-sequence-types",
    "title": "3. Functions, documentation, strings, files",
    "section": "Strings are sequence types",
    "text": "Strings are sequence types\nYou can use slice notation like with lists.\nThese are zero based.\nvar[start:stop]\nTakes stop - start characters from var starting at position start\n\nx = \"fudge\"\nprint(x[0:2]) # fu\nprint(x[2:5]) # dge\nprint(x[:4]) # fudg\nprint(x[:]) # fudge\nprint(x[:-1]) # fudg\n\nfu\ndge\nfudg\nfudge\nfudg",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#string-methods",
    "href": "02_python/python-3.html#string-methods",
    "title": "3. Functions, documentation, strings, files",
    "section": "String Methods",
    "text": "String Methods\nhttps://docs.python.org/3/library/stdtypes.html#text-sequence-type-str\nMethod functions attach to the string x.strip()\nCommon methods\nstrip()\nupper()\nlower()\nfind()\ncount()\nsplit()\njoin()\nreplace()\n\n# Samples\ns = \"this is a test\"\nprint(s.count(\"is\")) # 2\nprint(s.count(\"t\"))  # 3\nprint(s.upper()[:4]) # TEST\nprint(s.find(\" a \")) # 7\nprint(s.find(\"this\")) # 9\nprint(\"   x   \".strip()) # x\nprint(s.replace(\"this\", \"that\")) # that is a test\n\n2\n3\nTHIS\n7\n0\nx\nthat is a test\n\n\n\n\n\n\n\n\nCautionCode Challenge 3.2\n\n\n\nWrite a function called cleanup which takes a string as input and returns a “cleaned string” meaning:\n\nremove any ? , . or !\nstrip off the whitespace from the ends\nreturn text in lower case\n\nWrite code to call your function and test it\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\ndef cleanup(text: str) -&gt; str:\n    for ch in \"!?,.\":\n        if ch in text:\n            text = text.replace(ch, \"\")\n    return text.lower().strip()\n\ntext = \"  THis! Is. , a tEST? \"\ncleaned = cleanup(text)\nprint(cleaned)\n\nthis is  a test",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#string-tokenization-and-parsing",
    "href": "02_python/python-3.html#string-tokenization-and-parsing",
    "title": "3. Functions, documentation, strings, files",
    "section": "String Tokenization and Parsing",
    "text": "String Tokenization and Parsing\n\nTokenization is the process of breaking up a string into words, phrases, or symbols.\n\nTokenize a sentence into words.\n\"mike is here\" becomes the iterable ['mike', 'is', 'here']\n\nParsing is the process of extracting meaning from a string.\n\nParse text to a numerical value or date.\nint('45') becomes 45\n\n\n\n# tokenize with split()\n# parse with int(), or float()\n\ntext = \"30 40 90 10\"\ntokens = text.split()\nnumbers = [int(t) for t in tokens]\ntotal = sum(numbers)\nprint(total)\n\n170\n\n\n\n# What you split on is called the delimiter:\ntext = \"name, age, phone, gpa\"\nitems = [ x.upper().strip() for x in text.split(',') ]\nprint(items)\n\n['NAME', 'AGE', 'PHONE', 'GPA']",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#files-persistence",
    "href": "02_python/python-3.html#files-persistence",
    "title": "3. Functions, documentation, strings, files",
    "section": "Files == Persistence",
    "text": "Files == Persistence\n\nFiles add a Persistence Layer to our computing environment where we can store our data after the program completes.\nThink: Saving a game’s progress or saving your work!\nWhen our program Stores data, we open the file for writing.\nWhen our program Reads data, we open the file for reading.\nTo read or write a file we must first open it, which gives us a special variable called a file handle.\nWe then use the file handle to read or write from the file.\nThe read() function reads from the write() function writes to the file through the file handle.\n\n\nReading from a file\n\nfilename = \"data/sample.txt\"\nprint(\"=== All at once ===\")\nwith open(filename, 'r') as handle:\n    contents = handle.read()\n    print(contents)\n\nprint(\"=== A Line at a time ===\")\ni = 1\nwith open(filename, 'r') as handle:\n    for line in handle.readlines():\n        print(i, line.strip())\n        i += 1\n\n=== All at once ===\nThis\nIs\nA\nSample\n=== A Line at a time ===\n1 This\n2 Is\n3 A\n4 Sample\n\n\n\n\nWriting to a file\n\nfilename = \"data/demo.txt\"\nprint(\"=== Create file and write to it ===\")\nwith open(filename, \"w\") as f:\n    f.write(\"message!\\n\")\n\nprint(\"=== Append (add to end) of existing file ===\")\nwith open(filename, \"a\") as f:\n    f.write(\"message # 2!\\n\")\n\n=== Create file and write to it ===\n=== Append (add to end) of existing file ===\n\n\n\n%%bash\n# switch to bash interpreter\ncat data/demo.txt\n\nmessage!\nmessage # 2!\n\n\n\n\nHandling missing files\n\n# Try / Except to handle FileNotFound\ntry:\n    file = 'data/data.txt'\n    with open(file,'r') as f:\n        print( f.read() )\nexcept FileNotFoundError:\n    print(f\"{file} was not found!\")\n\ndata/data.txt was not found!",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-3.html#json-and-python-dictionaries",
    "href": "02_python/python-3.html#json-and-python-dictionaries",
    "title": "3. Functions, documentation, strings, files",
    "section": "JSON and Python Dictionaries",
    "text": "JSON and Python Dictionaries\n\nJSON (JavaScript Object Notation) is a standard, human-readable data format. It’s a popular format for data on the web.\nJSON can be easily converted to lists of dictionaries using Python’s json module.\nTransferring a JSON string to Python is known as de-serializing.\nTransferring Python to a JSON string is known as serializing.\nThis is easy to do in Python but challenging to do in most other languages.\n\n\nSerialization\n\n# Serialize a python object as json\nimport json\ngrades = { 'CHE101' : [100, 80, 70], 'IST195' : [100, 80, 100] }\nwith open(\"data/grades.json\", \"w\") as f:\n    json.dump(grades, f, indent=4) # write grades to file as JSON\n\n\n%%bash\n# switch to bash interpreter\ncat data/grades.json\n\n{\n    \"CHE101\": [\n        100,\n        80,\n        70\n    ],\n    \"IST195\": [\n        100,\n        80,\n        100\n    ]\n}\n\n\n\n\nDeserialization\n\n# de-serialize some json\nfile = \"data/stocks.json\"\nwith open(file, \"r\") as f:\n    stocks = json.load(f)\n    \n# stocks is a python object\n# Deserialized from text!\nfor stock in stocks:\n    print(stock['symbol'])\n\nAAPL\nAMZN\nFB\nGOOG\nIBM\nMSFT\nNET\nNFLX\nTSLA\nTWTR\n\n\n\n\n\n\n\n\nCautionCode Challenge 3.3\n\n\n\nwrite a program to read in a string of students and gpas in one input statement like this:\nmike 3.4, noel 3.2, obby 3.5, peta 3.4\nand write out JSON like this:\n[\n    { \"name\" : \"mike\", \"gpa\" : 3.4 },\n    { \"name\" : \"noel\", \"gpa\" : 3.2 },\n    { \"name\" : \"obby\", \"gpa\" : 3.5 },\n    { \"name\" : \"peta\", \"gpa\" : 3.4 }\n]\nSuggested approach:\n\ninput text\nsplit on “,” from the text\nfor each student:\n\nsplit the student into name and gpa\nparse the gpa so its a float\nadd the name and gpa to the list as a dictionary\n\nwrite the list to students.json as JSON\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nimport json \ntext = input(\"Enter names and grades: \")\nstudents = []\nfor student in text.split(\",\"):\n    name, gpa = student.strip().split()\n    gpa = float(gpa)\n    students.append({ \"name\": name, \"gpa\": gpa })\nwith open (\"students.json\", \"w\") as f:\n    json.dump(students, f)",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "3. Functions, documentation, strings, files"
    ]
  },
  {
    "objectID": "02_python/python-2.html",
    "href": "02_python/python-2.html",
    "title": "2. Iterations, lists, dictionaries, comprehensions",
    "section": "",
    "text": "Iterations are code strucures which allow us to repeat sections of code while a condition is true, or a fixed number of time.\nThey allow us to do more with less code!",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "2. Iterations, lists, dictionaries, comprehensions"
    ]
  },
  {
    "objectID": "02_python/python-2.html#the-break-command",
    "href": "02_python/python-2.html#the-break-command",
    "title": "2. Iterations, lists, dictionaries, comprehensions",
    "section": "The break command",
    "text": "The break command\n\nbreak keyword exits the loop immediately.\nCommonly used when there is no longer a reason to loop (you achieved your goal).\nYou can add an else to the for loop to execute when break does not happen.\n\n\n# Example: find a letter in a text string\n\ntext = input(\"Enter Some Text:\")\nfind = input(\"Enter character to find:\")\nfor ch in text:\n    if ch == find:\n        print(f\"Found {find} in {text}!\")\n        break\nelse:\n    print(f\"Unable to find {find} in {text}!\")\n\nEnter Some Text: testing\nEnter character to find: n\nFound n in testing!\n\nEnter Some Text: testing\nEnter character to find: x\nUnable to find x in testing!\n\n\n\n\n\n\n\nCautionCode Challenge 2.1\n\n\n\nWrite a program to accept a password as input. If the password input is “secret” display “access granted”. Otherwise say “invalid password”.\nRepeat the above up to 5 times. When the correct password is entered, stop looping. When 5 loops have exhausted, print “you are locked out”.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nvalid_password = \"secret\"\nfor i in range(5):\n    pw = input(\"Enter Password:\")\n    if pw == valid_password:\n        print(\"Access Granted!\")\n        break\n    else:\n        print(\"Invalid Password.\")\nelse:\n    print(\"You are locked out\")",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "2. Iterations, lists, dictionaries, comprehensions"
    ]
  },
  {
    "objectID": "02_python/python-2.html#the-in-operator",
    "href": "02_python/python-2.html#the-in-operator",
    "title": "2. Iterations, lists, dictionaries, comprehensions",
    "section": "The in operator",
    "text": "The in operator\nThe in operator checks for existence of an item in a list.\n\n# Example: whats in the list?\nnumbers = [10, 15, 20]\nprint(f\"5 in {numbers}?\", 5 in numbers)\nprint(f\"20 in {numbers}?\", 20 in numbers)\n\n5 in [10, 15, 20]? False\n20 in [10, 15, 20]? True",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "2. Iterations, lists, dictionaries, comprehensions"
    ]
  },
  {
    "objectID": "02_python/python-2.html#list-methods",
    "href": "02_python/python-2.html#list-methods",
    "title": "2. Iterations, lists, dictionaries, comprehensions",
    "section": "List Methods",
    "text": "List Methods\nThere are numerous list methods which allow you to add, remove, and find values in the list, etc…\nhttps://docs.python.org/3/library/stdtypes.html?highlight=list#mutable-sequence-types\n\n# Example: manipulating a list\n\n# An empty list\ncolors = []\n\n# Add \"blue\" to the end\ncolors.append(\"blue\")\n\n# add \"red\" to the beginning\ncolors.insert(0, \"red\")\n\n# add \"white\" in the 2nd position\ncolors.insert(1, \"white\")\n\n# print ['red', 'white', 'blue']\nprint(colors)\n\n# remove the last color\nblue = colors.pop(-1)\n\n# remove \"white\"\nwhite = colors.remove(\"white\")\n\n# print ['red']\nprint(colors)\n\n['red', 'white', 'blue']\n['red']\n\n\n\n\n\n\n\n\nCautionCode Challenge 2.3\n\n\n\nWrite a sentinel controlled loop to input a color until “quit” is entered. Add each color to a list only when the color is not already in the list. Print the list each time in the loop.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\ncolors = []\n\nwhile True:\n    color = input(\"Enter a color:\")\n    if color == 'quit':\n        break\n    if color not in colors:\n        colors.append(color)\n        op = \"added to\"\n    else:\n        op = \"already in\"\n\n    print(f\"{color} {op} {colors}\")",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "2. Iterations, lists, dictionaries, comprehensions"
    ]
  },
  {
    "objectID": "02_python/python-2.html#dictionary-methods",
    "href": "02_python/python-2.html#dictionary-methods",
    "title": "2. Iterations, lists, dictionaries, comprehensions",
    "section": "Dictionary Methods",
    "text": "Dictionary Methods\nLike str and list, the dict type has its own set of built-in functions. https://docs.python.org/3/library/stdtypes.html#mapping-types-dict\n\nfont = {'name': 'Arial','size': 8}\n\nprint(font.keys()) # this is an iterable\n\nprint(font.values()) # this is an iterable\n\nprint(font['name'])\n\nfont['name'] = 'Courier'\n\nprint(font['name'])\n\nprint('size' in font)\n\nprint(font.get('style', 'normal')) # get with default value\n\ndict_keys(['name', 'size'])\ndict_values(['Arial', 8])\nArial\nCourier\nTrue\nnormal",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "2. Iterations, lists, dictionaries, comprehensions"
    ]
  },
  {
    "objectID": "02_python/python-2.html#complex-data-stuctures",
    "href": "02_python/python-2.html#complex-data-stuctures",
    "title": "2. Iterations, lists, dictionaries, comprehensions",
    "section": "Complex Data Stuctures",
    "text": "Complex Data Stuctures\nWe can combine lists and dictionaries to create complex data structures in python.\nThese allow us to represent real-world data in code\n\nstudents = [\n    { 'name' : 'abby', 'grades' : [100,80,90] },\n    { 'name' : 'bob', 'grades' : [100,90,90] },\n    { 'name' : 'chris', 'grades' : [90,100,100] }\n]\n\n\n# just print each student name\nfor student in students:\n    print(student['name'])\n\nabby\nbob\nchris\n\n\n\n# print each student name and average grade\nfor student in students:\n    avg_grade = sum(student['grades'])/len(student['grades'])\n    print(f\"{student['name']}  {avg_grade:.2f}\")\n\nabby  90.00\nbob  93.33\nchris  96.67\n\n\n\n\n\n\n\n\nCautionCode Challenge 2.4\n\n\n\nWrite a program to create a shopping list:\n\nloop until “quit” is entered\ninput a grocery item\ninput a quantity\nsave the item as the key in the dictionary and quantity as the value\nif the item is in the dictionary already, add the quantity to the existing value\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nitems = {}\n\nwhile True:\n    item = input(\"Enter shopping item, or 'quit': \")\n    if item == 'quit':\n        break\n    qty = int(input(\"Enter quantity: \"))\n    if item in items.keys():\n        items[item] = items[item] + qty\n    else:\n        items[item] = qty\n\n    print(\"ITEMS:\", items)",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "2. Iterations, lists, dictionaries, comprehensions"
    ]
  },
  {
    "objectID": "02_python/python-4.html",
    "href": "02_python/python-4.html",
    "title": "4. Modules, import, pip, testing",
    "section": "",
    "text": "A Module is a file containing Python code.\nThe Code in the module can be included in your code using the import command\nA collection of modules bundled for re-distribution is known as a Package\n\n\n\n\nThe Python language has several modules which are included with the base language: Python Standard Library https://docs.python.org/3/library/\nIn addition you can import other libraries found on the Internet.\nThe Python Package Index is a website which allows you to search for other code avaialbe for use. https://pypi.org/\nOnce you know which package you want, you can install it with the pip command from the terminal.\nExample: pip install &lt;name-of-package&gt; (Make sure you activate your conda environment first!)\nYou can also install packages using conda. For example, conda install -c conda-forge &lt;name-of-package&gt;.\nWhich to use? Basically, conda and pip can be used interchangeably within a conda environment. Some packages may be in PyPI that are not in conda-forge and vice versa.\n\n\n\n\n\nrequirements.txt is a file which stores the names of all the packages a project uses\nadding them to the file is a replacement for installing each of them manually\nto install the packages: pip install -r requirements.txt\n\n\n\n\nCode in the module can be included in your code using the import command. There are a few different ways to import some code:\n\nimport foo imports code from module foo. Functions in that module can then be referenced in the current code by prefixing the function with foo.. For example, if foo has a function bar defined in it, then after the import foo statement you can use the bar function by writing foo.bar(...) (where the ... indicate the arguments you need to pass to bar).\nfrom foo import bar,baz only imports the bar and baz functions from module foo. When imported in this manner, the bar and baz functions are referenced directly, without the module prefix. For example, in this case, to execute the bar function, you run bar(...) instead of foo.bar(...).\n\n\n\n\n\n\n\nNoteConcept check\n\n\n\nWhat’s wrong with the following code?\n\nexp = 'Dear {name}, we would like to express our gratitude for your donation!'\n\nfrom math import exp\n\nprint(exp.format(name=\"Jeff\"))\n\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nThe from math import exp line will cause the exp variable in the namespace that’s defined in the first line to be replaced by the exponential function in the math module. This will cause an error in the last line, which expects exp to be a string, not a function.\n\n\n\n\n\n\nRenaming imports: You can avoid namespace collisions by renaming an imported module or functions via: import foo as f. For example, in the Concept check above, doing from math import exp as mathexp would avoid the error.\n\n\n\n\n\nUse the dir(&lt;module&gt;) to list the functions in the module\nUse help(module.function) to get the docstring for a function in a module.\n\n\n# Examples\nimport math\n\n\n# get the functions\ndir(math)\n\n['__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n 'acos',\n 'acosh',\n 'asin',\n 'asinh',\n 'atan',\n 'atan2',\n 'atanh',\n 'cbrt',\n 'ceil',\n 'comb',\n 'copysign',\n 'cos',\n 'cosh',\n 'degrees',\n 'dist',\n 'e',\n 'erf',\n 'erfc',\n 'exp',\n 'exp2',\n 'expm1',\n 'fabs',\n 'factorial',\n 'floor',\n 'fma',\n 'fmod',\n 'frexp',\n 'fsum',\n 'gamma',\n 'gcd',\n 'hypot',\n 'inf',\n 'isclose',\n 'isfinite',\n 'isinf',\n 'isnan',\n 'isqrt',\n 'lcm',\n 'ldexp',\n 'lgamma',\n 'log',\n 'log10',\n 'log1p',\n 'log2',\n 'modf',\n 'nan',\n 'nextafter',\n 'perm',\n 'pi',\n 'pow',\n 'prod',\n 'radians',\n 'remainder',\n 'sin',\n 'sinh',\n 'sqrt',\n 'sumprod',\n 'tan',\n 'tanh',\n 'tau',\n 'trunc',\n 'ulp']\n\n\n\nhelp(math.pow)\n\nHelp on built-in function pow in module math:\n\npow(x, y, /)\n    Return x**y (x to the power of y).\n\n\n\n\nmath.pow(2,5) # 2*2*2*2*2\n\n32.0\n\n\n\n\n\n\n\n\nCautionCode Challenge 4.1\n\n\n\nUse the datetime module to parse a “Month/Day/Year” string (e.g., “9/15/2025”) into a datetime then print it in YYYY-MM-DD format (e.g., “2025-09-15”).\nYou will need to read through the module with dir() and help() or read the python docs to determine which functions to use.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nfrom datetime import datetime\n\ntext = input(\"Enter date m/d/y: \")\nnow = datetime.strptime(text, \"%m/%d/%Y\")\nnowstr = now.strftime(\"%Y-%m-%d\")\nprint(nowstr)\n\n\n\n\n\n\n\n\n\n\n\n\nCautionCode Challenge 4.2\n\n\n\nLet’s make the code in Challenge 4.2 more resusable:\n\nRe-write the date parse into a function parsedate_mdy(text: str) -&gt; datetime:.\nRe-write the date format into a function formatdate_ymd(date: datetime) -&gt; str:.\nRe-write the main program to use both functions. input -&gt; parsedate -&gt; formatdate -&gt; output\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nfrom datetime import datetime\n\ndef parsedate_mdy(text: str) -&gt; datetime:\n    dt = datetime.strptime(text, \"%m/%d/%Y\")\n    return dt\n\n\ndef formatdate_ymd(date: datetime) -&gt; str:\n    return date.strftime(\"%Y-%m-%d\")\n\n\ntext = input(\"Enter date m/d/y: \")\ndate = parsedate_mdy(text)\ndate_str = formatdate_ymd(date)\nprint(date_str)\n\n\n\n\n\n\n\n\n\n\n\n\nCautionCode Challenge 4.3\n\n\n\nLet’s make the code in Challenge 4.2 even more resusable!\n\nMove your functions into a module name dateutils.py.\nImport your functions from dateutils.py into 4-3.py\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nCreate the dateutils.py file in VS Code by clicking “File” -&gt; “New File”. Name it dateutils.py. Then copy the functions you wrote in Challenge 4.2 into it (don’t forget the from datetime import datetime at the top!). Save the file by typing CTRL/CMD + S or clicking File -&gt; Save.\nTo use your functions in a notebook or another python script:\n\nfrom dateutils import parsedate_mdy, formatdate_ymd\n\ntext = input(\"Enter date m/d/y: \")\ndate = parsedate_mdy(text)\ndate_str = formatdate_ymd(date)\nprint(date_str)\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportantAvoid wildcard imports!\n\n\n\nIt’s possible to use a wildcard * when importing. For example,\n\nfrom math import *\n\nwill import all functions that are in the math module into the current namespace. This means that you could then call math.pow with just pow, for example.\nDon’t do this! The problem with this is you can accidentally override variables in your program without realizing it. For example, if you defined a variable called e then did from math import *, e would be replaced with the value of the natural exponent, since e is defined in the math module. Doing wildcard imports also makes it difficult to debug code, since it’s a challenge to determine what module a particular variable came from. Wildcard imports should only be used in very limited situations, which you are unlikely to run in to. Long story short… don’t use wildcard imports! I only tell you about it in case you see it in the wild (no pun intended).",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "4. Modules, import, pip, testing"
    ]
  },
  {
    "objectID": "02_python/python-4.html#built-in-modules-vs.-external",
    "href": "02_python/python-4.html#built-in-modules-vs.-external",
    "title": "4. Modules, import, pip, testing",
    "section": "",
    "text": "The Python language has several modules which are included with the base language: Python Standard Library https://docs.python.org/3/library/\nIn addition you can import other libraries found on the Internet.\nThe Python Package Index is a website which allows you to search for other code avaialbe for use. https://pypi.org/\nOnce you know which package you want, you can install it with the pip command from the terminal.\nExample: pip install &lt;name-of-package&gt; (Make sure you activate your conda environment first!)\nYou can also install packages using conda. For example, conda install -c conda-forge &lt;name-of-package&gt;.\nWhich to use? Basically, conda and pip can be used interchangeably within a conda environment. Some packages may be in PyPI that are not in conda-forge and vice versa.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "4. Modules, import, pip, testing"
    ]
  },
  {
    "objectID": "02_python/python-4.html#requirements.txt",
    "href": "02_python/python-4.html#requirements.txt",
    "title": "4. Modules, import, pip, testing",
    "section": "",
    "text": "requirements.txt is a file which stores the names of all the packages a project uses\nadding them to the file is a replacement for installing each of them manually\nto install the packages: pip install -r requirements.txt",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "4. Modules, import, pip, testing"
    ]
  },
  {
    "objectID": "02_python/python-4.html#importing-modules",
    "href": "02_python/python-4.html#importing-modules",
    "title": "4. Modules, import, pip, testing",
    "section": "",
    "text": "Code in the module can be included in your code using the import command. There are a few different ways to import some code:\n\nimport foo imports code from module foo. Functions in that module can then be referenced in the current code by prefixing the function with foo.. For example, if foo has a function bar defined in it, then after the import foo statement you can use the bar function by writing foo.bar(...) (where the ... indicate the arguments you need to pass to bar).\nfrom foo import bar,baz only imports the bar and baz functions from module foo. When imported in this manner, the bar and baz functions are referenced directly, without the module prefix. For example, in this case, to execute the bar function, you run bar(...) instead of foo.bar(...).\n\n\n\n\n\n\n\nNoteConcept check\n\n\n\nWhat’s wrong with the following code?\n\nexp = 'Dear {name}, we would like to express our gratitude for your donation!'\n\nfrom math import exp\n\nprint(exp.format(name=\"Jeff\"))\n\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nThe from math import exp line will cause the exp variable in the namespace that’s defined in the first line to be replaced by the exponential function in the math module. This will cause an error in the last line, which expects exp to be a string, not a function.\n\n\n\n\n\n\nRenaming imports: You can avoid namespace collisions by renaming an imported module or functions via: import foo as f. For example, in the Concept check above, doing from math import exp as mathexp would avoid the error.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "4. Modules, import, pip, testing"
    ]
  },
  {
    "objectID": "02_python/python-4.html#whats-in-the-module",
    "href": "02_python/python-4.html#whats-in-the-module",
    "title": "4. Modules, import, pip, testing",
    "section": "",
    "text": "Use the dir(&lt;module&gt;) to list the functions in the module\nUse help(module.function) to get the docstring for a function in a module.\n\n\n# Examples\nimport math\n\n\n# get the functions\ndir(math)\n\n['__doc__',\n '__file__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n 'acos',\n 'acosh',\n 'asin',\n 'asinh',\n 'atan',\n 'atan2',\n 'atanh',\n 'cbrt',\n 'ceil',\n 'comb',\n 'copysign',\n 'cos',\n 'cosh',\n 'degrees',\n 'dist',\n 'e',\n 'erf',\n 'erfc',\n 'exp',\n 'exp2',\n 'expm1',\n 'fabs',\n 'factorial',\n 'floor',\n 'fma',\n 'fmod',\n 'frexp',\n 'fsum',\n 'gamma',\n 'gcd',\n 'hypot',\n 'inf',\n 'isclose',\n 'isfinite',\n 'isinf',\n 'isnan',\n 'isqrt',\n 'lcm',\n 'ldexp',\n 'lgamma',\n 'log',\n 'log10',\n 'log1p',\n 'log2',\n 'modf',\n 'nan',\n 'nextafter',\n 'perm',\n 'pi',\n 'pow',\n 'prod',\n 'radians',\n 'remainder',\n 'sin',\n 'sinh',\n 'sqrt',\n 'sumprod',\n 'tan',\n 'tanh',\n 'tau',\n 'trunc',\n 'ulp']\n\n\n\nhelp(math.pow)\n\nHelp on built-in function pow in module math:\n\npow(x, y, /)\n    Return x**y (x to the power of y).\n\n\n\n\nmath.pow(2,5) # 2*2*2*2*2\n\n32.0\n\n\n\n\n\n\n\n\nCautionCode Challenge 4.1\n\n\n\nUse the datetime module to parse a “Month/Day/Year” string (e.g., “9/15/2025”) into a datetime then print it in YYYY-MM-DD format (e.g., “2025-09-15”).\nYou will need to read through the module with dir() and help() or read the python docs to determine which functions to use.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nfrom datetime import datetime\n\ntext = input(\"Enter date m/d/y: \")\nnow = datetime.strptime(text, \"%m/%d/%Y\")\nnowstr = now.strftime(\"%Y-%m-%d\")\nprint(nowstr)\n\n\n\n\n\n\n\n\n\n\n\n\nCautionCode Challenge 4.2\n\n\n\nLet’s make the code in Challenge 4.2 more resusable:\n\nRe-write the date parse into a function parsedate_mdy(text: str) -&gt; datetime:.\nRe-write the date format into a function formatdate_ymd(date: datetime) -&gt; str:.\nRe-write the main program to use both functions. input -&gt; parsedate -&gt; formatdate -&gt; output\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nfrom datetime import datetime\n\ndef parsedate_mdy(text: str) -&gt; datetime:\n    dt = datetime.strptime(text, \"%m/%d/%Y\")\n    return dt\n\n\ndef formatdate_ymd(date: datetime) -&gt; str:\n    return date.strftime(\"%Y-%m-%d\")\n\n\ntext = input(\"Enter date m/d/y: \")\ndate = parsedate_mdy(text)\ndate_str = formatdate_ymd(date)\nprint(date_str)\n\n\n\n\n\n\n\n\n\n\n\n\nCautionCode Challenge 4.3\n\n\n\nLet’s make the code in Challenge 4.2 even more resusable!\n\nMove your functions into a module name dateutils.py.\nImport your functions from dateutils.py into 4-3.py\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nCreate the dateutils.py file in VS Code by clicking “File” -&gt; “New File”. Name it dateutils.py. Then copy the functions you wrote in Challenge 4.2 into it (don’t forget the from datetime import datetime at the top!). Save the file by typing CTRL/CMD + S or clicking File -&gt; Save.\nTo use your functions in a notebook or another python script:\n\nfrom dateutils import parsedate_mdy, formatdate_ymd\n\ntext = input(\"Enter date m/d/y: \")\ndate = parsedate_mdy(text)\ndate_str = formatdate_ymd(date)\nprint(date_str)\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportantAvoid wildcard imports!\n\n\n\nIt’s possible to use a wildcard * when importing. For example,\n\nfrom math import *\n\nwill import all functions that are in the math module into the current namespace. This means that you could then call math.pow with just pow, for example.\nDon’t do this! The problem with this is you can accidentally override variables in your program without realizing it. For example, if you defined a variable called e then did from math import *, e would be replaced with the value of the natural exponent, since e is defined in the math module. Doing wildcard imports also makes it difficult to debug code, since it’s a challenge to determine what module a particular variable came from. Wildcard imports should only be used in very limited situations, which you are unlikely to run in to. Long story short… don’t use wildcard imports! I only tell you about it in case you see it in the wild (no pun intended).",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "4. Modules, import, pip, testing"
    ]
  },
  {
    "objectID": "02_python/python-4.html#assert",
    "href": "02_python/python-4.html#assert",
    "title": "4. Modules, import, pip, testing",
    "section": "Assert",
    "text": "Assert\nassert is a python command which throws an exception if the expression asserted is false.\nWhen an assert fails, it raises an AssertionError exception which alerts us that something did not go as planned.\n\nassert 1 + 1 == 2   # This is true, no worries\n\n\nassert 2 + 2 == 5 # False AssertionError\n\n\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 assert 2 + 2 == 5 # False AssertionError\n\nAssertionError:",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "4. Modules, import, pip, testing"
    ]
  },
  {
    "objectID": "02_python/python-4.html#pytest",
    "href": "02_python/python-4.html#pytest",
    "title": "4. Modules, import, pip, testing",
    "section": "Pytest",
    "text": "Pytest\nPytest is testing framework for Python. It can automatically discover tests in your code; for example, any function that starts with test is executed when you invoke pytest. (See here for the full list of rules that pytest uses to discover test functions.)\nYou can invoke it at the terminal like this:\npython -m pytest &lt;filetotest&gt;\n\n\n\n\n\n\nNote\n\n\n\nPytest is not installed by default when you create a new conda environment. If you have not installed pytest into your ist356 environment yet, you can do so by opening a terminal and running:\nconda activate ist356\npip install pytest\n\n\nThe VS Code test plugin should discover the tests.\n\n\n\n\n\n\nCautionCode Challenge 4.4\n\n\n\nWrite a “round robin” test that tests the parsedate_mdy and formatdate_ymd functions you wrote in Code Challenge 4.3. The test should start with a known input, run the two functions on it, then check if it yields the known output.\nRun pytest or VS Code test to make sure your tests pass!\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nAdd the following to dateutils.py:\n\n\n#! eval: false\ndef test_round_robin():\n    date_str = \"9/15/2025\"\n    date_obj = parsedate_mdy(date_str)\n    assert formatdate_ymd(date_obj) == \"2025-09-15\"\n\n\nTo run the test, open a terminal (in VS Code, select Terminal -&gt; New Terminal). If your ist356 conda environment is not active, activate it by running: conda activate ist356. Now cd into the directory that dateutils.py is in (you’re probably already there; run ls to check), then run:\n\npython -m pytest dateutils.py\nNote: if you not have installed pytest in your environment yet you will get an error No module named pytest. In that case, install pytest by either running pip install pytest or conda install -c conda-forge -y pytest.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "4. Modules, import, pip, testing"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Room: Hinds Hall 021\nTime: M/W 3:45PM - 5:05PM\nInstructor: Collin Capano\nEmail: cdcapano@syr.edu\nOffice hours: Tuesdays, 11AM - 1PM in Hinds Hall 323G\nCourse website: https://su-ist356-m003-fall-2025.github.io/course-home",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-info",
    "href": "syllabus.html#course-info",
    "title": "Syllabus",
    "section": "",
    "text": "Room: Hinds Hall 021\nTime: M/W 3:45PM - 5:05PM\nInstructor: Collin Capano\nEmail: cdcapano@syr.edu\nOffice hours: Tuesdays, 11AM - 1PM in Hinds Hall 323G\nCourse website: https://su-ist356-m003-fall-2025.github.io/course-home",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "Syllabus",
    "section": "Course Description",
    "text": "Course Description\nApproaches for building pipelines in data analytics using the Python programming language; data cleaning, extraction, wrangling, API’s, web scraping. Building data products. Programming experience required.\n\nAdditional Course Description\nThis course is a tour of programming techniques for building data pipelines for analytics. It will not just emphasize exploratory approaches, but also techniques to build extract transform load pipelines to run code in production. Throughout the course we will learn how to source data from a variety of sources (files, data streams, APIs, web scraping, etc.) and ultimately transform data as to prepare it for dashboards or machine learning. You will also learn some simple data visualization but that is not the primary emphasis of the course.\n\n\nPrerequisites\nThis courses uses the Python programming language. Proficiency n any programming language is the only pre-requisite. Students should have a clear understanding of these concepts:\n\nInput, output, variables and data types\nControl flow statements (if, for, while)\nFunctions (function definition, calling, parameters, return values)\nData structures (lists, dictionaries)\nUsing code in other libraries\n\n\n\nAudience: IST256 or IST356?\nThis course is intended as a follow up course to IST256. It is also appropriate for students with prior experience with programming who have an interest in data analytics.\n\nIST256 is for students with little to no programming experience. The course content is 75% python fundamentals and 25% python for data analytics.\nIST356 is for students with prior programming experience. The course content is 25% python fundamentals and 75% python for data analytics.\n\n\n\nCredits\n3 credits\n\n\nCourse Fees\nNone",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#learning-objectives",
    "href": "syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nUpon completion of this course, students will be able to:\n\nExplain techniques for sourcing or transforming data, and be able to justify the choice of technique\nSolve data-oriented problems using programming techniques\nEvaluate different code modules and application programming interfaces for suitability\nApply data transformational programming techniques to build a larger data pipelines\nCreate production quality data pipelines from exploratory code",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#textbooks-and-supplies",
    "href": "syllabus.html#textbooks-and-supplies",
    "title": "Syllabus",
    "section": "Textbooks And Supplies",
    "text": "Textbooks And Supplies\n\nTextbooks\nThere is no textbook you need to purchase for this course. All required readings are available freely online, and in many cases, the online sources are the most up-to-date references to the relevant course material. See reading list section for additional details.\n\nMain Text\n\nPython Programming for Data Science, by T. Beuzen (2021) https://www.tomasbeuzen.com/python-programming-for-data-science/\n\n\n\n\nBring Your Own Device\nYou are expected to bring your computer to each class session. This class is very hands-on, and you will be programming in class often.\n\nSoftware to install\nThis course requires you to install software on your computer. The intro section of this course provides detailed instructions.\n\nVisual Studio Code editor\nGit Source Code Managment\nMiniconda\n\n\n\nAccounts\n\nWe will use Github for assignment submission.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-requirements-and-expectations",
    "href": "syllabus.html#course-requirements-and-expectations",
    "title": "Syllabus",
    "section": "Course Requirements and Expectations",
    "text": "Course Requirements and Expectations\n\nAttendance and Participation\nIn-class participation is the best way to learn and absorb the material. As such, you are expected to attend and participate in every class session. Your grade will be partially based on attendance (see below for details). If you must miss class, you are responsible for making up the work and catching up on what you missed. Lectures will be recorded and posted to the course website after the class.\n\n\nAssignments\nThe assignments are programming / problem solving activities that you will complete outside of class. The assignment due dates are posted on the course schedule. Consider these assignments formative assessments - practice so you can get better at computational thinking, problem solving and writing code. It is important to reflect upon your work and take an honest assessment of your abilities as you complete each assignment.\nEach Wednesday we will review the homework assignment. Students will be asked to contribute to the discussion.\nFactors affecting your grade:\n\nIs the code working and correct?\nWere the instructions followed? (e.g. commit after each function is written)\nGood reflection: specific, uses terminology, actionable\nHanded in on time, so your prof only needs to review submissions 1 time.\n\n\n\nExams\nExams are summative assessments. They are designed to test your knowledge of the material. The exams will be issued in class on the dates posted on the course schedule. Exams are closed-book but you may bring one 8.5x11 sheet of paper with your notes on it. Exams length is 60 minutes. They will be a mix of mix of multiple choice, short answer and code tracing and code writing.\n\n\nProject\nThe project is your opportunity to demonstrate what you have learned in an experiential fashion. In your final project you will be expected to create a data pipeline of your choosing.\n\nThe pipeline should incorporate techniques we learned in the course and the more techniques you incorporate correctly the higher your grade.\nIt is expected that you will be able to explain your choices, and they will be appropriate for the problem.\nThe pipeline should be first written exploratory, and then refactored into a production quality pipeline. Both pipelines should be submitted.\nThere should be a simple data visualization or dashboard from the pipeline output as to demonstrate its usefulness.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#grading",
    "href": "syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\n\n\n\n\n\n\n\n\n\n\n\nAssessment\nType\nLearning Outcomes\nQuantity\nPoints Each\nPoints Total\n\n\n\n\nAttendance\nFormative\n\n24\n1\n24\n\n\nAssignments\nFormative\n1, 2\n8\n3\n24\n\n\nExams\nSummative\n3, 4\n2\n24\n48\n\n\nProject\nSummative\n5\n1\n24\n24\n\n\nTotal\n\n\n\n\n120\n\n\n\n\nGrading Table\nThe following grading scale translates your total points earned into a letter grade to be submitted to the University registrar.\n\n\n\n\n\n\n\n\n\nStudent Achievement\nTotal Points Earned\nRegistrar Grade\nGrade Points\n\n\n\n\nMastery\n114 - 120\nA\n4.000\n\n\n\n108 - 113\nA-\n3.666\n\n\nSatisfactory\n102 - 107\nB+\n3.333\n\n\n\n96 - 101\nB\n3.000\n\n\n\n90 - 95\nB-\n2.666\n\n\nLow Passing\n84 - 89\nC+\n2.333\n\n\n\n78 - 83\nC\n2.000\n\n\n\n72 - 77\nC-\n1.666\n\n\nUnsatisfactory\n60 - 71\nD\n1.000\n\n\n\n0 - 59\nF\n0.000",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#use-of-ai-in-this-course",
    "href": "syllabus.html#use-of-ai-in-this-course",
    "title": "Syllabus",
    "section": "Use of AI in this Course",
    "text": "Use of AI in this Course\nBased on the assignments in this course and our specified learning outcomes, the full use of artificial intelligence as a tool, with disclosure and citation, is permitted in this course. Students do not need to ask permission to use these tools before starting an assignment or exam, but they must explicitly and fully indicate which tools were used and describe how they were used.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#academic-integrity",
    "href": "syllabus.html#academic-integrity",
    "title": "Syllabus",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nAs a pre-eminent and inclusive student-focused research institution, Syracuse University considers academic integrity at the forefront of learning, serving as a core value and guiding pillar of education. Syracuse University’s Academic Integrity Policy provides students with the necessary guidelines to complete academic work with integrity throughout their studies. Students are required to uphold both course-specific and university-wide academic integrity expectations such as crediting your sources, doing your own work, communicating honestly, and supporting academic integrity. The full Syracuse University Academic Integrity Policy can be viewed by visiting the Syracuse University Policies website.\nUpholding Academic Integrity includes the protection of faculty’s intellectual property. Students should not upload, distribute, or share instructors’ course materials, including presentations, assignments, exams, or other evaluative materials without permission. Using websites that charge fees or require uploading of course material (e.g., Chegg, Course Hero) to obtain exam solutions or assignments completed by others, which are then presented as your own violates academic integrity expectations in this course and may be classified as a Level 3 violation. All academic integrity expectations that apply to in-person assignments, quizzes, and exams also apply online.\nStudents found in violation of the policy are subject to grade sanctions determined by the course instructor and non-grade sanctions determined by the School or College where the course is offered. Students may not drop or withdraw from courses in which they face a suspected violation. Any established violation in this course may result in course failure regardless of violation level.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#class-schedule",
    "href": "syllabus.html#class-schedule",
    "title": "Syllabus",
    "section": "Class Schedule",
    "text": "Class Schedule\nNote: schedule subject to change as we progress through the semester.\n\n\n\nWeek\nDates\nTopic\n\n\n\n\n1\n8/25, 8/29\nIntro; CLI and Conda\n\n\n2\n9/3\nPython review - 1\n\n\n3\n9/8, 9/10\nPython review - 2\n\n\n4\n9/15, 9/17\nUI\n\n\n5\n9/22, 9/24\nData wrangling - 1\n\n\n6\n9/29, 10/1\nData wrangling - 2\n\n\n7\n10/6, 10/8\nData wrangling - 3\n\n\n8\n10/15\nExam 1\n\n\n9\n10/20, 10/22\nWeb APIs - 1\n\n\n10\n10/27, 10/29\nWeb APIs - 2\n\n\n11\n11/3, 11/5\nWeb scraping - 1\n\n\n12\n11/10, 11/12\nWeb scraping - 2\n\n\n13\n11/17, 11/19\nData visualization - 1\n\n\n14\n12/1, 12/3\nData visualization - 2\n\n\n15\n12/8\nExam 2\n\n\n16\n12/15\nProject due",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#important-dates",
    "href": "syllabus.html#important-dates",
    "title": "Syllabus",
    "section": "Important dates",
    "text": "Important dates\n\n\n\n\n\n\n\nDate\n\n\n\n\n\nMon. 8/25\nFirst day of class\n\n\nMon. 9/1\nLabor day - No class\n\n\nMon. 9/15\nAcademic/Financial drop deadline; Religious observance notification deadline\n\n\nMon. 10/13\nFall break - No class\n\n\nFri. 11/21\nWithdrawal deadline\n\n\n11/23-11/30\nThanksgiving Break - No class\n\n\nMon. 12/8\nLast day of class",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Syllabus"
    ]
  },
  {
    "objectID": "00_intro/index.html",
    "href": "00_intro/index.html",
    "title": "Introduction and computer setup",
    "section": "",
    "text": "In IST356 we teach you programming for data analytics using the tools and techiques used by those in the industry. As such, you will learn how to setup and configure development environments, use git and github and learn to systematically test your code.\nThis is unlike IST256 where the emphasis is on the programming basics and the motivations behind learning computational thinking.\n\n\n\n\n\n\n\n\n\nIST356\nIST256\n\n\n\n\nProgramming Environment\nInstall vscode + git + python on your computer\nWeb-hosted jupyterhub\n\n\nAssignment Submissions\nStudent learn and use git / github\nBuilt-in assignment submission\n\n\nCoursework, slides, examples\nYou clone / diff the prof repo\nAutodiff and merge at login\n\n\n\nIn this course you’ll do it the real way, nothing is hidden / abstracted away for you.\n\n\nHere’s what you’ll need to install on your computer. Please read this entire section prior to installing. :-)\n\nVisual Studio Code: https://code.visualstudio.com/Download\nThis is a free editor with testing and debugging capabilities. As you install you can accept all defaults, except the last one: DO NOT launch the application when complete! If you do, simply close it.\nGit Source Code Manager: https://git-scm.com/download/\nAs you set it up, you will be asked several questions, for which the default selection is fine. EXCEPTION: choose Visual Studio Code as the default editor.\n\n\n\n\n\n\nWarning\n\n\n\nMac users: you’ll see multiple options for downloading Git Source Code Manager. I recommend using the Xcode version. Clicking on that link will redirect you to the Apple store; from there you will download and install Xcode.\n\n\nMiniconda Do not install this yet! You will install this using the terminal in VSCode after VSCode and Git are installed and setup; see instructions below.\n\n\n\n\nBeing an SU student comes with some perks. One of them is a Github for Education account and accompanying “packpack” of goodies. To use this benefit, your github account must be associated with your @syr.edu email.\n\n\nAssociate your current account with SU, by adding your email:\n\nGo to to https://github.com and click Sign In\nOnce you have logged in, go to: https://github.com/settings/emails\n\nAdd and verify your SU email address.\n\n\n\n\nYou’ll need to create an account:\n\nGo to to https://github.com and click Sign In\nFollow the on-screen instructions to sign up for an account.\nMake sure to use your @syr.edu email for the account.\nAdd your personal email when you’re at it so you don’t lose Github access after you graduate!\n\n\n\n\n\n\n\nImportant\n\n\n\nOnce you have a GitHub account, please email your GitHub username to me at cdcapano@syr.edu.\n\n\n\n\n\n\nGo to the Github Backpack site: https://education.github.com/pack\nand click Sign Up For Student Developer Pack\nOnce your account is verified, you will have backpack access.\nYou’ll know its active when you check your billing plan: https://github.com/settings/billing/summary\nyou should see a credit here.\nOnce you have backpack access, you can enable Github Copilot AI. https://github.com/settings/copilot\n\n\n\n\n\nThe last step is to configure VS Code for Python debugging. Provided everything else is in order, this should be straightforward.\n\nOpen Visual studio code. You will be asked to configure it.\n\nSet up GitHub Copilot. To do so, you’ll need to sign into GitHub by clicking “Continue with GitHub”. After you do, you may be dropped into a “Welcome” tab in VS Code. If so, click the “Walkthrough: Setup VS Code” tab to continue set up.\nPick a theme: Light, Dark, etc…\nAdd the following Extensions: Python, Jupyter.\nWindows users only: we’ll occasionally be using bash in the terminal mode of VSCode. Mac and Linux users have bash natively installed in the operating system. Windows users will have gotten a copy of bash when they downloaded and installed Git SCM. However, you need to tell VSCode to use bash in the Terminal rather than Windows PowerShell. To do that:\n\nClick “Unlock productivity with the Command Palette” in the Walthrough tab, then “Open Command Palette”. Alternatively, if you don’t see that option, open the Command Palette by typing CTRL + SHIFT + P. (Mac users type COMMAND + SHIFT + P).\nType “Select Default Profile” then hit ENTER.\nSelect “Git Bash” from the drop-down options.\nCheck that it worked by opening a new terminal: in the file menu, click “Terminal” -&gt; “New Terminal”. You should see “bash” in the upper right of the terminal screen.\n\nClose the welcome Tab but keep VS Code open.\n\n\n\n\n\n\n\n\nOpen a terminal in VS Code by clicking “Terminal” -&gt; “New Terminal”.\nIn the terminal window, type:\ncd\nThen hit ENTER.\nFollow the instructions Quickstart install instructions on the Miniconda website. For WSL, select “Linux”.\n\n\n\n\n\nDownload the Miniconda installer for Windows. Click the Downlad button under “Miniconda Installers”, not the one under “Distribution Installers”.\nRun the installer by double-clicking on the downloaded file and follow the steps below.\n\nClick “Run”.\nClick on “Next”.\nClick on “I agree”.\nSelect “Just me” and click on “Next”.\nClick “Next” to install to the default destination folder.\n\n\n\n\n\n\nWarning\n\n\n\nIf you had tried to install miniconda previously, you may get an error that says “Directory … is not empty, please choose a different location.” Do not choose a different location. Instead, click “OK”, then rename the previous miniconda3 directory. You can do that by going to VS Code, opening a new terminal window (click “Terminal” -&gt; “New Terminal”), and entering the following (hit ENTER after each line):\ncd\nmv miniconda3 miniconda3-old\nThen go back to the Miniconda installer and click “Next”.\n\n\nCheck the option for “Add Anaconda to my PATH environment variable” and check the option for “Register Anaconda as my default Python 3.x”.\n\nNote that even though the installation is for Miniconda, the installer uses the word Anaconda in these options.\nYou will also see a message in red text that selecting “Add Anaconda to my PATH environment variable” is not recommended; continue with this selection to make using conda easier in Git Bash. If you have questions or concerns, please contact your instructor.\n\nClick on “Install”.\nWhen the install is complete, Click on “Next”.\nClick on “Finish”.\n\nOpen a new terminal window in VS Code by clicking “Terminal” -&gt; “New Terminal”.\nType the following command to initialize conda:\nconda init bash\nOpen a new terminal window in VS Code by either hitting the “+” key next to “bash” in the upper left of the terminal window, or by cliking “Terminal” -&gt; “New Terminal”. If conda installed successfullly, you should see (base) appear next to or above your command prompt.\n\n\n\n\n\n\nIn the bash terminal window in VS Code (make sure it says (base) to the left of or above the prompt), type:\nconda create -n ist356 -c conda-forge -y python=3.11 ipykernel\nThen hit ENTER.\n\n\n\n\n\n\nWarning\n\n\n\nThe first time you run conda, you may bet an error about Terms of Service not being accepted for certain channels. Accept the TOS for those channels by running the commands listed. For example, if one of the channels is https://repo.anaconda.com/pkgs/main, copy and paste the command into the terminal:\nconda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main\nFollowed by hitting ENTER (to execute a command in the terminal, you hit ENTER after typing/pasting it in). You’ll need to do this for each of the channels listed.\nOnce you have accepted the TOS for all the channels, run the conda create command above again.\n\n\nCheck to ensure your environment works:\n\nClick File -&gt; “New File…”\nIn the drop down menu, select “Jupyter Notebook”.\nClick “Select Kernel” on the right then type “ist356”.\nIn the first cell, type:\nprint(\"hello world!\")\nHit the run button on the left or type SHIFT + ENTER to execute the code. You should get back “hello world!”.\nClose the ipynb file (you may optionally save it; if you do, be sure to call it something other then “Untitled.ipynb”, maybe “hello.ipynb” instead).",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Introduction and computer setup"
    ]
  },
  {
    "objectID": "00_intro/index.html#step-1-software-installs",
    "href": "00_intro/index.html#step-1-software-installs",
    "title": "Introduction and computer setup",
    "section": "",
    "text": "Here’s what you’ll need to install on your computer. Please read this entire section prior to installing. :-)\n\nVisual Studio Code: https://code.visualstudio.com/Download\nThis is a free editor with testing and debugging capabilities. As you install you can accept all defaults, except the last one: DO NOT launch the application when complete! If you do, simply close it.\nGit Source Code Manager: https://git-scm.com/download/\nAs you set it up, you will be asked several questions, for which the default selection is fine. EXCEPTION: choose Visual Studio Code as the default editor.\n\n\n\n\n\n\nWarning\n\n\n\nMac users: you’ll see multiple options for downloading Git Source Code Manager. I recommend using the Xcode version. Clicking on that link will redirect you to the Apple store; from there you will download and install Xcode.\n\n\nMiniconda Do not install this yet! You will install this using the terminal in VSCode after VSCode and Git are installed and setup; see instructions below.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Introduction and computer setup"
    ]
  },
  {
    "objectID": "00_intro/index.html#setup-2-github-account",
    "href": "00_intro/index.html#setup-2-github-account",
    "title": "Introduction and computer setup",
    "section": "",
    "text": "Being an SU student comes with some perks. One of them is a Github for Education account and accompanying “packpack” of goodies. To use this benefit, your github account must be associated with your @syr.edu email.\n\n\nAssociate your current account with SU, by adding your email:\n\nGo to to https://github.com and click Sign In\nOnce you have logged in, go to: https://github.com/settings/emails\n\nAdd and verify your SU email address.\n\n\n\n\nYou’ll need to create an account:\n\nGo to to https://github.com and click Sign In\nFollow the on-screen instructions to sign up for an account.\nMake sure to use your @syr.edu email for the account.\nAdd your personal email when you’re at it so you don’t lose Github access after you graduate!\n\n\n\n\n\n\n\nImportant\n\n\n\nOnce you have a GitHub account, please email your GitHub username to me at cdcapano@syr.edu.\n\n\n\n\n\n\nGo to the Github Backpack site: https://education.github.com/pack\nand click Sign Up For Student Developer Pack\nOnce your account is verified, you will have backpack access.\nYou’ll know its active when you check your billing plan: https://github.com/settings/billing/summary\nyou should see a credit here.\nOnce you have backpack access, you can enable Github Copilot AI. https://github.com/settings/copilot",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Introduction and computer setup"
    ]
  },
  {
    "objectID": "00_intro/index.html#step-3-configure-vs-code",
    "href": "00_intro/index.html#step-3-configure-vs-code",
    "title": "Introduction and computer setup",
    "section": "",
    "text": "The last step is to configure VS Code for Python debugging. Provided everything else is in order, this should be straightforward.\n\nOpen Visual studio code. You will be asked to configure it.\n\nSet up GitHub Copilot. To do so, you’ll need to sign into GitHub by clicking “Continue with GitHub”. After you do, you may be dropped into a “Welcome” tab in VS Code. If so, click the “Walkthrough: Setup VS Code” tab to continue set up.\nPick a theme: Light, Dark, etc…\nAdd the following Extensions: Python, Jupyter.\nWindows users only: we’ll occasionally be using bash in the terminal mode of VSCode. Mac and Linux users have bash natively installed in the operating system. Windows users will have gotten a copy of bash when they downloaded and installed Git SCM. However, you need to tell VSCode to use bash in the Terminal rather than Windows PowerShell. To do that:\n\nClick “Unlock productivity with the Command Palette” in the Walthrough tab, then “Open Command Palette”. Alternatively, if you don’t see that option, open the Command Palette by typing CTRL + SHIFT + P. (Mac users type COMMAND + SHIFT + P).\nType “Select Default Profile” then hit ENTER.\nSelect “Git Bash” from the drop-down options.\nCheck that it worked by opening a new terminal: in the file menu, click “Terminal” -&gt; “New Terminal”. You should see “bash” in the upper right of the terminal screen.\n\nClose the welcome Tab but keep VS Code open.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Introduction and computer setup"
    ]
  },
  {
    "objectID": "00_intro/index.html#step-4-install-miniconda",
    "href": "00_intro/index.html#step-4-install-miniconda",
    "title": "Introduction and computer setup",
    "section": "",
    "text": "Open a terminal in VS Code by clicking “Terminal” -&gt; “New Terminal”.\nIn the terminal window, type:\ncd\nThen hit ENTER.\nFollow the instructions Quickstart install instructions on the Miniconda website. For WSL, select “Linux”.\n\n\n\n\n\nDownload the Miniconda installer for Windows. Click the Downlad button under “Miniconda Installers”, not the one under “Distribution Installers”.\nRun the installer by double-clicking on the downloaded file and follow the steps below.\n\nClick “Run”.\nClick on “Next”.\nClick on “I agree”.\nSelect “Just me” and click on “Next”.\nClick “Next” to install to the default destination folder.\n\n\n\n\n\n\nWarning\n\n\n\nIf you had tried to install miniconda previously, you may get an error that says “Directory … is not empty, please choose a different location.” Do not choose a different location. Instead, click “OK”, then rename the previous miniconda3 directory. You can do that by going to VS Code, opening a new terminal window (click “Terminal” -&gt; “New Terminal”), and entering the following (hit ENTER after each line):\ncd\nmv miniconda3 miniconda3-old\nThen go back to the Miniconda installer and click “Next”.\n\n\nCheck the option for “Add Anaconda to my PATH environment variable” and check the option for “Register Anaconda as my default Python 3.x”.\n\nNote that even though the installation is for Miniconda, the installer uses the word Anaconda in these options.\nYou will also see a message in red text that selecting “Add Anaconda to my PATH environment variable” is not recommended; continue with this selection to make using conda easier in Git Bash. If you have questions or concerns, please contact your instructor.\n\nClick on “Install”.\nWhen the install is complete, Click on “Next”.\nClick on “Finish”.\n\nOpen a new terminal window in VS Code by clicking “Terminal” -&gt; “New Terminal”.\nType the following command to initialize conda:\nconda init bash\nOpen a new terminal window in VS Code by either hitting the “+” key next to “bash” in the upper left of the terminal window, or by cliking “Terminal” -&gt; “New Terminal”. If conda installed successfullly, you should see (base) appear next to or above your command prompt.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Introduction and computer setup"
    ]
  },
  {
    "objectID": "00_intro/index.html#step-5-create-a-conda-environment-and-test-it-in-vs-code",
    "href": "00_intro/index.html#step-5-create-a-conda-environment-and-test-it-in-vs-code",
    "title": "Introduction and computer setup",
    "section": "",
    "text": "In the bash terminal window in VS Code (make sure it says (base) to the left of or above the prompt), type:\nconda create -n ist356 -c conda-forge -y python=3.11 ipykernel\nThen hit ENTER.\n\n\n\n\n\n\nWarning\n\n\n\nThe first time you run conda, you may bet an error about Terms of Service not being accepted for certain channels. Accept the TOS for those channels by running the commands listed. For example, if one of the channels is https://repo.anaconda.com/pkgs/main, copy and paste the command into the terminal:\nconda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main\nFollowed by hitting ENTER (to execute a command in the terminal, you hit ENTER after typing/pasting it in). You’ll need to do this for each of the channels listed.\nOnce you have accepted the TOS for all the channels, run the conda create command above again.\n\n\nCheck to ensure your environment works:\n\nClick File -&gt; “New File…”\nIn the drop down menu, select “Jupyter Notebook”.\nClick “Select Kernel” on the right then type “ist356”.\nIn the first cell, type:\nprint(\"hello world!\")\nHit the run button on the left or type SHIFT + ENTER to execute the code. You should get back “hello world!”.\nClose the ipynb file (you may optionally save it; if you do, be sure to call it something other then “Untitled.ipynb”, maybe “hello.ipynb” instead).",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "Introduction and computer setup"
    ]
  },
  {
    "objectID": "02_python/index.html",
    "href": "02_python/index.html",
    "title": "2. Python review",
    "section": "",
    "text": "In this unit we will review some basics of Python programming. You will have covered the material here in IST 256.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review"
    ]
  },
  {
    "objectID": "02_python/index.html#tutorials",
    "href": "02_python/index.html#tutorials",
    "title": "2. Python review",
    "section": "Tutorials",
    "text": "Tutorials\n\nInput, output, variables, types, conditionals\nIterations, lists, dictionaries, comprehensions\nFunctions, documentation, strings, files\nModules, import, pip, testing",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review"
    ]
  },
  {
    "objectID": "02_python/index.html#lectures",
    "href": "02_python/index.html#lectures",
    "title": "2. Python review",
    "section": "Lectures",
    "text": "Lectures",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review"
    ]
  },
  {
    "objectID": "02_python/index.html#wednesday-932025",
    "href": "02_python/index.html#wednesday-932025",
    "title": "2. Python review",
    "section": "Wednesday, 9/3/2025",
    "text": "Wednesday, 9/3/2025\nInstructions on how to use GitHub Classroom; start of Python review.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review"
    ]
  },
  {
    "objectID": "02_python/index.html#monday-982025",
    "href": "02_python/index.html#monday-982025",
    "title": "2. Python review",
    "section": "Monday, 9/8/2025",
    "text": "Monday, 9/8/2025\nContinuation of Python review: conditionals, loops, lists, and dictionaries (2 parts)",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review"
    ]
  },
  {
    "objectID": "02_python/index.html#wednesday-9102025",
    "href": "02_python/index.html#wednesday-9102025",
    "title": "2. Python review",
    "section": "Wednesday, 9/10/2025",
    "text": "Wednesday, 9/10/2025\nContinuation of Python review: functions, strings, and files",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review"
    ]
  },
  {
    "objectID": "02_python/python-1.html",
    "href": "02_python/python-1.html",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "",
    "text": "Identify the problem inputs (requirements)\nIdentify the problem outputs (results)\nWrite an algorithm to transform inputs to outputs.\nIf you don’t know how to do a step… research it!",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#input-process-output",
    "href": "02_python/python-1.html#input-process-output",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "",
    "text": "Identify the problem inputs (requirements)\nIdentify the problem outputs (results)\nWrite an algorithm to transform inputs to outputs.\nIf you don’t know how to do a step… research it!",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#python-input-and-output",
    "href": "02_python/python-1.html#python-input-and-output",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "Python input and output",
    "text": "Python input and output\nprint() does output\ninput() does input, returns input so you must assign it to a variable\n\nx = input(\"Enter something: \")\n\n\nprint(x)\n\n\n\n\n\n\n\nCautionCode Challenge 1.1\n\n\n\nWrite a program to input your first name and last name then output your last name, first name.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nfirst = input(\"Enter your first name: \")\nlast = input(\"Enter your last name: \")\nprint(last, \",\", first)\n# could also do (see next section):\nprint(f\"{last}, {first}\")",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#f-strings",
    "href": "02_python/python-1.html#f-strings",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "F-Strings",
    "text": "F-Strings\n\nF-Strings are Python’s answer to string interpolation.\nThis replaces the variable name with its value within a string.\nCalled an F-string because the f tells Python to interpolate the string.\n\n\nname = 'George'\nprint(\"{name} was curious.\")\nprint(f\"{name} was curious.\")\n\n{name} was curious.\nGeorge was curious.\n\n\n\n\n\n\n\n\nNoteCheck Yourself 1\n\n\n\nWhich is an example of a properly used string literal?\nA. print(welcome)\nB. print(\"welcome\")\nC. print \"welcome\"\nD. print welcome\nVote now at https://PollEv.com/ist356m3\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nB\nNote: In Python 2.7 and earlier the correct answer would be C. The syntax for the print function was changed in Python 3. Python 2 is no longer supported.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#variables",
    "href": "02_python/python-1.html#variables",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "Variables",
    "text": "Variables\n\nVariables are named areas of computer memory for storing data.\nThe name can be anything but should make symbolic sense to the programmer.\nWe write to the variable’s memory location with the assignment statement (=)\nWe read from the variable by calling its name.\nVariable names must begin with a letter or _ and must only contain letters, numbers or _.\n\n\nVariables are of a Specific Type\n\n\n\n\nType\n\n\nPurpose\n\n\nExamples\n\n\n\n\n\n\nint\n\n\nNumeric type for integers only\n\n\n45, -10\n\n\n\n\nfloat\n\n\nNumeric type floating point numbers\n\n\n45, -10\n\n\n\n\nbool\n\n\nTrue or False values\n\n\nTrue, False\n\n\n\n\nstr\n\n\nCharacters and text\n\n\n“A”, ‘Mike’\n\n\n\n\n\n\nType Detection and Conversion\n\n\n\n\nPython Function\n\n\nWhat It Does\n\n\nExample of Use\n\n\n\n\n\n\ntype(n)\n\n\nReturns the current type of n\n\n\ntype(13) == int\n\n\n\n\nint(n)\n\n\nConverts n to type int\n\n\nint(“45”) == 45\n\n\n\n\nfloat(n)\n\n\nConverts n to type float\n\n\nfloat(45) == 45.0\n\n\n\n\nstr(n)\n\n\nConverts n to type str\n\n\nstr(4.0) == ‘4.0’",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#programmatic-expressions",
    "href": "02_python/python-1.html#programmatic-expressions",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "Programmatic Expressions",
    "text": "Programmatic Expressions\nProgrammatic Expressions contain operators and operands. They evaluate to a value, preserving type:\n\nprint(2 + 2)\nprint(2.0 + 2)\nprint(\"sh\" + 'ip')\nprint('hi' + 2) # error\n\n4\n4.0\nship\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[2], line 4\n      2 print(2.0 + 2)\n      3 print(\"sh\" + 'ip')\n----&gt; 4 print('hi' + 2) # error\n\nTypeError: can only concatenate str (not \"int\") to str",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#arithmetic-operators",
    "href": "02_python/python-1.html#arithmetic-operators",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\n\n\n\nOperator\n\n\nWhat it Does\n\n\nExample of Use\n\n\n\n\n\n\n+\n\n\nAddition or string concenation\n\n\n3 + 4 == 7\n\n\n\n\n-\n\n\nSubtraction\n\n\n4 - 3 == 1\n\n\n\n\n*\n\n\nMultiplication\n\n\n3 * 4 == 12\n\n\n\n\n/\n\n\nDivision\n\n\n4 / 3 == 1.33333\n\n\n\n\n//\n\n\nIntger division (quotent)\n\n\n13 // 3 == 4\n\n\n\n\n%\n\n\nModulo (remainder)\n\n\n13 % 3 == 1\n\n\n\n\n( )\n\n\nForce an order of operations\n\n\n2 * (3 + 4) == 14\n\n\n\n\n\n\n\n\n\n\nCautionCode Challenge 1.2: Program to divide up the check among diners in a party\n\n\n\nWrite a program that takes as input the amount of a restaurant check, tip %, and number of diners.\nThe program should output the total amount with tip, and the amount each diner owes.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nbill = float(input(\"Enter the total amount of the bill $\"))\ntip = int(input(\"What % would you like to tip, eg. 20 == 20%? \"))\ntip_pct = tip/100\ndiners = int(input(\"How many diners? \"))\ntotal = bill + bill*tip_pct\nshare = total / diners\nprint(\"Total Bill, with Tip: \", total)\nprint(f\"Even share among {diners} diners is {share:.2f}\")\n\n\n\n\n\n\n\n\n\n\n\n\nNoteCheck Yourself 2\n\n\n\nWhat is the value of str(314) ?\nA. 314\nB. \"314\"\nC. int\nD. '34.0'\nVote now at https://PollEv.com/ist356m3\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\n\n\nNoteCheck Yourself 3\n\n\n\nWhat is the value of type(314.0) ?\nA. 314\nB. float\nC. int\nD. '314.0'\nVote now at https://PollEv.com/ist356m3\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\n\n\nNoteCheck Yourself 4\n\n\n\nWhat is the output of the following python code?\n\na = 10\nb = 2\nc = 1 + (a/b)\nprint(c)\n\nA. 6\nB. 5.5\nC. 6.0\nD. 5\nVote now at https://PollEv.com/ist356m3\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nC",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#program-flow-control-with-if",
    "href": "02_python/python-1.html#program-flow-control-with-if",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "Program Flow Control with IF",
    "text": "Program Flow Control with IF\n\nThe IF statement is used to branch your code based on a Boolean expression.\n\n\nif boolean-expression:\n    statements-when-true\nelse:\n    statemrnts-when-false",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#pythons-relational-operators",
    "href": "02_python/python-1.html#pythons-relational-operators",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "Python’s Relational Operators",
    "text": "Python’s Relational Operators\n\n\n\n\nOperator\n\n\nWhat it does\n\n\nExamples\n\n\n\n\n\n\n &gt; \n\n\nGreater than\n\n\n4&gt;2 (True)\n\n\n\n\n &lt; \n\n\nLess than\n\n\n4&lt;2 (False)\n\n\n\n\n == \n\n\nEqual To\n\n\n4==2 (False)\n\n\n\n\n != \n\n\nNot Equal To\n\n\n4!=2 (True)\n\n\n\n\n &gt;= \n\n\nGreater Than or Equal To\n\n\n4&gt;=2 (True)\n\n\n\n &lt;= \n\n\nLess Than or Equal To\n\n\n4&lt;=2 (True)\n\n\n\n\nExpressions consisting of relational operators evaluate to a Boolean value\n\n\n\n\n\n\nCautionCode Challenge 1.3: Presssure sensor that determines whether to open a door\n\n\n\nWrite code that simulates a pressure sensor that opens a door when the pressure is larger than 10; otherwise, it closes the door.\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nreading = float(input(\"Sensor Reading: \"))\n\nif reading &gt; 10:\n    status = \"Opening\"\nelse:\n    status = \"Closing\"\n\nprint(f\"{status} the door\")\n\n\n\n\n\n\n\n\n\n\n\n\nNoteCheck Yourself 5: Relational operators\n\n\n\nOn Which line number is the Boolean expression True?\n\nx = 15      # 1\ny = 20      # 2\nz = 2       # 3\nx &gt; y       # 4\nz*x &lt;= y    # 5\ny &gt;= x-z    # 6\nz*10 == x   # 7\n\nA. 4\nB. 5\nC. 6\nD. 7\nVote now at https://PollEv.com/ist356m3\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nC",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#pythons-logical-operators",
    "href": "02_python/python-1.html#pythons-logical-operators",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "Python’s Logical Operators",
    "text": "Python’s Logical Operators\n\n\n\n\nOperator\n\n\nWhat it does\n\n\nExamples\n\n\n\n\n\n\n and \n\n\nTrue only when both are True\n\n\n4&gt;2 and 4&lt;5 (True)\n\n\n\n\n or \n\n\nFalse only when both are False\n\n\n4&lt;2 or 4==4 (True)\n\n\n\n\n not \n\n\nNegation(Opposite)\n\n\nnot 4==2 (True)\n\n\n\n\n in \n\n\nSet operator\n\n\n4 in [2,4,7] (True)\n\n\n\n\n\n\n\n\n\n\nNoteCheck Yourself 6: Logical Operators\n\n\n\nIn the following code, which line evaluates to True?\n\nraining = False              # 1\nsnowing = True               # 2\nage = 45                     # 3\nage &lt; 18 and raining         # 4\nage &gt;= 18 and not snowing    # 5\nnot snowing or not raining   # 6\nage == 45 and not snowing    # 7\n\nA. 4\nB. 5\nC. 6\nD. 7\nVote now at https://PollEv.com/ist356m3\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nC",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "02_python/python-1.html#multiple-decisions-if-ladder",
    "href": "02_python/python-1.html#multiple-decisions-if-ladder",
    "title": "1. Input, output, variables, types, conditionals",
    "section": "Multiple Decisions: IF ladder",
    "text": "Multiple Decisions: IF ladder\nUse elif to make more than one decision in your if statement. Only one code block within the ladder is executed.\n\nif boolean-expression1:\n    statements-when-exp1-true\nelif boolean-expression2:\n    statements-when-exp2-true\nelif boolean-expression3:\n    statements-when-exp3-true\nelse:\n    statements-none-are-true\n\n\n\n#Elif versus multiple ifs...\n# One decision or multiple decisions. \n\nx = int(input(\"enter an integer\"))\n\n# one decision\nif x&gt;10:\n    print(\"A:bigger than 10\")\nelif x&gt;20:\n    print(\"A:bigger than 20\")    \n\n    # Multiple decisions\nif x&gt;10:\n    print(\"B:bigger than 10\")\nif x&gt;20:\n    print(\"B:bigger than 20\")\n\n\n\n\n\n\n\nNoteCheck Yourself 7: IF statement\n\n\n\nAssuming values x = 25 and y = 6, what will be printed when the following code is run?\n\nif x &gt; 20:\n    if y == 4:\n        print(\"One\")\n    elif y &gt; 4:\n        print(\"Two\")\n    else:\n        print(\"Three\")\nelse:\n    print(\"Four\")\n\nA. One\nB. Two\nC. Three\nD. Four\nVote now at https://PollEv.com/ist356m3\n\n\n\n\n\n\nNoteSolution\n\n\n\n\n\nB\n\n\n\n\n\n\n\n\n\n\n\nCautionCode Challenge 1.4: Number to letter grade\n\n\n\n\nLetter grades in a college class are computed as follows:\n\n95 and above is an A\n75 and above, but below 95 is a B\n50 and above, but below 75 is a C\nbelow 50 is F\n\nWrite a program to input the number grade and calculate the letter grade\nThe program should also print an error message if the provided number grade is out of range (i.e., &gt; 120 or &lt; 0).\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nnumber_grade = int(input(\"Enter your numerical grade: 0 - 120\"))\nletter_grade = \"unknown\"\n\nif number_grade &gt;= 0 and number_grade &lt;= 120:\n\n    if number_grade &gt;= 95:\n        letter_grade = \"A\"\n    elif number_grade &gt;= 75:\n        letter_grade = \"B\"\n    elif number_grade &gt;= 50:\n        letter_grade = \"C\"\n    else:\n        letter_grade = \"F\"\n\n    print(f\"For {number_grade} points the letter grade is {letter_grade}\")\n\nelse:\n    print(f\"Number grade of {number_grade} is out of range!\")",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "2. Python review",
      "1. Input, output, variables, types, conditionals"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IST 356: Programming Techniques for Data Analytics",
    "section": "",
    "text": "Room: Hinds Hall 021\nTime: M/W 3:45PM - 5:05PM\nInstructor: Collin Capano\nEmail: cdcapano@syr.edu\nOffice hours: Tuesdays, 11AM - 1PM in Hinds Hall 323G\nSyllabus"
  },
  {
    "objectID": "index.html#course-info",
    "href": "index.html#course-info",
    "title": "IST 356: Programming Techniques for Data Analytics",
    "section": "",
    "text": "Room: Hinds Hall 021\nTime: M/W 3:45PM - 5:05PM\nInstructor: Collin Capano\nEmail: cdcapano@syr.edu\nOffice hours: Tuesdays, 11AM - 1PM in Hinds Hall 323G\nSyllabus"
  },
  {
    "objectID": "index.html#class-schedule",
    "href": "index.html#class-schedule",
    "title": "IST 356: Programming Techniques for Data Analytics",
    "section": "Class Schedule",
    "text": "Class Schedule\nNote: schedule subject to change as we progress through the semester.\n\n\n\nWeek\nDates\nTopic\n\n\n\n\n1\n8/25, 8/29\nIntro; CLI and Conda\n\n\n2\n9/3\nPython review - 1\n\n\n3\n9/8, 9/10\nPython review - 2\n\n\n4\n9/15, 9/17\nUI\n\n\n5\n9/22, 9/24\nData wrangling - 1\n\n\n6\n9/29, 10/1\nData wrangling - 2\n\n\n7\n10/6, 10/8\nData wrangling - 3\n\n\n8\n10/15\nExam 1\n\n\n9\n10/20, 10/22\nWeb APIs - 1\n\n\n10\n10/27, 10/29\nWeb APIs - 2\n\n\n11\n11/3, 11/5\nWeb scraping - 1\n\n\n12\n11/10, 11/12\nWeb scraping - 2\n\n\n13\n11/17, 11/19\nData visualization - 1\n\n\n14\n12/1, 12/3\nData visualization - 2\n\n\n15\n12/8\nExam 2\n\n\n16\n12/15\nProject due"
  },
  {
    "objectID": "index.html#important-dates",
    "href": "index.html#important-dates",
    "title": "IST 356: Programming Techniques for Data Analytics",
    "section": "Important dates",
    "text": "Important dates\n\n\n\n\n\n\n\nDate\n\n\n\n\n\nMon. 8/25\nFirst day of class\n\n\nMon. 9/1\nLabor day - No class\n\n\nMon. 9/15\nAcademic/Financial drop deadline; Religious observance notification deadline\n\n\nMon. 10/13\nFall break - No class\n\n\nFri. 11/21\nWithdrawal deadline\n\n\n11/23-11/30\nThanksgiving Break - No class\n\n\nMon. 12/8\nLast day of class"
  },
  {
    "objectID": "01_cli_conda/index.html",
    "href": "01_cli_conda/index.html",
    "title": "1. Command line interface and Environments",
    "section": "",
    "text": "In this unit, you will learn how to use the bash shell in a command line interface (CLI), programming environments, and how to use conda to manage environments and install packages.",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments"
    ]
  },
  {
    "objectID": "01_cli_conda/index.html#wednesday-8282025",
    "href": "01_cli_conda/index.html#wednesday-8282025",
    "title": "1. Command line interface and Environments",
    "section": "Wednesday, 8/28/2025",
    "text": "Wednesday, 8/28/2025",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments"
    ]
  },
  {
    "objectID": "01_cli_conda/index.html#tutorials",
    "href": "01_cli_conda/index.html#tutorials",
    "title": "1. Command line interface and Environments",
    "section": "Tutorials",
    "text": "Tutorials\n\nIntroduction to CLI\nEnvironments and Conda",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "1. Command line interface and Environments"
    ]
  },
  {
    "objectID": "03_ui/ui-1.html",
    "href": "03_ui/ui-1.html",
    "title": "1. Interaction in Jupyter using ipywidgets",
    "section": "",
    "text": "Note\n\n\n\nTo do this tutorial you will need ipywidgets installed in your conda environment. To do that:\n\nOpen a terminal (from in VS Code, click “Terminal” -&gt; “New Terminal”).\nActivate your ist356 conda environment by running:\nconda activate ist356\nInstall ipywidgets by either running:\npip install ipywidgets\nor:\nconda install -c conda-forge -y ipywidgets",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "3. UI",
      "1. Interaction in Jupyter using ipywidgets"
    ]
  },
  {
    "objectID": "03_ui/ui-1.html#notebook-widgets-ipywidgets",
    "href": "03_ui/ui-1.html#notebook-widgets-ipywidgets",
    "title": "1. Interaction in Jupyter using ipywidgets",
    "section": "Notebook widgets: ipywidgets",
    "text": "Notebook widgets: ipywidgets\nThe jupyter notebook widgets create better UI interactions in notebooks. This is called the ipywidgets library. There is a lot to this library but we will keep our interactions simple.\nTo replace input() statements we use the interact_manual decorator function. Like a hat decorates your head, decorator function adds code to another function.\ninteract_manual decorator does the following:\n\ngenerates a textbox for any string input\ngenerates a slider for any int/float input\ngenerates a dropdown for any list input\ngenerates a button titled “Run interact”\n\nWhen the button is clicked the code inside the decorated function is executed and the widget values are used as input. Use display() instead of print() for output.\n\n# Necessary imports to make this work\nfrom IPython.display import display\nfrom ipywidgets import interact_manual\n\n\n# Example:\nvals = [ 'red', 'white', 'blue'] # this is a list type, it will generate a dropdown widget\nmin, max, step = 0, 20, 0.5      # this is the range of the slider, and the steps\ntext = \"testing\"                 # this is a string type, it will generate a textbox\n\n@interact_manual(color=vals, grade=(min,max,step), name=text) # DECORATOR function with values\ndef on_click(color, grade, name):                             # DECORATED function. This code \n    display(color)                                            # runs when the button is clicked \n    display(grade)                                            # (thus the name on_click)\n    display(name)\n\n\n\n\n\n\n\nNote\n\n\n\nFor more complex interactions we will use the streamlit library\n\n\n\n\n\n\n\n\nCautionCode Challenge 1.1\n\n\n\nCreate a simple widget interaction that will display student status for their GPA. The widget should take as inputs:\n\nthe student’s name;\ntheir major: one of “IMT”, “IST”, or “ADA”;\na gpa between 0.0 and 4.0.\n\nThe widget should process:\n\nwhen gpa &lt; 1.8 then status is “probation”\nwhen gpa &gt; 3.4 then status is “deans list”\nelse status is “no list”.\n\nThe widget should then display the following statement:\n\n\"NAME in MAJOR with GPA is on STATUS\"\n\n\n\n\n\n\n\nCautionSolution\n\n\n\n\n\n\nfrom IPython.display import display\nfrom ipywidgets import interact_manual\n\n\n@interact_manual(name=\"\", major=[\"IMT\", \"IST\", \"ADA\"], gpa=(0.0,4.0,0.05))\ndef onclick(name,major,gpa):\n    if gpa &lt; 1.8:\n        status = \"probation\"\n    elif gpa &gt; 3.4:\n        status = \"deans list\"\n    else:\n        status = \"no list\"\n    display(f\"{name} in {major} with gpa of {gpa} is on {status}.\")",
    "crumbs": [
      "<img src='/images/ischool_logo_reverseX2.png' height='30'>",
      "3. UI",
      "1. Interaction in Jupyter using ipywidgets"
    ]
  }
]