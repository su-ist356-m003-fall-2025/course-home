---
title: "Introduction to Command Line Interface and the Unix Shell"
order: 1
---

+------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+
| ### Questions                                        | ### Objectives                                                                                            |
+======================================================+===========================================================================================================+
| -   What is a command shell and why would I use one? | -   Explain how the shell relates to the keyboard, the screen, the operating system, and users' programs. |
|                                                      | -   Explain when and why command-line interfaces should be used instead of graphical interfaces.          |
+------------------------------------------------------+-----------------------------------------------------------------------------------------------------------+

# About this tutorial

This tutorial was heavily adapted from the [Shell Novice tutorial created by Software Carpentry](https://swcarpentry.github.io/shell-novice/).

## Command note sheet

The following Word document has a table of many of the commands we cover in this tutorial (and others!):

*   [Bash Commands cheat sheet](BashCommands.docx) (Click to download)

You can use this to keep notes of the commands you learn in this tutorial by filling out the "What it does / Meaning" column. When you're done, you will have your own cheat sheet of bash commands for future reference.

# Background

We interact with computers in many different ways, such as through a keyboard and mouse, and touch screen interfaces. The most widely used way to interact with personal computers is called a **graphical user interface** (GUI). With a GUI, we give instructions by clicking a mouse and using menu-driven interactions.

While the visual aid of a GUI makes it intuitive to use, this way of delivering instructions to a computer scales very poorly. Imagine the following task: you have to copy the third line of one thousand text files in one thousand different directories and paste it into a single file. Using a GUI, you would not only be clicking at your desk for several hours, but you could potentially also commit an error in the process of completing this repetitive task. This is where we take advantage of the Unix shell. **The Unix shell is both a command-line interface (CLI) and a scripting language**, allowing such repetitive tasks to be done automatically and fast. With the proper commands, the shell can repeat tasks with or without some modification as many times as we want. Using the shell, the task in the literature example can be accomplished in seconds.

# The Shell

The shell is a program where users can type commands. With the shell, it's possible to invoke complicated programs or simple commands with only one line of code. The most popular Unix shell is Bash (the Bourne Again SHell --- so-called because it's derived from a shell written by Stephen Bourne). Bash is the default shell on most implementations of Unix (Mac computers running macOS Catalina or later releases, the default Unix Shell is "Zsh") and in most packages that provide Unix-like tools for Windows. Note that 'Git Bash' is a piece of software that enables Windows users to use a Bash-like interface when interacting with Git.

Using the shell will take some effort and some time to learn. While a GUI presents you with choices to select, CLI choices are not automatically presented to you, so you must learn a few commands like new vocabulary in a language you're studying. Luckily, a small number of "words" (i.e. commands) gets you a long way, and we'll cover those essential few today.

The grammar of a shell allows you to combine existing tools into powerful pipelines and handle large volumes of data automatically. Sequences of commands can be written into a *script*, improving the reproducibility of workflows.

In addition, the command line is often the easiest way to interact with remote machines and supercomputers. Familiarity with the shell is near essential to run a variety of specialized tools and resources including high-performance computing systems. As clusters and cloud computing systems become more popular for scientific data crunching, being able to interact with the shell is becoming a necessary skill. We can build on the command-line skills covered here to tackle a wide range of scientific questions and computational challenges.

Let's get started.

## The prompt

When the shell is first opened, you are presented with a **prompt**, indicating that the shell is waiting for input.

``` bash
$
```

The shell typically uses `$` as the prompt, but may use a different symbol. In the examples for this lesson, we'll show the prompt as `$`. Most importantly, *do not type the prompt* when typing commands. Only type the command that follows the prompt. This rule applies both in these lessons and in lessons from other sources. Also note that after you type a command, you have to press the <kbd>Enter</kbd> key to execute it.

The prompt is followed by a **text cursor**, a character that indicates the position where your typing will appear. The cursor is usually a flashing or solid block, but it can also be an underscore or a pipe. You may have seen it in a text editor program, for example.

Note that your prompt might look a little different. In particular, most popular shell environments by default put your user name and the host name before the `$`. Such a prompt might look like, e.g.:

``` bash
cdcapano@localhost $
```

The prompt might even include more than this. Do not worry if your prompt is not just a short `$`. This lesson does not depend on this additional information and it should also not get in your way. The only important item to focus on is the `$` character itself and we will see later why.

::: {.callout appearance="simple"}
### OPTIONAL: Change your prompt to `$`

If you'd like to simplify your prompt for the purposes of this tutorial, copy and paste the code below into your terminal:

``` bash
PS1='$ '
```
:::

So let's try our first command, `ls`, which is short for **listing**. This command will list the contents of the current directory:

``` bash
$ ls
```

``` output
Desktop     Downloads   Movies      Pictures
Documents   Library     Music       Public
```

::: {.callout-tip appearance="simple" icon="false"}
## Command not found

If the shell can't find a program whose name is the command you typed, it will print an error message such as:

``` bash
$ ks
```

``` output
ks: command not found
```

This might happen if the command was mis-typed or if the program corresponding to that command is not installed.
:::

> ## A Typical Problem
>
> You are a marine biologist who has just returned from a six-month survey of the [North Pacific Gyre](#0), where you have sampled gelatinous marine life in the [Great Pacific Garbage Patch](#0). You have 1520 samples that you've run through an assay machine to measure the relative abundance of 300 proteins. You need to run these 1520 files through an imaginary program called `goostats.sh`. In addition to this huge task, you have to write up results by the end of the month, so your paper can appear in a special issue of *Aquatic Goo Letters*.
>
> If you choose to run `goostats.sh` by hand using a GUI, you'll have to select and open a file 1520 times. If `goostats.sh` takes 30 seconds to run each file, the whole process will take more than 12 hours. With the shell, you can instead assign your computer this mundane task while you focuses her attention on writing your paper.
>
> The next few lessons will explore the ways you can achieve this. More specifically, the lessons explain how you can use a command shell to run the `goostats.sh` program, using loops to automate the repetitive steps of entering file names, so that your computer can work while you write your paper.
>
> As a bonus, once you have put a processing pipeline together, you will be able to use it again whenever you collect more data.
>
> In order to achieve your task, you need to know how to:
>
> -   navigate to a file/directory
> -   create a file/directory
> -   check the length of a file
> -   chain commands together
> -   retrieve a set of files
> -   iterate over files
> -   run a shell script containing your pipeline
>
> ### Download files:
>
> You need to download some files to follow this lesson.
>
> 1.  Download [shell-lesson-data.zip](https://swcarpentry.github.io/shell-novice/data/shell-lesson-data.zip) and move the file to your Desktop.
>
> 2.  Unzip/extract the file. **Let your instructor know if you need help with this step**. You should end up with a new folder called **`shell-lesson-data`** on your Desktop.

::: {#keypoints .callout-note appearance="simple"}
## Key Points

-   A shell is a program whose primary purpose is to read commands and run other programs.
-   This lesson uses Bash, the default shell in many implementations of Unix.
-   Programs can be run in Bash by entering commands at the command-line prompt.
-   The shell's main advantages are its high action-to-keystroke ratio, its support for automating repetitive tasks, and its capacity to access networked machines.
-   A significant challenge when using the shell can be knowing what commands need to be run and how to run them.
:::

# Navigating files and directories

+---------------------------------------------------------------------------+---------------------------------------------------------------------------+
| Questions                                                                 | Objectives                                                                |
+===========================================================================+===========================================================================+
| -   How can I move around on my computer?                                 | -   Construct and work with absolute and relative paths                   |
| -   How can I see what files and directories I have?                      | -   Use options and arguments to change the behaviour of a shell command. |
| -   How can I specify the location of a file or directory on my computer? | -   Demonstrate the use of tab completion and explain its advantages.     |
+---------------------------------------------------------------------------+---------------------------------------------------------------------------+

The part of the operating system responsible for managing files and directories is called the **file system**. It organizes our data into files, which hold information, and directories (also called 'folders'), which hold files or other directories.

Several commands are frequently used to create, inspect, rename, and delete files and directories. To start exploring them, we'll go to our open shell window.

## Where am I?

First, let's find out where we are by running a command called `pwd` (which stands for 'print working directory'). Directories are like *places* — at any time while we are using the shell, we are in exactly one place called our **current working directory**. Commands mostly read and write files in the current working directory, i.e. 'here', so knowing where you are before running a command is important. `pwd` shows you where you are:

``` bash
$ pwd
```

``` bash
/Users/cdcapano
```

The computer's response is `/Users/cdcapano`, which is my **home directory**.

### The home directory

The home directory will look different on different operating systems.

-   Linux: `/home/cdcapano`
-   Windows: `C:\Users\cdcapano` (This may differ based on Windows versions)

If `pwd` returns something else, you may need to navigate to your home directory using the command `cd`.

Let's look at how a filesystem is organized:

![](fig/filesystem_yellow.png){fig-alt="The file system is made up of a root directory that contains sub-directories titled bin, data, users, and tmp" width="400"}

The filesystem looks like an upside-down tree. We refer to the topmost directory as the "root directory". It contains everything else. It is referred to with the `/` symbol.

In this illustration, we have several other directories stemming off of the root. The `bin` directory often refers to a location where programs are stored. `tmp` is a common directory on filesystems as a place to hold files that don't need to be kept long-term. You may recognize the `Users` directory from the output we had above when typing `pwd`. We know the path of our **home directory**, where we currently are, is `/Users/cdcapano`.

::: {.callout-tip appearance="simple" icon="false"}
### Slashes

There are two meanings for the `/` character. When it appears at the front of a path, it means "root", when it appears within a path, it acts as a separator.
:::

![](fig/filesystem_users.png){width="400"}

The `Users` folder may have more than one directory in it. For example, the image below depicts two users, cdcapano and aturing. The home directory just as the home directory for cdcapano is `/Users/cdcapano`, the home directory for aturing would be `/Users/aturing`. **Typically, when you open a new command prompt, you will start in your home directory by default**

## Listing directory contents

We often want to know what a directory contains. To do this, we use the "listing" command `ls`:

``` bash
$ ls
```

which might return something that looks like this (results will vary):

``` bash
Applications  Documents  Library  Music    Public
Desktop       Downloads  Movies   Pictures  
```

`ls` prints the names of the files and directories in your current location. Typing `ls -F` will give specific notation below based on the

-   A trailing `/` indicates that this is a directory

-   `@` indicates a link

-   `*` indicates an executable

Depending on your shell's default settings, the shell might also use colors to indicate whether each entry is a file or directory.

::: {.callout-tip appearance="simple" icon="false"}
### Clearing your terminal

If your screen gets too cluttered, you can clear your terminal using the `clear` command. You can still access previous commands using {{< kbd ↑ >}} and {{< kbd ↓ >}} to move line-by-line, or by scrolling in your terminal.
:::

## Getting help

Most bash commands have help menus that tell the user about how the command is used and what **options** are available for tailoring the function. There are two common ways to get help with commands, which can differ based on the source of the command (built-in or externally installed), and the operating system.

1.  We can pass a `--help` option to any command (on linux and Git Bash).

    ``` bash
    $ ls --help
    ```

2.  We can read the manual on a function using the `man` command (linux and OSX)

    ``` bash
    $ man ls
    ```

    To navigate through the `man` pages, you may use {{< kbd ↑ >}} and {{< kbd ↓ >}} to move line-by-line, or try {{< kbd b >}} and {{< kbd Spacebar >}} to skip up and down by a full page. To search for a character or word in the `man` pages, use {{< kbd / >}} followed by the character or word you are searching for. Sometimes a search will result in multiple hits. If so, you can move between hits using {{< kbd N >}} (for moving forward) and {{< kbd Shift+N >}} (for moving backward). To \*\*quit\*\* the `man` pages, press {{< kbd q >}}.

::: {.callout-tip appearance="simple" icon="false"}
### Bash Built-in commands

Some commands are built in to the Bash shell, rather than existing as separate programs on the filesystem. One example is the `cd` "change directory" command. If you get a message like `No manual entry for cd`, try `help cd` instead. The `help` command is how you get usage information for [Bash built-ins](https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html).
:::

## Command options

We've seen that commands can have many options associated with them, which can control how the command functions. These are often notated by short and long forms that are typically equal in their meaning, but have conventional use in different scenarios.

When options exist as both short and long options:

-   Use the short option when typing commands directly into the shell to minimize keystrokes and get your task done faster.

-   Use the long option in scripts to provide clarity. It will be read many times and typed once.

::: {.callout-tip appearance="simple" icon="false"}
### Unsupported commandline options

If you try to use an option that is not supported, `ls` and other commands will usually print an error message similar to:

``` bash
$ ls -j
```

Mac zsh output:

```         
ls: invalid option -- j
usage: ls [-@ABCFGHILOPRSTUWXabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]
```

other Unix output:

```         
ls: invalid option -- 'j'
Try 'ls --help' for more information.
```
:::

### Challenge Questions

Explore the `ls` command options to answer the following questions:

:::: {.callout-caution appearance="simple" icon="false"}
#### Question 1: Listing in long, human-readable format

Which options for `ls` produces output in *long* format that is *human readable*? (i.e. displaying something like `5.3K` instead of `5369)`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution

the options `-l` and `-h` can be used with `ls` to make the output long and human readable. You can use them in two ways:

-   `ls -l -h`

-   or string them together `ls -lh`
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
#### Question 2: Listing in Reverse Chronological Order

By default, `ls` lists the contents of a directory in alphabetical order by name. The command `ls -t` lists items by time of last change instead of alphabetically. The command `ls -r` lists the contents of a directory in reverse order. Which file is displayed last when you combine the `-t` and `-r` options? Hint: You may need to use the `-l` option to see the last changed dates.

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution

The most recently changed file is listed last when using `-rt`. This can be very useful for finding your most recent edits or checking to see if a new output file was written.
:::
::::

## Exploring other directories

Not only can we use `ls` on the current working directory, but we can use it to list the contents of a different directory. Let's take a look at our `Desktop` directory by running `ls -F Desktop`, i.e., the command `ls` with the `-F` **option** and the **argument** `Desktop`. The argument `Desktop` tells `ls` that we want a listing of something other than our current working directory:

``` bash
$ ls -F Desktop
```

You should see your newly created directory "workshop"

``` bash
shell-lesson-data/
```

Note that if a directory named `Desktop` does not exist in your current working directory, this command will return an error. Typically, a `Desktop` directory exists in your home directory, which we assume is the current working directory of your bash shell.

Your output should be a list of all the files and sub-directories in your Desktop directory, including the `shell-lesson-data` directory you downloaded at the setup for this lesson. (On most systems, the contents of the `Desktop` directory in the shell will show up as icons in a graphical user interface behind all the open windows. See if this is the case for you.)

Organizing things hierarchically helps us keep track of our work. While it's possible to put hundreds of files in our home directory just as it's possible to pile hundreds of printed papers on our desk, it's much easier to find things when they've been organized into sensibly-named subdirectories.

Now that we know the `shell-lesson-data` directory is located in our Desktop directory, we can do two things.

First, using the same strategy as before, we can look at its contents by passing a directory name to `ls`:

``` bash
$ ls -F Desktop/shell-lesson-data
```

``` bash
exercise-data/  north-pacific-gyre/
```

Second, we can actually change our location to a different directory, so we are no longer located in our home directory.

The command to change locations is `cd` followed by a directory name to change our working directory. `cd` stands for 'change directory', which is a bit misleading. The command doesn't change the directory; it changes the shell's current working directory. In other words it changes the shell's settings for what directory we are in. The `cd` command is akin to double-clicking a folder in a graphical interface to get into that folder.

Let's say we want to move into the `exercise-data` directory we saw above. We can use the following series of commands to get there:

``` bash
$ cd Desktop
$ cd shell-lesson-data
$ cd exercise-data
```

These commands will move us from our home directory into our Desktop directory, then into the `shell-lesson-data` directory, then into the `exercise-data` directory. You will notice that `cd` doesn't print anything. This is normal. Many shell commands will not output anything to the screen when successfully executed. But if we run `pwd` after it, we can see that we are now in `/Users/cdcapano/Desktop/shell-lesson-data/exercise-data`.

If we run `ls -F` without arguments now, it lists the contents of `/Users/cdcapano/Desktop/shell-lesson-data/exercise-data`, because that's where we now are:

``` bash
$ pwd
```

``` bash
/Users/cdcapano/Desktop/shell-lesson-data/exercise-data
```

``` bash
$ ls -F
```

``` bash
alkanes/  animal-counts/  creatures/  numbers.txt  writing/
```

We now know how to go down the directory tree (i.e. how to go into a subdirectory), but how do we go up (i.e. how do we leave a directory and go into its parent directory)? We might try the following:

``` bash
$ cd shell-lesson-data
```

``` bash
-bash: cd: shell-lesson-data: No such file or directory
```

But we get an error! Why is this?

With our methods so far, `cd` can only see sub-directories inside your current directory. There are different ways to see directories above your current location; we'll start with the simplest.

There is a shortcut in the shell to move up one directory level. It works as follows:

``` bash
$ cd ..
```

`..` is a special directory name meaning "the directory containing this one", or more succinctly, the **parent** of the current directory. Sure enough, if we run `pwd` after running `cd ..`, we're back in `/Users/cdcapano/Desktop/shell-lesson-data`:

``` bash
$ pwd
```

``` bash
/Users/cdcapano/Desktop/shell-lesson-data
```

The special directory `..` doesn't usually show up when we run `ls`. If we want to display it, we can add the `-a` option to `ls -F`:

``` bash
$ ls -F -a
```

``` bash
./  ../  exercise-data/  north-pacific-gyre/
```

`-a` stands for 'show all' (including hidden files); it forces `ls` to show us file and directory names that begin with `.`, such as `..` (which, if we're in `/Users/cdcapano`, refers to the `/Users` directory). As you can see, it also displays another special directory that's just called `.`, which means 'the current working directory'. It may seem redundant to have a name for it, but we'll see some uses for it soon.

Note that in most command line tools, multiple options can be combined with a single `-` and no spaces between the options; `ls -F -a` is equivalent to `ls -Fa`.

::: {.callout-note appearance="simple" icon="false"}
### Other Hidden Files

In addition to the hidden directories `..` and `.`, you may also see a file called `.bash_profile`. This file usually contains shell configuration settings. You may also see other files and directories beginning with `.`. These are usually files and directories that are used to configure different programs on your computer. The prefix `.` is used to prevent these configuration files from cluttering the terminal when a standard `ls` command is used.
:::

These three commands are the basic commands for navigating the filesystem on your computer: `pwd`, `ls`, and `cd`. Let's explore some variations on those commands. What happens if you type `cd` on its own, without giving a directory?

``` bash
$ cd
```

How can you check what happened? `pwd` gives us the answer!

``` bash
$ pwd
```

``` bash
/Users/cdcapano
```

It turns out that `cd` without an argument will return you to your home directory, which is great if you've got lost in your own filesystem.

Let's try returning to the `exercise-data` directory from before. Last time, we used three commands, but we can actually string together the list of directories to move to `exercise-data` in one step:

``` bash
$ cd Desktop/shell-lesson-data/exercise-data
```

Check that we've moved to the right place by running `pwd` and `ls -F`.

If we want to move up one level from the data directory, we could use `cd ..`. But there is another way to move to any directory, regardless of your current location.

So far, when specifying directory names, or even a directory path (as above), we have been using **relative paths**. When you use a relative path with a command like `ls` or `cd`, it tries to find that location from where we are, rather than from the root of the file system.

However, it is possible to specify the **absolute path** to a directory by including its entire path from the root directory, which is indicated by a leading slash. The leading `/` tells the computer to follow the path from the root of the file system, so it always refers to exactly one directory, no matter where we are when we run the command.

This allows us to move to our `shell-lesson-data` directory from anywhere on the filesystem (including from inside `exercise-data`). To find the absolute path we're looking for, we can use `pwd` and then extract the piece we need to move to `shell-lesson-data`.

``` bash
$ pwd
```

``` bash
/Users/cdcapano/Desktop/shell-lesson-data/exercise-data
```

``` bash
$ cd /Users/cdcapano/Desktop/shell-lesson-data
```

Run `pwd` and `ls -F` to ensure that we're in the directory we expect.

::: {.callout-tip appearance="simple" icon="false"}
### Two more shortcuts

The shell interprets a tilde (`~`) character at the start of a path to mean "the current user's home directory". For example, if your home directory is `/Users/cdcapano`, then `~/data` is equivalent to `/Users/cdcapano/data`. This only works if it is the first character in the path; `here/there/~/elsewhere` is *not* `here/there/Users/cdcapano/elsewhere`.

Another shortcut is the `-` (dash) character. `cd` will translate `-` into *the previous directory I was in*, which is faster than having to remember, then type, the full path. This is a *very* efficient way of moving *back and forth between two directories* -- i.e. if you execute `cd -` twice, you end up back in the starting directory.

The difference between `cd ..` and `cd -` is that the former brings you *up*, while the latter brings you *back*.

> **Try it!**
>
> First navigate to `~/Desktop/shell-lesson-data` (you should already be there).
>
> ``` bash
> $ cd ~/Desktop/shell-lesson-data
> ```
>
> Then `cd` into the `exercise-data/creatures` directory
>
> ``` bash
> $ cd exercise-data/creatures
> ```
>
> Now if you run
>
> ``` bash
> $ cd -
> ```
>
> you'll see you're back in `~/Desktop/shell-lesson-data`. Run `cd -` again and you're back in `~/Desktop/shell-lesson-data/exercise-data/creatures`
:::

### Challenge Questions

:::: {.callout-caution appearance="simple" icon="false"}
#### Question 3: Absolute vs Relative Paths

Starting from `/Users/cdcapano/data`, which of the following commands could cdcapano use to navigate to her home directory, which is `/Users/cdcapano`?

1.  `cd .`
2.  `cd /`
3.  `cd /home/cdcapano`
4.  `cd ../..`
5.  `cd ~`
6.  `cd home`
7.  `cd ~/data/..`
8.  `cd`
9.  `cd ..`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution {.callout-caution appearance="simple" icon="false"}

1.  No: `.` stands for the current directory.
2.  No: `/` stands for the root directory.
3.  No: cdcapano's home directory is `/Users/cdcapano`.
4.  No: this command goes up two levels, i.e. ends in `/Users`.
5.  Yes: `~` stands for the user's home directory, in this case `/Users/cdcapano`.
6.  No: this command would navigate into a directory `home` in the current directory if it exists.
7.  Yes: unnecessarily complicated, but correct.
8.  Yes: shortcut to go back to the user's home directory.
9.  Yes: goes up one level.
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
#### Question 4: Relative Path Resolution

Using the filesystem diagram below, if `pwd` displays `/Users/thing`, what will `ls -F ../backup` display?

![](fig/challenge_question3.png){width="500"}

1.  `../backup: No such file or directory`
2.  `2012-12-01 2013-01-08 2013-01-27`
3.  `2012-12-01/ 2013-01-08/ 2013-01-27/`
4.  `original/ pnas_final/ pnas_sub/`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution {.callout-caution appearance="simple" icon="false"}

1.  No: there *is* a directory `backup` in `/Users`.
2.  No: this is the content of `Users/thing/backup`, but with `..`, we asked for one level further up.
3.  No: see previous explanation.
4.  Yes: `../backup/` refers to `/Users/backup/`.
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
#### Question 5: `ls` reading comprehension

Using the filesystem diagram below, if `pwd` displays `/Users/backup`, and `-r` tells `ls` to display things in reverse order, what command(s) will result in the following output:

``` bash
pnas_sub/ pnas_final/ original/
```

![](fig/challenge_question3.png){width="500"}

1.  `ls pwd`
2.  `ls -r -F`
3.  `ls -r -F /Users/backup`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution

1.  No: `pwd` is not the name of a directory.
2.  Yes: `ls` without directory argument lists files and directories in the current directory.
3.  Yes: uses the absolute path explicitly.
:::
::::

## General Syntax of a Shell Command

We have now encountered commands, options, and arguments, but it is perhaps useful to formalise some terminology.

Consider the command below as a general example of a command, which we will dissect into its component parts:

``` bash
$ ls -F /
```

![](fig/command_syntax.png)

`ls` is the **command**, with an **option** `-F` and an **argument** `/`. We've already encountered options which either start with a single dash (`-`), known as **short options**, or two dashes (`--`), known as **long options**. **Options** change the behavior of a command and **arguments** tell the command what to operate on (e.g. files and directories). Sometimes options and arguments are referred to as **parameters**. A command can be called with more than one option and more than one argument, but a command doesn't always require an argument or an option.

You might sometimes see options being referred to as **switches** or **flags**, especially for options that take no argument. In this lesson we will stick with using the term *option*.

Each part is separated by spaces. If you omit the space between `ls` and `-F` the shell will look for a command called `ls-F`, which doesn't exist. Also, capitalization can be important. For example, `ls -s` will display the size of files and directories alongside the names, while `ls -S` will sort the files and directories by size, as shown below:

``` bash
$ cd ~/Desktop/shell-lesson-data
$ ls -s exercise-data
```

``` bash
total 28
 4 animal-counts   4 creatures  12 numbers.txt   4 alkanes   4 writing
```

Note that the sizes returned by `ls -s` are in *blocks*. As these are defined differently for different operating systems, you may not obtain the same figures as in the example.

``` bash
$ ls -S exercise-data
```

``` bash
animal-counts  creatures  alkanes  writing  numbers.txt
```

Putting all that together, our command `ls -F /` above gives us a listing of files and directories in the root directory `/`. An example of the output you might get from the above command is given below:

``` bash
$ ls -F /
```

``` bash
Applications/         System/
Library/              Users/
Network/              Volumes/
```

> ## Your Task: Organizing Files
>
> Knowing this much about files and directories, You are ready to organize the files that the protein assay machine will create.
>
> You create a directory called `north-pacific-gyre` (to remind yourself where the data came from), which will contain the data files from the assay machine and your data processing scripts.
>
> Each of your physical samples is labelled according to your lab's convention with a unique ten-character ID, such as 'NENE01729A'. This ID is what you used in your collection log to record the location, time, depth, and other characteristics of the sample, so you decide to use it within the filename of each data file. Since the output of the assay machine is plain text, you will call your files `NENE01729A.txt`, `NENE01812A.txt`, and so on. All 1520 files will go into the same directory.
>
> Now in your current directory `shell-lesson-data`, you can see what files you have using the command:
>
> ``` bash
> $ ls north-pacific-gyre/
> ```
>
> This command is a lot to type, but you can let the shell do most of the work through what is called **tab completion**. If you types:
>
> ``` bash
> $ ls nor
> ```
>
> and then presses Tab (the tab key on her keyboard), the shell automatically completes the directory name for you:
>
> ``` bash
> $ ls north-pacific-gyre/
> ```
>
> Pressing Tab again does nothing, since there are multiple possibilities; pressing Tab twice brings up a list of all the files.
>
> If you then presses G and then presses Tab again, the shell will append 'goo' since all files that start with 'g' share the first three characters 'goo'.
>
> ``` bash
> $ ls north-pacific-gyre/goo
> ```
>
> To see all of those files, you can press Tab twice more.
>
> ``` bash
> ls north-pacific-gyre/goo
> goodiff.sh   goostats.sh
> ```
>
> This is called **tab completion**, and we will see it in many other tools as we go on.

::: {.callout-note appearance="simple" icon="false"}
## Key Points

-   The file system is responsible for managing information on the disk.
-   Information is stored in files, which are stored in directories (folders).
-   Directories can also store other directories, which then form a directory tree.
-   `pwd` prints the user's current working directory.
-   `ls [path]` prints a listing of a specific file or directory; `ls` on its own lists the current working directory.
-   `cd [path]` changes the current working directory.
-   Most commands take options that begin with a single `-`.
-   Directory names in a path are separated with `/` on Unix, but `\` on Windows.
-   `/` on its own is the root directory of the whole file system.
-   An absolute path specifies a location from the root of the file system.
-   A relative path specifies a location starting from the current location.
-   `.` on its own means 'the current directory'; `..` means 'the directory above the current one'.
:::

# Creating, moving, removing

+---------------------------------------------------------------+--------------------------------------------------------+
| Questions                                                     | Objectives                                             |
+===============================================================+========================================================+
| -   How can I navigate my filesystem at the CLI               | -   Create a new directory hierarchy                   |
| -   How can I create, copy, and delete files and directories? | -   Create files in that hierarchy using a text editor |
| -   How can I edit files?                                     | -   Delete, copy, and move files and/or directories    |
+---------------------------------------------------------------+--------------------------------------------------------+

## Creating Directories and Files

We now know how to explore files and directories, but how do we create them in the first place?

In this episode we will learn about creating and moving files and directories, using the `exercise-data/writing` directory as an example.

### Step one: see where we are and what we already have

We should still be in the `shell-lesson-data` directory on the Desktop, which we can check using:

``` bash
$ pwd
```

``` bash
/Users/cdcapano/Desktop/shell-lesson-data
```

Next we'll move to the `exercise-data/writing` directory and see what it contains:

``` bash
$ cd exercise-data/writing/
$ ls -F
```

``` bash
haiku.txt  LittleWomen.txt
```

### Create a directory

Let's create a new directory called `thesis` using the command `mkdir thesis` (which has no output):

``` bash
$ mkdir thesis
```

As you might guess from its name, `mkdir` means 'make directory'. Since `thesis` is a relative path (i.e., does not have a leading slash, like `/what/ever/thesis`), the new directory is created in the current working directory:

``` bash
$ ls -F
```

``` bash
haiku.txt  LittleWomen.txt  thesis/
```

Since we've just created the `thesis` directory, there's nothing in it yet:

``` bash
$ ls -F thesis
```

Note that `mkdir` is not limited to creating single directories one at a time. The `-p` option allows `mkdir` to create a directory with nested subdirectories in a single operation:

``` bash
$ mkdir -p ../project/data ../project/results
```

The `-R` option to the `ls` command will list all nested subdirectories within a directory. Let's use `ls -FR` to recursively list the new directory hierarchy we just created in the `project` directory:

``` bash
$ ls -FR ../project
```

``` bash
../project/:
data/  results/

../project/data:

../project/results:
```

::: {.callout-note appearance="simple" icon="false"}
### Two ways of doing the same thing

Using the shell to create a directory is no different than using a file explorer. If you open the current directory using your operating system's graphical file explorer, the `thesis` directory will appear there too. While the shell and the file explorer are two different ways of interacting with the files, the files and directories themselves are the same.
:::

::: {.callout-note appearance="simple" icon="false"}
### Good names for files and directories

Complicated names of files and directories can make your life painful when working on the command line. Here we provide a few useful tips for the names of your files and directories.

1.  Don't use spaces.

Spaces can make a name more meaningful, but since spaces are used to separate arguments on the command line it is better to avoid them in names of files and directories. You can use `-` or `_` instead (e.g. `north-pacific-gyre/` rather than `north pacific gyre/`). To test this out, try typing `mkdir north pacific gyre` and see what directory (or directories!) are made when you check with `ls -F`.

2.  Don't begin the name with `-` (dash).

Commands treat names starting with `-` as options.

3.  Stick with letters, numbers, `.` (period or 'full stop'), `-` (dash) and `_` (underscore).

Many other characters have special meanings on the command line. We will learn about some of these during this lesson. There are special characters that can cause your command to not work as expected and can even result in data loss.

If you need to refer to names of files or directories that have spaces or other special characters, you should surround the name in single [quotes](https://www.gnu.org/software/bash/manual/html_node/Quoting.html) (`''`).
:::

### Create a text file

Let's change our working directory to `thesis` using `cd`, then run a text editor called Nano to create a file called `draft.txt`:

```         
$ cd thesis
$ nano draft.txt
```

::: {.callout-note appearance="simple" icon="false"}
### Which editor?

When we say, '`nano` is a text editor' we really do mean 'text'. It can only work with plain character data, not tables, images, or any other human-friendly media. We use it in examples because it is one of the least complex text editors. However, because of this trait, it may not be powerful enough or flexible enough for the work you need to do after this workshop. On Unix systems (such as Linux and macOS), many programmers use [Emacs](https://www.gnu.org/software/emacs/) or [Vim](https://www.vim.org/) (both of which require more time to learn), or a graphical editor such as [Gedit](https://projects.gnome.org/gedit/) or [VScode](https://code.visualstudio.com/). On Windows, you may wish to use [Notepad++](https://notepad-plus-plus.org/). Windows also has a built-in editor called `notepad` that can be run from the command line in the same way as `nano` for the purposes of this lesson.

No matter what editor you use, you will need to know where it searches for and saves files. If you start it from the shell, it will (probably) use your current working directory as its default location. If you use your computer's start menu, it may want to save files in your Desktop or Documents directory instead. You can change this by navigating to another directory the first time you 'Save As...'
:::

Let's type a few lines of text:

![](fig/nano_draft.png)

Once we're happy with our text, we can press Ctrl+O (press the Ctrl or Control key and, while holding it down, press the O key) to write our data to disk. We will be asked to provide a name for the file that will contain our text. Press Return to accept the suggested default of `draft.txt`.

Once our file is saved, we can use Ctrl+X to quit the editor and return to the shell.

::: {.callout-tip appearance="simple" icon="false"}
### Control, Ctrl, or \^ Key

The Control key is also called the 'Ctrl' key. There are various ways in which using the Control key may be described. For example, you may see an instruction to press the Control key and, while holding it down, press the X key, described as any of:

-   `Control-X`
-   `Control+X`
-   `Ctrl-X`
-   `Ctrl+X`
-   `^X`
-   `C-x`

In nano, along the bottom of the screen you'll see `^G Get Help ^O WriteOut`. This means that you can use `Control-G` to get help and `Control-O` to save your file.
:::

`nano` doesn't leave any output on the screen after it exits, but `ls` now shows that we have created a file called `draft.txt`:

``` bash
$ ls
```

``` bash
draft.txt
```

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: Creating Files a Different Way

We have seen how to create text files using the `nano` editor. Now, try the following command:

```         
$ touch my_file.txt
```

1.  What did the `touch` command do? When you look at your current directory using the GUI file explorer, does the file show up?
2.  Use `ls -l` to inspect the files. How large is `my_file.txt`?
3.  When might you want to create a file this way?

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution {.callout-caution appearance="simple" icon="false"}

1.  The `touch` command generates a new file called `my_file.txt` in your current directory. You can observe this newly generated file by typing `ls` at the command line prompt. `my_file.txt` can also be viewed in your GUI file explorer.
2.  When you inspect the file with `ls -l`, note that the size of `my_file.txt` is 0 bytes. In other words, it contains no data. If you open `my_file.txt` using your text editor it is blank.
3.  Some programs do not generate output files themselves, but instead require that empty files have already been generated. When the program is run, it searches for an existing file to populate with its output. The touch command allows you to efficiently generate a blank text file to be used by such programs.
:::

To avoid confusion later on, we suggest removing the file you've just created before proceeding with the rest of the episode, otherwise future outputs may vary from those given in the lesson. To do this, use the following command:

``` bash
$ rm my_file.txt
```
::::

> ### What's in a name?
>
> You may have noticed that all of your files are named 'something dot something', and in this part of the lesson, we always used the extension `.txt`. This is just a convention; we can call a file `mythesis` or almost anything else we want. However, most people use two-part names most of the time to help them (and their programs) tell different kinds of files apart. The second part of such a name is called the **filename extension** and indicates what type of data the file holds: `.txt` signals a plain text file, `.pdf` indicates a PDF document, `.cfg` is a configuration file full of parameters for some program or other, `.png` is a PNG image, and so on.
>
> This is just a convention, albeit an important one. Files merely contain bytes; it's up to us and our programs to interpret those bytes according to the rules for plain text files, PDF documents, configuration files, images, and so on.
>
> Naming a PNG image of a whale as `whale.mp3` doesn't somehow magically turn it into a recording of whale song, though it *might* cause the operating system to associate the file with a music player program. In this case, if someone double-clicked `whale.mp3` in a file explorer program, the music player will automatically (and erroneously) attempt to open the `whale.mp3` file.

## Moving Files and Directories

Returning to the `shell-lesson-data/exercise-data/writing` directory,

``` bash
$ cd ~/Desktop/shell-lesson-data/exercise-data/writing
```

In our `thesis` directory we have a file `draft.txt` which isn't a particularly informative name, so let's change the file's name using `mv`, which is short for 'move':

``` bash
$ mv thesis/draft.txt thesis/quotes.txt
```

The first argument tells `mv` what we're 'moving', while the second is where it's to go. In this case, we're moving `thesis/draft.txt` to `thesis/quotes.txt`, which has the same effect as renaming the file. Sure enough, `ls` shows us that `thesis` now contains one file called `quotes.txt`:

``` bash
$ ls thesis
```

``` bash
quotes.txt
```

One must be careful when specifying the target file name, since `mv` will silently overwrite any existing file with the same name, which could lead to data loss. By default, `mv` will not ask for confirmation before overwriting files. However, an additional option, `mv -i` (or `mv --interactive`), will cause `mv` to request such confirmation.

Note that `mv` also works on directories.

Let's move `quotes.txt` into the current working directory. We use `mv` once again, but this time we'll use just the name of a directory as the second argument to tell `mv` that we want to keep the filename but put the file somewhere new. (This is why the command is called 'move'.) In this case, the directory name we use is the special directory name `.` that we mentioned earlier.

``` bash
$ mv thesis/quotes.txt .
```

The effect is to move the file from the directory it was in to the current working directory. `ls` now shows us that `thesis` is empty:

``` bash
$ ls thesis
```

``` bash
$
```

Alternatively, we can confirm the file `quotes.txt` is no longer present in the `thesis` directory by explicitly trying to list it:

``` bash
$ ls thesis/quotes.txt
```

``` bash
ls: cannot access 'thesis/quotes.txt': No such file or directory
```

`ls` with a filename or directory as an argument only lists the requested file or directory. If the file given as the argument doesn't exist, the shell returns an error as we saw above. We can use this to see that `quotes.txt` is now present in our current directory:

``` bash
$ ls quotes.txt
```

``` bash
quotes.txt
```

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: Moving files to a new folder

After running the following commands, Jamie realizes that she put the files `sucrose.dat` and `maltose.dat` into the wrong folder. The files should have been placed in the `raw` folder.

``` bash
$ ls -F
 analyzed/ raw/
$ ls -F analyzed
fructose.dat glucose.dat maltose.dat sucrose.dat
$ cd analyzed
```

Fill in the blanks to move these files to the `raw/` folder (i.e. the one she forgot to put them in)

``` bash
$ mv sucrose.dat maltose.dat ____/____
```

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution {.callout-caution appearance="simple" icon="false"}

``` bash
$ mv sucrose.dat maltose.dat ../raw
```

Recall that `..` refers to the parent directory (i.e. one above the current directory) and that `.` refers to the current directory.
:::
::::

## Copying Files and Directories

The `cp` command works very much like `mv`, except it copies a file instead of moving it. We can check that it did the right thing using `ls` with two paths as arguments --- like most Unix commands, `ls` can be given multiple paths at once:

``` bash
$ cp quotes.txt thesis/quotations.txt
$ ls quotes.txt thesis/quotations.txt
```

``` bash
quotes.txt   thesis/quotations.txt
```

We can also copy a directory and all its contents by using the [recursive](https://en.wikipedia.org/wiki/Recursion) option `-r`, e.g. to back up a directory:

``` bash
$ cp -r thesis thesis_backup
```

We can check the result by listing the contents of both the `thesis` and `thesis_backup` directory:

``` bash
$ ls thesis thesis_backup
```

``` bash
thesis:
quotations.txt

thesis_backup:
quotations.txt
```

It is important to include the `-r` flag. If you want to copy a directory and you omit this option you will see a message that the directory has been omitted because `-r not specified`.

``` bash
$ cp thesis thesis_backup
cp: -r not specified; omitting directory 'thesis'
```

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: Renaming files

Suppose that you created a plain-text file in your current directory to contain a list of the statistical tests you will need to do to analyze your data, and named it `statstics.txt`

After creating and saving this file you realize you misspelled the filename! You want to correct the mistake, which of the following commands could you use to do so?

1.  `cp statstics.txt statistics.txt`
2.  `mv statstics.txt statistics.txt`
3.  `mv statstics.txt .`
4.  `cp statstics.txt .`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution

1.  No. While this would create a file with the correct name, the incorrectly named file still exists in the directory and would need to be deleted.
2.  Yes, this would work to rename the file.
3.  No, the period(.) indicates where to move the file, but does not provide a new file name; identical file names cannot be created.
4.  No, the period(.) indicates where to copy the file, but does not provide a new file name; identical file names cannot be created.
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: Moving and copying

What is the output of the closing `ls` command in the sequence shown below?

``` bash
$ pwd
```

``` bash
/Users/jamie/data
```

``` bash
$ ls
```

``` bash
proteins.dat
```

``` bash
$ mkdir recombined
$ mv proteins.dat recombined/
$ cp recombined/proteins.dat ../proteins-saved.dat
$ ls
```

1.  `proteins-saved.dat recombined`
2.  `recombined`
3.  `proteins.dat recombined`
4.  `proteins-saved.dat`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution

We start in the `/Users/jamie/data` directory, and create a new folder called `recombined`. The second line moves (`mv`) the file `proteins.dat` to the new folder (`recombined`). The third line makes a copy of the file we just moved. The tricky part here is where the file was copied to. Recall that `..` means 'go up a level', so the copied file is now in `/Users/jamie`. Notice that `..` is interpreted with respect to the current working directory, **not** with respect to the location of the file being copied. So, the only thing that will show using ls (in `/Users/jamie/data`) is the recombined folder.

1.  No, see explanation above. `proteins-saved.dat` is located at `/Users/jamie`
2.  Yes
3.  No, see explanation above. `proteins.dat` is located at `/Users/jamie/data/recombined`
4.  No, see explanation above. `proteins-saved.dat` is located at `/Users/jamie`
:::
::::

## Removing files and directories

Returning to the `shell-lesson-data/exercise-data/writing` directory, let's tidy up this directory by removing the `quotes.txt` file we created. The Unix command we'll use for this is `rm` (short for 'remove'):

``` bash
$ rm quotes.txt
```

We can confirm the file has gone using `ls`:

``` bash
$ ls quotes.txt
```

``` bash
ls: cannot access 'quotes.txt': No such file or directory
```

::: {.callout-important appearance="simple"}
### Deleting is forever

The Unix shell doesn't have a trash bin that we can recover deleted files from (though most graphical interfaces to Unix do). Instead, when we delete files, they are unlinked from the file system so that their storage space on disk can be recycled. Tools for finding and recovering deleted files do exist, but there's no guarantee they'll work in any particular situation, since the computer may recycle the file's disk space right away.
:::

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: Using `rm` Safely

What happens when we execute `rm -i thesis_backup/quotations.txt`? Why would we want this protection when using `rm`?

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution

``` bash
rm: remove regular file 'thesis_backup/quotations.txt'? y
```

The `-i` option will prompt before (every) removal (use Y to confirm deletion or N to keep the file). The Unix shell doesn't have a trash bin, so all the files removed will disappear forever. By using the `-i` option, we have the chance to check that we are deleting only the files that we want to remove.
:::
::::

If we try to remove the `thesis` directory using `rm thesis`, we get an error message:

```         
$ rm thesis
```

```         
rm: cannot remove 'thesis': Is a directory
```

This happens because `rm` by default only works on files, not directories.

`rm` can remove a directory *and all its contents* if we use the recursive option `-r`, and it will do so *without any confirmation prompts*:

```         
$ rm -r thesis
```

Given that there is no way to retrieve files deleted using the shell, `rm -r` *should be used with great caution* (you might consider adding the interactive option `rm -r -i`).

## Operations with Multiple Filenames

Oftentimes one needs to copy or move several files at once. This can be done by providing a list of individual filenames, or specifying a naming pattern using wildcards. Wildcards are special characters that can be used to represent unknown characters or sets of characters when navigating the Unix file system.

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: Copy with Multiple Filenames

For this exercise, you can test the commands in the `shell-lesson-data/exercise-data` directory.

In the example below, what does `cp` do when given several filenames and a directory name?

``` bash
$ mkdir backup
$ cp creatures/minotaur.dat creatures/unicorn.dat backup/
```

In the example below, what does `cp` do when given three or more file names?

``` bash
$ cd creatures
$ ls -F
```

```         
basilisk.dat  minotaur.dat  unicorn.dat
```

``` bash
$ cp minotaur.dat unicorn.dat basilisk.dat
```

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution

If given more than one file name followed by a directory name (i.e. the destination directory must be the last argument), `cp` copies the files to the named directory.

If given three file names, `cp` throws an error such as the one below, because it is expecting a directory name as the last argument.

```         
cp: target 'basilisk.dat' is not a directory
```
:::
::::

## Using Wildcards for Accessing Multiple Files at Once

`*` is a **wildcard**, which represents zero or more other characters. Let's consider the `shell-lesson-data/exercise-data/alkanes` directory: `*.pdb` represents `ethane.pdb`, `propane.pdb`, and every file that ends with '.pdb'. On the other hand, `p*.pdb` only represents `pentane.pdb` and `propane.pdb`, because the 'p' at the front can only represent filenames that begin with the letter 'p'.

`?` is also a wildcard, but it represents exactly one character. So `?ethane.pdb` could represent `methane.pdb` whereas `*ethane.pdb` represents both `ethane.pdb` and `methane.pdb`.

Wildcards can be used in combination with each other. For example, `???ane.pdb` indicates three characters followed by `ane.pdb`, giving `cubane.pdb  ethane.pdb  octane.pdb`.

When the shell sees a wildcard, it expands the wildcard to create a list of matching filenames *before* running the preceding command. As an exception, if a wildcard expression does not match any file, Bash will pass the expression as an argument to the command as it is. For example, typing `ls *.pdf` in the `alkanes` directory (which contains only files with names ending with `.pdb`) results in an error message that there is no file called `*.pdf`. However, generally commands like `wc` and `ls` see the lists of file names matching these expressions, but not the wildcards themselves. It is the shell, not the other programs, that expands the wildcards.

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: List filenames matching a pattern

When run in the `alkanes` directory, which `ls` command(s) will produce this output?

`ethane.pdb   methane.pdb`

1.  `ls *t*ane.pdb`
2.  `ls *t?ne.*`
3.  `ls *t??ne.pdb`
4.  `ls ethane.*`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

The solution is `3.`

`1.` shows all files whose names contain zero or more characters (`*`) followed by the letter `t`, then zero or more characters (`*`) followed by `ane.pdb`. This gives `ethane.pdb  methane.pdb  octane.pdb  pentane.pdb`.

`2.` shows all files whose names start with zero or more characters (`*`) followed by the letter `t`, then a single character (`?`), then `ne.` followed by zero or more characters (`*`). This will give us `octane.pdb` and `pentane.pdb` but doesn't match anything which ends in `thane.pdb`.

`3.` fixes the problems of option 2 by matching two characters (`??`) between `t` and `ne`. This is the solution.

`4.` only shows files starting with `ethane.`.
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: More on wildcards

Sam has a directory containing calibration data, datasets, and descriptions of the datasets:

``` bash
.
├── 2015-10-23-calibration.txt
├── 2015-10-23-dataset1.txt
├── 2015-10-23-dataset2.txt
├── 2015-10-23-dataset_overview.txt
├── 2015-10-26-calibration.txt
├── 2015-10-26-dataset1.txt
├── 2015-10-26-dataset2.txt
├── 2015-10-26-dataset_overview.txt
├── 2015-11-23-calibration.txt
├── 2015-11-23-dataset1.txt
├── 2015-11-23-dataset2.txt
├── 2015-11-23-dataset_overview.txt
├── backup
│   ├── calibration
│   └── datasets
└── send_to_bob
    ├── all_datasets_created_on_a_23rd
    └── all_november_files
```

Before heading off to another field trip, she wants to back up her data and send some datasets to her colleague Bob. Sam uses the following commands to get the job done:

``` bash
$ cp *dataset* backup/datasets
$ cp ____calibration____ backup/calibration
$ cp 2015-____-____ send_to_bob/all_november_files/
$ cp ____ send_to_bob/all_datasets_created_on_a_23rd/
```

Help Sam by filling in the blanks.

The resulting directory structure should look like this

``` bash
.
├── 2015-10-23-calibration.txt
├── 2015-10-23-dataset1.txt
├── 2015-10-23-dataset2.txt
├── 2015-10-23-dataset_overview.txt
├── 2015-10-26-calibration.txt
├── 2015-10-26-dataset1.txt
├── 2015-10-26-dataset2.txt
├── 2015-10-26-dataset_overview.txt
├── 2015-11-23-calibration.txt
├── 2015-11-23-dataset1.txt
├── 2015-11-23-dataset2.txt
├── 2015-11-23-dataset_overview.txt
├── backup
│   ├── calibration
│   │   ├── 2015-10-23-calibration.txt
│   │   ├── 2015-10-26-calibration.txt
│   │   └── 2015-11-23-calibration.txt
│   └── datasets
│       ├── 2015-10-23-dataset1.txt
│       ├── 2015-10-23-dataset2.txt
│       ├── 2015-10-23-dataset_overview.txt
│       ├── 2015-10-26-dataset1.txt
│       ├── 2015-10-26-dataset2.txt
│       ├── 2015-10-26-dataset_overview.txt
│       ├── 2015-11-23-dataset1.txt
│       ├── 2015-11-23-dataset2.txt
│       └── 2015-11-23-dataset_overview.txt
└── send_to_bob
    ├── all_datasets_created_on_a_23rd
    │   ├── 2015-10-23-dataset1.txt
    │   ├── 2015-10-23-dataset2.txt
    │   ├── 2015-10-23-dataset_overview.txt
    │   ├── 2015-11-23-dataset1.txt
    │   ├── 2015-11-23-dataset2.txt
    │   └── 2015-11-23-dataset_overview.txt
    └── all_november_files
        ├── 2015-11-23-calibration.txt
        ├── 2015-11-23-dataset1.txt
        ├── 2015-11-23-dataset2.txt
        └── 2015-11-23-dataset_overview.txt
```

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

``` bash
$ cp *calibration.txt backup/calibration
$ cp 2015-11-* send_to_bob/all_november_files/
$ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/
```
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Organizing directories and files

Jamie is working on a project, and she sees that her files aren't very well organized:

``` bash
$ ls -F
```

``` bash
analyzed/  fructose.dat    raw/   sucrose.dat
```

The `fructose.dat` and `sucrose.dat` files contain output from her data analysis. What command(s) covered in this lesson does she need to run so that the commands below will produce the output shown?

``` bash
$ ls -F
```

``` bash
analyzed/   raw/
```

``` bash
$ ls analyzed
```

``` bash
fructose.dat    sucrose.dat
```

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

```         
mv *.dat analyzed
```

Jamie needs to move her files `fructose.dat` and `sucrose.dat` to the `analyzed` directory. The shell will expand \*.dat to match all .dat files in the current directory. The `mv` command then moves the list of .dat files to the 'analyzed' directory.
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Reproduce a folder structure

You're starting a new experiment and would like to duplicate the directory structure from your previous experiment so you can add new data.

Assume that the previous experiment is in a folder called `2016-05-18`, which contains a `data` folder that in turn contains folders named `raw` and `processed` that contain data files. The goal is to copy the folder structure of the `2016-05-18` folder into a folder called `2016-05-20` so that your final directory structure looks like this:

``` bash
2016-05-20/
└── data
   ├── processed
   └── raw
```

Which of the following set of commands would achieve this objective? What would the other commands do?

``` bash
$ mkdir 2016-05-20
$ mkdir 2016-05-20/data
$ mkdir 2016-05-20/data/processed
$ mkdir 2016-05-20/data/raw
```

``` bash
$ mkdir 2016-05-20
$ cd 2016-05-20
$ mkdir data
$ cd data
$ mkdir raw processed
```

``` bash
$ mkdir 2016-05-20/data/raw
$ mkdir 2016-05-20/data/processed
```

``` bash
$ mkdir -p 2016-05-20/data/raw
$ mkdir -p 2016-05-20/data/processed
```

``` bash
$ mkdir 2016-05-20
$ cd 2016-05-20
$ mkdir data
$ mkdir raw processed
```

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
## Solution

The first two sets of commands achieve this objective. The first set uses relative paths to create the top-level directory before the subdirectories.

The third set of commands will give an error because the default behavior of `mkdir` won't create a subdirectory of a non-existent directory: the intermediate level folders must be created first.

The fourth set of commands achieve this objective. Remember, the `-p` option, followed by a path of one or more directories, will cause `mkdir` to create any intermediate subdirectories as required.

The final set of commands generates the 'raw' and 'processed' directories at the same level as the 'data' directory.
:::
::::

::: {.callout-note appearance="simple"}
## Key Points

-   `cp [old] [new]` copies a file.
-   `mkdir [path]` creates a new directory.
-   `mv [old] [new]` moves (renames) a file or directory.
-   `rm [path]` removes (deletes) a file.
-   `*` matches zero or more characters in a filename, so `*.txt` matches all files ending in `.txt`.
-   `?` matches any single character in a filename, so `?.txt` matches `a.txt` but not `any.txt`.
-   Use of the Control key may be described in many ways, including `Ctrl-X`, `Control-X`, and `^X`.
-   The shell does not have a trash bin: once something is deleted, it's really gone.
-   Most files' names are `something.extension`. The extension isn't required, and doesn't guarantee anything, but is normally used to indicate the type of data in the file.
-   Depending on the type of work you do, you may need a more powerful text editor than Nano.
:::

# Pipes and Filters

+----------------------------------------------------------------------+---------------------------------------------------------------------------------------------+
| ## Questions                                                         | ## Objectives                                                                               |
+----------------------------------------------------------------------+---------------------------------------------------------------------------------------------+
| -   How can I combine existing commands to produce a desired output? | -   Explain the advantage of linking commands with pipes and filters.                       |
| -   How can I show only part of the output?                          | -   Combine sequences of commands to get new output                                         |
|                                                                      | -   Redirect a command's output to a file.                                                  |
|                                                                      | -   Explain what usually happens if a program or pipeline isn't given any input to process. |
+----------------------------------------------------------------------+---------------------------------------------------------------------------------------------+

Now that we know a few basic commands, we can finally look at the shell's most powerful feature: the ease with which it lets us combine existing programs in new ways. We'll start with the directory `shell-lesson-data/exercise-data/alkanes` that contains six files describing some simple organic molecules. The `.pdb` extension indicates that these files are in Protein Data Bank format, a simple text format that specifies the type and position of each atom in the molecule.

``` bash
$ ls
```

``` bash
cubane.pdb    methane.pdb    pentane.pdb
ethane.pdb    octane.pdb     propane.pdb
```

Let's run an example command:

``` bash
$ wc cubane.pdb
```

``` bash
20  156 1158 cubane.pdb
```

`wc` is the 'word count' command: it counts the number of lines, words, and characters in files (returning the values in that order from left to right).

If we run the command `wc *.pdb`, the `*` in `*.pdb` matches zero or more characters, so the shell turns `*.pdb` into a list of all `.pdb` files in the current directory:

``` bash
$ wc *.pdb
```

``` bash
  20  156  1158  cubane.pdb
  12  84   622   ethane.pdb
   9  57   422   methane.pdb
  30  246  1828  octane.pdb
  21  165  1226  pentane.pdb
  15  111  825   propane.pdb
 107  819  6081  total
```

Note that `wc *.pdb` also shows the total number of all lines in the last line of the output.

If we run `wc -l` instead of just `wc`, the output shows only the number of lines per file:

``` bash
$ wc -l *.pdb
```

``` bash
  20  cubane.pdb
  12  ethane.pdb
   9  methane.pdb
  30  octane.pdb
  21  pentane.pdb
  15  propane.pdb
 107  total
```

The `-m` and `-w` options can also be used with the `wc` command to show only the number of characters or the number of words, respectively.

::: {.callout-note appearance="simple" icon="false"}
## Why isn't it doing anything?

What happens if a command is supposed to process a file, but we don't give it a filename? For example, what if we type:

``` bash
$ wc -l
```

but don't type `*.pdb` (or anything else) after the command? Since it doesn't have any filenames, `wc` assumes it is supposed to process input given at the command prompt, so it just sits there and waits for us to give it some data interactively. From the outside, though, all we see is it sitting there, and the command doesn't appear to do anything.

**If you make this kind of mistake, you can escape out of this state by holding down the control key (Ctrl) and pressing the letter C once:** {{< kbd Ctrl+C >}}**. Then release both keys.**
:::

## Capturing output from commands

### Output page by page with `less`

We'll continue to use `cat` in this lesson, for convenience and consistency, but it has the disadvantage that it always dumps the whole file onto your screen. More useful in practice is the command `less` (e.g. `less lengths.txt`). This displays a screenful of the file, and then stops. You can go forward one screenful by pressing the spacebar, or back one by pressing `b`. Press `q` to quit.

Which of these files contains the fewest lines? It's an easy question to answer when there are only six files, but what if there were 6000? Our first step toward a solution is to run the command:

``` bash
$ wc -l *.pdb > lengths.txt
```

The greater than symbol, `>`, tells the shell to **redirect** the command's output to a file instead of printing it to the screen. This command prints no screen output, because everything that `wc` would have printed has gone into the file `lengths.txt` instead. If the file doesn't exist prior to issuing the command, the shell will create the file. If the file exists already, it will be silently overwritten, which may lead to data loss. Thus, **redirect** commands require caution.

`ls lengths.txt` confirms that the file exists:

``` bash
$ ls lengths.txt
```

``` bash
lengths.txt
```

We can now send the content of `lengths.txt` to the screen using `cat lengths.txt`. The `cat` command gets its name from 'concatenate' i.e. join together, and it prints the contents of files one after another. There's only one file in this case, so `cat` just shows us what it contains:

``` bash
$ cat lengths.txt
```

``` bash
  20  cubane.pdb
  12  ethane.pdb
   9  methane.pdb
  30  octane.pdb
  21  pentane.pdb
  15  propane.pdb
 107  total
```

### Filtering output

Next we'll use the `sort` command to sort the contents of the `lengths.txt` file. But first we'll do an exercise to learn a little about the sort command:

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: What does `sort -n` do?

The file `shell-lesson-data/exercise-data/numbers.txt` contains the following lines:

``` bash
10
2
19
22
6
```

If we run `sort` on this file, the output is:

``` bash
10
19
2
22
6
```

If we run `sort -n` on the same file, we get this instead:

``` bash
2
6
10
19
22
```

Explain why `-n` has this effect.

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution

The `-n` option specifies a numerical rather than an alphanumerical sort.
:::
::::

We will also use the `-n` option to specify that the sort is numerical instead of alphanumerical. This does *not* change the file; instead, it sends the sorted result to the screen:

``` bash
$ sort -n lengths.txt
```

``` bash
  9  methane.pdb
 12  ethane.pdb
 15  propane.pdb
 20  cubane.pdb
 21  pentane.pdb
 30  octane.pdb
107  total
```

We can put the sorted list of lines in another temporary file called `sorted-lengths.txt` by putting `> sorted-lengths.txt` after the command, just as we used `> lengths.txt` to put the output of `wc` into `lengths.txt`. Once we've done that, we can run another command called `head` to get the first few lines in `sorted-lengths.txt`:

``` bash
$ sort -n lengths.txt > sorted-lengths.txt
$ head -n 1 sorted-lengths.txt
```

``` bash
  9  methane.pdb
```

Using `-n 1` with `head` tells it that we only want the first line of the file; `-n 20` would get the first 20, and so on. Since `sorted-lengths.txt` contains the lengths of our files ordered from least to greatest, the output of `head` must be the file with the fewest lines.

::: {.callout-important appearance="simple"}
### Redirecting to the same file

It's a very bad idea to try redirecting the output of a command that operates on a file to the same file. For example:

``` bash
$ sort -n lengths.txt > lengths.txt
```

Doing something like this may give you incorrect results and/or delete the contents of `lengths.txt`.
:::

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: What Does `>>` Mean?

We have seen the use of `>`, but there is a similar operator `>>` which works slightly differently. We'll learn about the differences between these two operators by printing some strings. We can use the `echo` command to print strings e.g.

``` bash
$ echo The echo command prints text
```

``` bash
The echo command prints text
```

Now test the commands below to reveal the difference between the two operators:

``` bash
$ echo hello > testfile01.txt
```

and:

``` bash
$ echo hello >> testfile02.txt
```

Hint: Try executing each command twice in a row and then examining the output files.

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution

In the first example with `>`, the string 'hello' is written to `testfile01.txt`, but the file gets overwritten each time we run the command.

We see from the second example that the `>>` operator also writes 'hello' to a file (in this case `testfile02.txt`), but appends the string to the file if it already exists (i.e. when we run it for the second time).
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: appending data

We have already met the `head` command, which prints lines from the start of a file. `tail` is similar, but prints lines from the end of a file instead.

Consider the file `shell-lesson-data/exercise-data/animal-counts/animals.csv`. After these commands, select the answer that corresponds to the file `animals-subset.csv`:

``` bash
$ head -n 3 animals.csv > animals-subset.csv
$ tail -n 2 animals.csv >> animals-subset.csv
```

1.  The first three lines of `animals.csv`
2.  The last two lines of `animals.csv`
3.  The first three lines and the last two lines of `animals.csv`
4.  The second and third lines of `animals.csv`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution

Option 3 is correct. For option 1 to be correct we would only run the `head` command. For option 2 to be correct we would only run the `tail` command. For option 4 to be correct we would have to pipe the output of `head` into `tail -n 2` by doing `head -n 3 animals.csv | tail -n 2 > animals-subset.csv`
:::
::::

## Passing output to another command

In our example of finding the file with the fewest lines, we are using two intermediate files `lengths.txt` and `sorted-lengths.txt` to store output. This is a confusing way to work because even once you understand what `wc`, `sort`, and `head` do, those intermediate files make it hard to follow what's going on. We can make it easier to understand by running `sort` and `head` together:

``` bash
$ sort -n lengths.txt | head -n 1
```

``` bash
  9  methane.pdb
```

The vertical bar, `|`, between the two commands is called a **pipe**. It tells the shell that we want to use the output of the command on the left as the input to the command on the right.

This has removed the need for the `sorted-lengths.txt` file.

## Combining multiple commands

Nothing prevents us from chaining pipes consecutively. We can for example send the output of `wc` directly to `sort`, and then send the resulting output to `head`. This removes the need for any intermediate files.

We'll start by using a pipe to send the output of `wc` to `sort`:

``` bash
$ wc -l *.pdb | sort -n
```

``` bash
   9 methane.pdb
  12 ethane.pdb
  15 propane.pdb
  20 cubane.pdb
  21 pentane.pdb
  30 octane.pdb
 107 total
```

We can then send that output through another pipe, to `head`, so that the full pipeline becomes:

``` bash
$ wc -l *.pdb | sort -n | head -n 1
```

``` bash
   9  methane.pdb
```

This is exactly like a mathematician nesting functions like *log(3x)* and saying 'the log of three times *x*'. In our case, the algorithm is 'head of sort of line count of `*.pdb`'.

The redirection and pipes used in the last few commands are illustrated below:

![](fig/redirect.png)

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: Piping commands together

In our current directory, we want to find the 3 files which have the least number of lines. Which command listed below would work?

1.  `wc -l * > sort -n > head -n 3`
2.  `wc -l * | sort -n | head -n 1-3`
3.  `wc -l * | head -n 3 | sort -n`
4.  `wc -l * | sort -n | head -n 3`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
#### Solution

Option 4 is the solution. The pipe character `|` is used to connect the output from one command to the input of another. `>` is used to redirect standard output to a file. Try it in the `shell-lesson-data/exercise-data/alkanes` directory!
:::
::::

## Tools designed to work together

This idea of linking programs together is why Unix has been so successful. Instead of creating enormous programs that try to do many different things, Unix programmers focus on creating lots of simple tools that each do one job well, and that work well with each other. This programming model is called 'pipes and filters'. We've already seen pipes; a **filter** is a program like `wc` or `sort` that transforms a stream of input into a stream of output. Almost all of the standard Unix tools can work this way. Unless told to do otherwise, they read from standard input, do something with what they've read, and write to standard output.

The key is that any program that reads lines of text from standard input and writes lines of text to standard output can be combined with every other program that behaves this way as well. You can *and should* write your programs this way so that you and other people can put those programs into pipes to multiply their power.

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Pipe Reading Comprehension

A file called `animals.csv` (in the `shell-lesson-data/exercise-data/animal-counts` folder) contains the following data:

``` bash
2012-11-05,deer,5
2012-11-05,rabbit,22
2012-11-05,raccoon,7
2012-11-06,rabbit,19
2012-11-06,deer,2
2012-11-06,fox,4
2012-11-07,rabbit,16
2012-11-07,bear,1
```

What text passes through each of the pipes and the final redirect in the pipeline below? Note, the `sort -r` command sorts in reverse order.

``` bash
$ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt
```

Hint: build the pipeline up one command at a time to test your understanding

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

The `head` command extracts the first 5 lines from `animals.csv`. Then, the last 3 lines are extracted from the previous 5 by using the `tail` command. With the `sort -r` command those 3 lines are sorted in reverse order. Finally, the output is redirected to a file: `final.txt`. The content of this file can be checked by executing `cat final.txt`. The file should contain the following lines:

``` bash
2012-11-06,rabbit,19
2012-11-06,deer,2
2012-11-05,raccoon,7
```
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Pipe Construction

For the file `animals.csv` from the previous exercise, consider the following command:

``` bash
$ cut -d , -f 2 animals.csv
```

The `cut` command is used to remove or 'cut out' certain sections of each line in the file, and `cut` expects the lines to be separated into columns by a Tab character. A character used in this way is called a **delimiter**. In the example above we use the `-d` option to specify the comma as our delimiter character. We have also used the `-f` option to specify that we want to extract the second field (column). This gives the following output:

``` bash
deer
rabbit
raccoon
rabbit
deer
fox
rabbit
bear
```

The `uniq` command filters out adjacent matching lines in a file. How could you extend this pipeline (using `uniq` and another command) to find out what animals the file contains (without any duplicates in their names)?

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

``` bash
$ cut -d , -f 2 animals.csv | sort | uniq
```
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Which Pipe?

The file `animals.csv` contains 8 lines of data formatted as follows:

``` bash
2012-11-05,deer,5
2012-11-05,rabbit,22
2012-11-05,raccoon,7
2012-11-06,rabbit,19
...
```

The `uniq` command has a `-c` option which gives a count of the number of times a line occurs in its input. Assuming your current directory is `shell-lesson-data/exercise-data/animal-counts`, what command would you use to produce a table that shows the total count of each type of animal in the file?

1.  `sort animals.csv | uniq -c`
2.  `sort -t, -k2,2 animals.csv | uniq -c`
3.  `cut -d, -f 2 animals.csv | uniq -c`
4.  `cut -d, -f 2 animals.csv | sort | uniq -c`
5.  `cut -d, -f 2 animals.csv | sort | uniq -c | wc -l`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

Option 4. is the correct answer. If you have difficulty understanding why, try running the commands, or sub-sections of the pipelines (make sure you are in the `shell-lesson-data/exercise-data/animal-counts` directory).
:::
::::

## Your Pipeline: Checking Files

You have run your samples through the assay machines and created 17 files in the `north-pacific-gyre` directory described earlier. As a quick check, starting from the `shell-lesson-data` directory, you type:

``` bash
$ cd north-pacific-gyre
$ wc -l *.txt
```

The output is 18 lines that look like this:

``` bash
300 NENE01729A.txt
300 NENE01729B.txt
300 NENE01736A.txt
300 NENE01751A.txt
300 NENE01751B.txt
300 NENE01812A.txt
... ...
```

Now you type this:

``` bash
$ wc -l *.txt | sort -n | head -n 5
```

``` bash
 240 NENE02018B.txt
 300 NENE01729A.txt
 300 NENE01729B.txt
 300 NENE01736A.txt
 300 NENE01751A.txt
```

Whoops: one of the files is 60 lines shorter than the others. When you go back and check it, you see that you did that assay at 8:00 on a Monday morning --- someone was probably in using the machine on the weekend, and you forgot to reset it. Before re-running that sample, you check to see if any files have too much data:

``` bash
$ wc -l *.txt | sort -n | tail -n 5
```

``` bash
 300 NENE02040B.txt
 300 NENE02040Z.txt
 300 NENE02043A.txt
 300 NENE02043B.txt
5040 total
```

Those numbers look good --- but what's that 'Z' doing there in the third-to-last line? All of your samples should be marked 'A' or 'B'; by convention, your lab uses 'Z' to indicate samples with missing information. To find others like it, you do this:

``` bash
$ ls *Z.txt
```

``` bash
NENE01971Z.txt    NENE02040Z.txt
```

Sure enough, when you check the log on your laptop, there's no depth recorded for either of those samples. Since it's too late to get the information any other way, you must exclude those two files from your analysis. You could delete them using `rm`, but there are actually some analyses you might do later where depth doesn't matter, so instead, you'll have to be careful later on to select files using the wildcard expressions `NENE*A.txt NENE*B.txt`.

::: {.callout-note appearance="simple"}
# Key Points

-   `wc` counts lines, words, and characters in its inputs.
-   `cat` displays the contents of its inputs.
-   `sort` sorts its inputs.
-   `head` displays the first 10 lines of its input by default without additional arguments.
-   `tail` displays the last 10 lines of its input by default without additional arguments.
-   `command > [file]` redirects a command's output to a file (overwriting any existing content).
-   `command >> [file]` appends a command's output to a file.
-   `[first] | [second]` is a pipeline: the output of the first command is used as the input to the second.
-   The best way to use the shell is to use pipes to combine simple single-purpose programs (filters).'ll have to be careful later on to select files using the wildcard expressions `NENE*A.txt NENE*B.txt`.
:::

# Repeating commands using loops

**Loops** are a programming construct which allow us to repeat a command or set of commands for each item in a list. As such they are key to productivity improvements through automation. Similar to wildcards and tab completion, using loops also reduces the amount of typing required (and hence reduces the number of typing mistakes).

Suppose we have several hundred genome data files named `basilisk.dat`, `minotaur.dat`, and `unicorn.dat`. For this example, we’ll use the `exercise-data/creatures` directory which only has three example files, but the principles can be applied to many many more files at once.

The structure of these files is the same: the common name, classification, and updated date are presented on the first three lines, with DNA sequences on the following lines. Let’s look at the files:

``` bash
$ head -n 5 basilisk.dat minotaur.dat unicorn.dat
```

We would like to print out the classification for each species, which is given on the second line of each file. For each file, we would need to execute the command `head -n 2` and pipe this to `tail -n 1`. We’ll use a loop to solve this problem, but first let’s look at the general form of a loop, using the pseudo-code below:

``` bash
# The word "for" indicates the start of a "For-loop" command
for thing in list_of_things 
#The word "do" indicates the start of job execution list
do 
    # Indentation within the loop is not required, but aids legibility
    operation_using/command $thing 
# The word "done" indicates the end of a loop
done  
```

and we can apply this to our example like this:

``` bash
$ for filename in basilisk.dat minotaur.dat unicorn.dat
> do
>     echo $filename
>     head -n 2 $filename | tail -n 1
> done
```

```         
basilisk.dat
CLASSIFICATION: basiliscus vulgaris
minotaur.dat
CLASSIFICATION: bos hominus
unicorn.dat
CLASSIFICATION: equus monoceros
```

::: callout-tip
### Follow the prompt

The shell prompt changes from `$` to `>` and back again as we were typing in our loop. The second prompt, `>`, is different to remind us that we haven’t finished typing a complete command yet. A semicolon, `;`, can be used to separate two commands written on a single line.
:::

When the shell sees the keyword `for`, it knows to repeat a command (or group of commands) once for each item in a list. Each time the loop runs (called an iteration), an item in the list is assigned in sequence to the **variable**, and the commands inside the loop are executed, before moving on to the next item in the list. Inside the loop, we call for the variable’s value by putting `$` in front of it. The `$` tells the shell interpreter to treat the variable as a variable name and substitute its value in its place, rather than treat it as text or an external command.

In this example, the list is three filenames: `basilisk.dat`, `minotaur.dat`, and `unicorn.dat`. Each time the loop iterates, we first use `echo` to print the value that the variable `$filename` currently holds. This is not necessary for the result, but beneficial for us here to have an easier time to follow along. Next, we will run the `head` command on the file currently referred to by `$filename`. The first time through the loop, `$filename` is `basilisk.dat`. The interpreter runs the command `head` on `basilisk.dat` and pipes the first two lines to the `tail` command, which then prints the second line of `basilisk.dat`. For the second iteration, `$filename` becomes `minotaur.dat`. This time, the shell runs `head` on `minotaur.dat` and pipes the first two lines to the `tail` command, which then prints the second line of `minotaur.dat`. For the third iteration, `$filename` becomes `unicorn.dat`, so the shell runs the `head` command on that file, and `tail` on the output of that. Since the list was only three items, the shell exits the `for` loop.

::: callout-tip
### Same symbols, different meanings

Here we see `>` being used as a shell prompt, whereas `>` is also used to redirect output. Similarly, `$` is used as a shell prompt, but, as we saw earlier, it is also used to ask the shell to get the value of a variable.

If the *shell* prints `>` or `$` then it expects you to type something, and the symbol is a prompt.

If *you* type `>` or `$` yourself, it is an instruction from you that the shell should redirect output or get the value of a variable.
:::

When using variables it is also possible to put the names into curly braces to clearly delimit the variable name: `$filename` is equivalent to `${filename}`, but is different from `${file}name`. You may find this notation in other people’s programs.

We have called the variable in this loop `filename` in order to make its purpose clearer to human readers. The shell itself doesn’t care what the variable is called; if we wrote this loop as:

``` bash
$ for x in basilisk.dat minotaur.dat unicorn.dat
> do
>     head -n 2 $x | tail -n 1
> done
```

or:

``` bash
$ for temperature in basilisk.dat minotaur.dat unicorn.dat
> do
>     head -n 2 $temperature | tail -n 1
> done
```

it would work exactly the same way. *Don’t do this.* Programs are only useful if people can understand them, so meaningless names (like `x`) or misleading names (like `temperature`) increase the odds that the program won’t do what its readers think it does.

In the above examples, the variables (`thing`, `filename`, `x` and `temperature`) could have been given any other name, as long as it is meaningful to both the person writing the code and the person reading it.

Note also that loops can be used for other things than filenames, like a list of numbers or a subset of data.

:::: {.callout-caution appearance="simple" icon="false"}
### Challenge: Write your own loop

How would you write a loop that echoes all 10 numbers from 0 to 9?

::: {.callout-caution collapse="true" appearance="simple"}
### Solution

``` bash
$ for loop_variable in 0 1 2 3 4 5 6 7 8 9
> do
>     echo $loop_variable
> done
```

output:

```         
0
1
2
3
4
5
6
7
8
9
```
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Variables in loops

This exercise refers to the `shell-lesson-data/exercise-data/alkanes` directory. `ls *.pdb` gives the following output:

```         
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
```

What is the output of the following code?

``` bash
$ for datafile in *.pdb
> do
>     ls *.pdb
> done
```

Now, what is the output of the following code?

``` bash
$ for datafile in *.pdb
> do
>     ls $datafile
> done
```

Why do these two loops give different outputs?

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

The first code block gives the same output on each iteration through the loop. Bash expands the wildcard `*.pdb` within the loop body (as well as before the loop starts) to match all files ending in `.pdb` and then lists them using `ls`. The expanded loop would look like this:

``` bash
$ for datafile in cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
> do
>     ls cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
> done
```

```         
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb
```

The second code block lists a different file on each loop iteration. The value of the `datafile` variable is evaluated using `$datafile`, and then listed using `ls`.

``` bash
cubane.pdb
ethane.pdb
methane.pdb
octane.pdb
pentane.pdb
propane.pdb
```
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Limiting sets of files

What would be the output of running the following loop in the `shell-lesson-data/exercise-data/alkanes` directory?

``` bash
$ for filename in c*
> do
>     ls $filename
> done
```

1.  No files are listed.

2.  All files are listed.

3.  Only `cubane.pdb`, `octane.pdb` and `pentane.pdb` are listed.

4.  Only `cubane.pdb` is listed.

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

4 is the correct answer. `*` matches zero or more characters, so any file name starting with the letter c, followed by zero or more other characters will be matched.
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Limiting sets of files (continued)

How would the output differ from using this command instead?

``` bash
$ for filename in *c*
> do
>     ls $filename
> done
```

1.  The same files would be listed.

2.  All the files are listed this time.

3.  No files are listed this time.

4.  The files `cubane.pdb` and `octane.pdb` will be listed.

5.  Only the file `octane.pdb` will be listed.

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

4 is the correct answer. `*` matches zero or more characters, so a file name with zero or more characters before a letter c and zero or more characters after the letter c will be matched.
:::
::::

::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Saving to a file in a loop - part one

In the `shell-lesson-data/exercise-data/alkanes` directory, what is the effect of this loop?

``` bash
for alkanes in *.pdb
do
    echo $alkanes
    cat $alkanes > alkanes.pdb
done
```

1.  Prints `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, `pentane.pdb` and `propane.pdb`, and the text from `propane.pdb` will be saved to a file called `alkanes.pdb`.

2.  Prints `cubane.pdb`, `ethane.pdb`, and `methane.pdb`, and the text from all three files would be concatenated and saved to a file called `alkanes.pdb`.

3.  Prints `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, and `pentane.pdb`, and the text from `propane.pdb` will be saved to a file called `alkanes.pdb`.

4.  None of the above.

    ::: {.callout-caution collapse="true" appearance="simple" icon="false"}
    ### Solution

    1.  The text from each file in turn gets written to the `alkanes.pdb` file. However, the file gets overwritten on each loop iteration, so the final content of `alkanes.pdb` is the text from the `propane.pdb` file.
    :::
:::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Saving to a file in a loop - part two

Also in the `shell-lesson-data/exercise-data/alkanes` directory, what would be the output of the following loop?

``` bash
for datafile in *.pdb
do
    cat $datafile >> all.pdb
done
```

1.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, and `pentane.pdb` would be concatenated and saved to a file called `all.pdb`.

2.  The text from `ethane.pdb` will be saved to a file called `all.pdb`.

3.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, `pentane.pdb` and `propane.pdb` would be concatenated and saved to a file called `all.pdb`.

4.  All of the text from `cubane.pdb`, `ethane.pdb`, `methane.pdb`, `octane.pdb`, `pentane.pdb` and `propane.pdb` would be printed to the screen and saved to a file called `all.pdb`.

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

3 is the correct answer. `>>` appends to a file, rather than overwriting it with the redirected output from a command. Given the output from the `cat` command has been redirected, nothing is printed to the screen.
:::
::::

Let’s continue with our example in the `shell-lesson-data/exercise-data/creatures` directory. Here’s a slightly more complicated loop:

``` bash
$ for filename in *.dat
> do
>     echo $filename
>     head -n 100 $filename | tail -n 20
> done
```

The shell starts by expanding `*.dat` to create the list of files it will process. The **loop body** then executes two commands for each of those files. The first command, `echo`, prints its command-line arguments to standard output. For example:

``` bash
$ echo hello there
```

prints:

```         
hello there
```

In this case, since the shell expands `$filename` to be the name of a file, `echo $filename` prints the name of the file. Note that we can’t write this as:

``` bash
$ for filename in *.dat
> do
>     $filename
>     head -n 100 $filename | tail -n 20
> done
```

because then the first time through the loop, when `$filename` expanded to `basilisk.dat`, the shell would try to run `basilisk.dat` as a program. Finally, the `head` and `tail` combination selects lines 81-100 from whatever file is being processed (assuming the file has at least 100 lines).

::: {.callout-note appearance="simple" icon="false"}
## Spaces in names

Spaces are used to separate the elements of the list that we are going to loop over. If one of those elements contains a space character, we need to surround it with quotes, and do the same thing to our loop variable. Suppose our data files are named:

```         
red dragon.dat
purple unicorn.dat
```

To loop over these files, we would need to add double quotes like so:

``` bash
$ for filename in "red dragon.dat" "purple unicorn.dat"
> do
>     head -n 100 "$filename" | tail -n 20
> done
```

It is simpler to avoid using spaces (or other special characters) in filenames.

The files above don’t exist, so if we run the above code, the `head` command will be unable to find them; however, the error message returned will show the name of the files it is expecting:

```         
head: cannot open ‘red dragon.dat' for reading: No such file or directory
head: cannot open ‘purple unicorn.dat' for reading: No such file or directory
```

Try removing the quotes around `$filename` in the loop above to see the effect of the quote marks on spaces. Note that we get a result from the loop command for unicorn.dat when we run this code in the `creatures` directory:

```         
head: cannot open ‘red' for reading: No such file or directory
head: cannot open ‘dragon.dat' for reading: No such file or directory
head: cannot open ‘purple' for reading: No such file or directory
CGGTACCGAA
AAGGGTCGCG
CAAGTGTTCC
...
```
:::

We would like to modify each of the files in `shell-lesson-data/exercise-data/creatures`, but also save a version of the original files. We want to copy the original files to new files named `original-basilisk.dat` and `original-unicorn.dat`, for example. We can’t use:

``` bash
$ cp *.dat original-*.dat
```

because that would expand to:

``` bash
$ cp basilisk.dat minotaur.dat unicorn.dat original-*.dat
```

This wouldn’t back up our files, instead we get an error:

```         
cp: target `original-*.dat' is not a directory
```

This problem arises when `cp` receives more than two inputs. When this happens, it expects the last input to be a directory where it can copy all the files it was passed. Since there is no directory named `original-*.dat` in the `creatures` directory, we get an error.

Instead, we can use a loop:

``` bash
$ for filename in *.dat
> do
>     cp $filename original-$filename
> done
```

This loop runs the `cp` command once for each filename. The first time, when `$filename` expands to `basilisk.dat`, the shell executes:

``` bash
cp basilisk.dat original-basilisk.dat
```

The second time, the command is:

``` bash
cp minotaur.dat original-minotaur.dat
```

The third and last time, the command is:

``` bash
cp unicorn.dat original-unicorn.dat
```

Since the `cp` command does not normally produce any output, it’s hard to check that the loop is working correctly. However, we learned earlier how to print strings using `echo`, and we can modify the loop to use `echo` to print our commands without actually executing them. As such we can check what commands *would be* run in the unmodified loop.

The following diagram shows what happens when the modified loop is executed and demonstrates how the judicious use of `echo` is a good debugging technique.

![](fig/shell_script_for_loop_flow_chart.svg)

## Your pipeline: Processing files

You are now ready to process your data files using `goostats.sh` — a shell script written by your supervisor. This calculates some statistics from a protein sample file and takes two arguments:

1.  an input file (containing the raw data)

2.  an output file (to store the calculated statistics)

Since you are still learning how to use the shell, you decides to build up the required commands in stages. Your first step is to make sure that you can select the right input files — remember, these are ones whose names end in ‘A’ or ‘B’, rather than ‘Z’. Moving to the `north-pacific-gyre` directory, you type:

``` bash
$ cd
$ cd Desktop/shell-lesson-data/north-pacific-gyre
$ for datafile in NENE*A.txt NENE*B.txt
> do
>     echo $datafile
> done
```

```         
NENE01729A.txt
NENE01736A.txt
NENE01751A.txt

...
NENE02040B.txt
NENE02043B.txt
```

Your next step is to decide what to call the files that the `goostats.sh` analysis program will create. Prefixing each input file’s name with ‘stats’ seems simple, so you modify your loop to do that:

``` bash
$ for datafile in NENE*A.txt NENE*B.txt
> do
>     echo $datafile stats-$datafile
> done
```

```         
NENE01729A.txt stats-NENE01729A.txt
NENE01736A.txt stats-NENE01729A.txt
NENE01751A.txt stats-NENE01729A.txt
...
NENE02040B.txt stats-NENE02040B.txt
NENE02043B.txt stats-NENE02043B.txt
```

You haven't actually run `goostats.sh` yet, but now you're sure you can select the right files and generate the right output filenames.

Typing in commands over and over again is becoming tedious, though, and you are worried about making mistakes, so instead of re-entering your loop, you press ↑. In response, the shell re-displays the whole loop on one line (using semi-colons to separate the pieces):

``` bash
$ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done
```

Using the ←, you navigate to the `echo` command and change it to `bash goostats.sh`:

``` bash
$ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done
```

When you press Enter, the shell runs the modified command. However, nothing appears to happen — there is no output. After a moment, you realize that since your script doesn’t print anything to the screen any longer, you has no idea whether it is running, much less how quickly. You kill the running command by typing Ctrl+C, uses ↑ to repeat the command, and edit it to read:

``` bash
$ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile;
bash goostats.sh $datafile stats-$datafile; done
```

::: {.callout-tip appearance="simple"}
## Beginning and end

We can move to the beginning of a line in the shell by typing Ctrl+A and to the end using Ctrl+E.
:::

When you run your program now, it produces one line of output every five seconds or so:

```         
NENE01729A.txt
NENE01736A.txt
NENE01751A.txt
...
```

1518 times 5 seconds, divided by 60, tells her that her script will take about two hours to run. As a final check, you open another terminal window, go into `north-pacific-gyre`, and uses `cat stats-NENE01729B.txt` to examine one of the output files. It looks good, so you decides to get some coffee and catch up on your reading.

::: {.callout-tip appearance="simple"}
## Those who know history can choose to repeat it

Another way to repeat previous work is to use the `history` command to get a list of the last few hundred commands that have been executed, and then to use `!123` (where ‘123’ is replaced by the command number) to repeat one of those commands. For example, if you types this:

```         
$ history | tail -n 5
```

```         
456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done
457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done
458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done
459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile
stats-$datafile; done
460  history | tail -n 5
```

then you can re-run `goostats.sh` on the files simply by typing `!459`.
:::

::: {.callout-tip appearance="simple"}
## More history commands

There are a number of other shortcut commands for getting at the history.

-   Ctrl+R enters a history search mode ‘reverse-i-search’ and finds the most recent command in your history that matches the text you enter next. Press Ctrl+R one or more additional times to search for earlier matches. You can then use the left and right arrow keys to choose that line and edit it then hit Return to run the command.

-   `!!` retrieves the immediately preceding command (you may or may not find this more convenient than using ↑)

-   `!$` retrieves the last word of the last command. That’s useful more often than you might expect: after `bash goostats.sh NENE01729B.txt stats-NENE01729B.txt`, you can type `less !$` to look at the file `stats-NENE01729B.txt`, which is quicker than doing ↑ and editing the command-line.
:::

::: {.callout-note appearance="simple"}
# Key Points

-   A `for` loop repeats commands once for every thing in a list.

-   Every `for` loop needs a variable to refer to the thing it is currently operating on.

-   Use `$name` to expand a variable (i.e., get its value). `${name}` can also be used.

-   Do not use spaces, quotes, or wildcard characters such as ‘\*’ or ‘?’ in filenames, as it complicates variable expansion.

-   Give files consistent names that are easy to match with wildcard patterns to make it easy to select them for looping.

-   Use the up-arrow key to scroll up through previous commands to edit and repeat them.

-   Use Ctrl+R to search through the previously entered commands.

-   Use `history` to display recent commands, and `![number]` to repeat a command by number.
:::

# Shell Scripts

We are finally ready to see what makes the shell such a powerful programming environment. We are going to take the commands we repeat frequently and save them in files so that we can re-run all those operations again later by typing a single command. For historical reasons, a bunch of commands saved in a file is usually called a **shell script**, but make no mistake — these are actually small programs.

Not only will writing shell scripts make your work faster, but also you won’t have to retype the same commands over and over again. It will also make it more accurate (fewer chances for typos) and more reproducible. If you come back to your work later (or if someone else finds your work and wants to build on it), you will be able to reproduce the same results simply by running your script, rather than having to remember or retype a long list of commands.

Let’s start by going back to `alkanes/` and creating a new file, `middle.sh` which will become our shell script:

``` bash
$ cd alkanes
$ nano middle.sh
```

The command `nano middle.sh` opens the file `middle.sh` within the text editor ‘nano’ (which runs within the shell). If the file does not exist, it will be created. We can use the text editor to directly edit the file by inserting the following line:

```         
head -n 15 octane.pdb | tail -n 5
```

This is a variation on the pipe we constructed earlier, which selects lines 11-15 of the file `octane.pdb`. Remember, we are *not* running it as a command just yet; we are only incorporating the commands in a file.

Then we save the file (`Ctrl-O` in nano) and exit the text editor (`Ctrl-X` in nano). Check that the directory `alkanes` now contains a file called `middle.sh`.

Once we have saved the file, we can ask the shell to execute the commands it contains. Our shell is called `bash`, so we run the following command:

``` bash
$ bash middle.sh
```

```         
ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00
ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00
ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00
ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00
ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00
```

Sure enough, our script’s output is exactly what we would get if we ran that pipeline directly.

What if we want to select lines from an arbitrary file? We could edit `middle.sh` each time to change the filename, but that would probably take longer than typing the command out again in the shell and executing it with a new file name. Instead, let’s edit `middle.sh` and make it more versatile:

``` bash
$ nano middle.sh
```

Now, within “nano”, replace the text `octane.pdb` with the special variable called `$1`:

```         
head -n 15 "$1" | tail -n 5
```

Inside a shell script, `$1` means ‘the first filename (or other argument) on the command line’. We can now run our script like this:

``` bash
$ bash middle.sh octane.pdb
```

```         
ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00
ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00
ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00
ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00
ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00
```

or on a different file like this:

``` bash
$ bash middle.sh pentane.pdb
```

```         
ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00
ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00
ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00
ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00
ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00
```

::: {.callout-note appearance="simple"}
## Double-quotes around arguments

For the same reason that we put the loop variable inside double-quotes, in case the filename happens to contain any spaces, we surround `$1` with double-quotes.
:::

Currently, we need to edit `middle.sh` each time we want to adjust the range of lines that is returned. Let’s fix that by configuring our script to instead use three command-line arguments. After the first command-line argument (`$1`), each additional argument that we provide will be accessible via the special variables `$1`, `$2`, `$3`, which refer to the first, second, third command-line arguments, respectively.

Knowing this, we can use additional arguments to define the range of lines to be passed to `head` and `tail` respectively:

``` bash
$ nano middle.sh
```

```         
head -n "$2" "$1" | tail -n "$3"
```

We can now run:

``` bash
$ bash middle.sh pentane.pdb 15 5
```

```         
ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00
ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00
ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00
ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00
ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00
```

By changing the arguments to our command, we can change our script’s behaviour:

``` bash
$ bash middle.sh pentane.pdb 20 5
```

```         
ATOM     14  H           1      -1.259   1.420   0.112  1.00  0.00
ATOM     15  H           1      -2.608  -0.407   1.130  1.00  0.00
ATOM     16  H           1      -2.540  -1.303  -0.404  1.00  0.00
ATOM     17  H           1      -3.393   0.254  -0.321  1.00  0.00
TER      18              1
```

This works, but it may take the next person who reads `middle.sh` a moment to figure out what it does. We can improve our script by adding some **comments** at the top:

``` bash
$ nano middle.sh
```

```         
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```

A comment starts with a `#` character and runs to the end of the line. The computer ignores comments, but they’re invaluable for helping people (including your future self) understand and use scripts. The only caveat is that each time you modify the script, you should check that the comment is still accurate. An explanation that sends the reader in the wrong direction is worse than none at all.

What if we want to process many files in a single pipeline? For example, if we want to sort our `.pdb` files by length, we would type:

``` bash
$ wc -l *.pdb | sort -n
```

because `wc -l` lists the number of lines in the files (recall that `wc` stands for ‘word count’, adding the `-l` option means ‘count lines’ instead) and `sort -n` sorts things numerically. We could put this in a file, but then it would only ever sort a list of `.pdb` files in the current directory. If we want to be able to get a sorted list of other kinds of files, we need a way to get all those names into the script. We can’t use `$1`, `$2`, and so on because we don’t know how many files there are. Instead, we use the special variable `$@`, which means, ‘All of the command-line arguments to the shell script’. We also should put `$@` inside double-quotes to handle the case of arguments containing spaces (`"$@"` is special syntax and is equivalent to `"$1"` `"$2"` …).

Here’s an example:

``` bash
$ nano sorted.sh
```

```         
# Sort files by their length.
# Usage: bash sorted.sh one_or_more_filenames
wc -l "$@" | sort -n
```

``` bash
$ bash sorted.sh *.pdb ../creatures/*.dat
```

```         
9 methane.pdb
12 ethane.pdb
15 propane.pdb
20 cubane.pdb
21 pentane.pdb
30 octane.pdb
163 ../creatures/basilisk.dat
163 ../creatures/minotaur.dat
163 ../creatures/unicorn.dat
596 total
```

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: List unique species

Leah has several hundred data files, each of which is formatted like this:

```         
2013-11-05,deer,5
2013-11-05,rabbit,22
2013-11-05,raccoon,7
2013-11-06,rabbit,19
2013-11-06,deer,2
2013-11-06,fox,1
2013-11-07,rabbit,18
2013-11-07,bear,1
```

An example of this type of file is given in `shell-lesson-data/exercise-data/animal-counts/animals.csv`.

We can use the command `cut -d , -f 2 animals.csv | sort | uniq` to produce the unique species in `animals.csv`. In order to avoid having to type out this series of commands every time, a scientist may choose to write a shell script instead.

Write a shell script called `species.sh` that takes any number of filenames as command-line arguments and uses a variation of the above command to print a list of the unique species appearing in each of those files separately.

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

``` bash
# Script to find unique species in csv files where species is the second data field
# This script accepts any number of file names as command line arguments

# Loop over all files
for file in $@
do
    echo "Unique species in $file:"
    # Extract species names
    cut -d , -f 2 $file | sort | uniq
done
```
:::
::::

Suppose we have just run a series of commands that did something useful — for example, creating a graph we’d like to use in a paper. We’d like to be able to re-create the graph later if we need to, so we want to save the commands in a file. Instead of typing them in again (and potentially getting them wrong) we can do this:

``` bash
$ history | tail -n 5 > redo-figure-3.sh
```

The file `redo-figure-3.sh` now contains:

```         
297 bash goostats.sh NENE01729B.txt stats-NENE01729B.txt
298 bash goodiff.sh stats-NENE01729B.txt /data/validated/01729.txt > 01729-differences.txt
299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt
300 ygraph --format scatter --color bw --borders none 01729-time-series.txt figure-3.png
301 history | tail -n 5 > redo-figure-3.sh
```

After a moment’s work in an editor to remove the serial numbers on the commands, and to remove the final line where we called the `history` command, we have a completely accurate record of how we created that figure.

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Why record commands in the history before running them?

If you run the command:

``` bash
$ history | tail -n 5 > recent.sh
```

the last command in the file is the `history` command itself, i.e., the shell has added `history` to the command log before actually running it. In fact, the shell *always* adds commands to the log before running them. Why do you think it does this?

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

If a command causes something to crash or hang, it might be useful to know what that command was, in order to investigate the problem. Were the command only be recorded after running it, we would not have a record of the last command run in the event of a crash.
:::
::::

In practice, most people develop shell scripts by running commands at the shell prompt a few times to make sure they’re doing the right thing, then saving them in a file for re-use. This style of work allows people to recycle what they discover about their data and their workflow with one call to `history` and a bit of editing to clean up the output and save it as a shell script.

## Your pipeline: Creating a script

Your supervisor insisted that all your analytics must be reproducible. The easiest way to capture all the steps is in a script.

First we return to your project directory:

``` bash
$ cd ../../north-pacific-gyre/
```

You create a file using `nano` …

``` bash
$ nano do-stats.sh
```

…which contains the following:

```         
# Calculate stats for data files.
for datafile in "$@"
do
    echo $datafile
    bash goostats.sh $datafile stats-$datafile
done
```

You save this in a file called `do-stats.sh` so that you can now re-do the first stage of your analysis by typing:

``` bash
$ bash do-stats.sh NENE*A.txt NENE*B.txt
```

You can also do this:

``` bash
$ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l
```

so that the output is just the number of files processed rather than the names of the files that were processed.

One thing to note about your script is that it lets the person running it decide what files to process. You could have written it as:

``` bash
# Calculate stats for Site A and Site B data files.
for datafile in NENE*A.txt NENE*B.txt
do
    echo $datafile
    bash goostats.sh $datafile stats-$datafile
done
```

The advantage is that this always selects the right files: you doesn’t have to remember to exclude the ‘Z’ files. The disadvantage is that it *always* selects just those files — you can’t run it on all files (including the ‘Z’ files), or on the ‘G’ or ‘H’ files your colleagues in Antarctica are producing, without editing the script. If you wanted to be more adventurous, you could modify your script to check for command-line arguments, and use `NENE*A.txt NENE*B.txt` if none were provided. Of course, this introduces another tradeoff between flexibility and complexity.

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Variables in shell scripts

In the `alkanes` directory, imagine you have a shell script called `script.sh` containing the following commands:

``` bash
head -n $2 $1
tail -n $3 $1
```

While you are in the `alkanes` directory, you type the following command:

```         
$ bash script.sh '*.pdb' 1 1
```

Which of the following outputs would you expect to see?

1.  All of the lines between the first and the last lines of each file ending in `.pdb` in the `alkanes` directory

2.  The first and the last line of each file ending in `.pdb` in the `alkanes` directory

3.  The first and the last line of each file in the `alkanes` directory

4.  An error because of the quotes around `*.pdb`

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

The correct answer is 2.

The special variables `$1`, `$2` and `$3` represent the command line arguments given to the script, such that the commands run are:

```         
$ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb
$ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb
```

The shell does not expand `'*.pdb'` because it is enclosed by quote marks. As such, the first argument to the script is `'*.pdb'` which gets expanded within the script by `head` and `tail`
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Find the longest file with a given extension

Write a shell script called `longest.sh` that takes the name of a directory and a filename extension as its arguments, and prints out the name of the file with the most lines in that directory with that extension. For example:

``` bash
$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb
```

would print the name of the `.pdb` file in `shell-lesson-data/exercise-data/alkanes` that has the most lines.

Feel free to test your script on another directory e.g.

``` bash
$ bash longest.sh shell-lesson-data/exercise-data/writing txt
```

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

``` bash
# Shell script which takes two arguments:
#    1. a directory name
#    2. a file extension
# and prints the name of the file in that directory
# with the most lines which matches the file extension.

wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1
```

The first part of the pipeline, `wc -l $1/*.$2 | sort -n`, counts the lines in each file and sorts them numerically (largest last). When there’s more than one file, `wc` also outputs a final summary line, giving the total number of lines across *all* files. We use `tail -n 2 | head -n 1` to throw away this last line.

With `wc -l $1/*.$2 | sort -n | tail -n 1` we’ll see the final summary line: we can build our pipeline up in pieces to be sure we understand the output.
:::
::::

:::: {.callout-caution appearance="simple" icon="false"}
## Challenge: Script reading comprehension

For this question, consider the `shell-lesson-data/exercise-data/alkanes` directory once again. This contains a number of `.pdb` files in addition to any other files you may have created. Explain what each of the following three scripts would do when run as `bash script1.sh *.pdb`, `bash script2.sh *.pdb`, and `bash script3.sh *.pdb` respectively.

``` bash
# Script 1
echo *.*
```

``` bash
# Script 2
for filename in $1 $2 $3
do
    cat $filename
done
```

``` bash
# Script 3
echo $@.pdb
```

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
### Solution

In each case, the shell expands the wildcard in `*.pdb` before passing the resulting list of file names as arguments to the script.

Script 1 would print out a list of all files containing a dot in their name. The arguments passed to the script are not actually used anywhere in the script.

Script 2 would print the contents of the first 3 files with a `.pdb` file extension. `$1`, `$2`, and `$3` refer to the first, second, and third argument respectively.

Script 3 would print all the arguments to the script (i.e. all the `.pdb` files), followed by `.pdb`. `$@` refers to *all* the arguments given to a shell script.

```         
cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb
```
:::
::::

::: {.callout-note appearance="simple"}
# Key Points

-   Save commands in files (usually called shell scripts) for re-use.

-   `bash [filename]` runs the commands saved in a file.

-   `$@` refers to all of a shell script’s command-line arguments.

-   `$1`, `$2`, etc., refer to the first command-line argument, the second command-line argument, etc.

-   Place variables in quotes if the values might have spaces in them.

-   Letting users decide what files to process is more flexible and more consistent with built-in Unix commands.
:::
